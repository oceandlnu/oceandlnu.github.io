<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ocean&#39;s Blogs</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://oceandlnu.github.io/"/>
  <updated>2018-07-30T06:56:04.276Z</updated>
  <id>https://oceandlnu.github.io/</id>
  
  <author>
    <name>Ocean</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>docker &amp; docker-compose 部署</title>
    <link href="https://oceandlnu.github.io/2018/06/29/docker%20&amp;%20docker-compose%20%E9%83%A8%E7%BD%B2/"/>
    <id>https://oceandlnu.github.io/2018/06/29/docker &amp; docker-compose 部署/</id>
    <published>2018-06-29T02:26:23.000Z</published>
    <updated>2018-07-30T06:56:04.276Z</updated>
    
    <content type="html"><![CDATA[<h3 id="docker-安装"><a href="#docker-安装" class="headerlink" title="docker 安装"></a>docker 安装</h3><p>进入 <a href="https://download.docker.com/linux/static/stable/x86_64/" target="_blank" rel="noopener">下载地址</a> 选择最新的包下载</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar xzvf docker<span class="number">-18.03</span><span class="number">.1</span>-ce.tgz</span><br><span class="line">sudo cp docker<span class="comment">/* /usr/bin/</span></span><br></pre></td></tr></table></figure><blockquote><p>启动</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dockerd &amp;</span><br></pre></td></tr></table></figure><blockquote><p>验证是否安装成功</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker -v</span><br><span class="line">docker info</span><br></pre></td></tr></table></figure><blockquote><p>为当前用户增加执行权限</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo groupadd docker</span><br><span class="line">sudo usermod -aG docker <span class="variable">$USER</span></span><br></pre></td></tr></table></figure><h3 id="docker-compose-安装"><a href="#docker-compose-安装" class="headerlink" title="docker-compose 安装"></a>docker-compose 安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#如果shell是zsh，切换到bash安装</span></span><br><span class="line">bash</span><br><span class="line">sudo curl -L https://github.com/docker/compose/releases/download/1.21.2/docker-compose-$(uname -s)-$(uname -m) -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line">sudo chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><h3 id="替换国内源"><a href="#替换国内源" class="headerlink" title="替换国内源"></a>替换国内源</h3><blockquote><p>编辑 <code>sudo nano /etc/docker/daemon.json</code> 如果不存在则创建。如果文件为空，添加以下内容。</p></blockquote><p><a href="http://guide.daocloud.io/dcs/daocloud-9153151.html" target="_blank" rel="noopener">参考链接</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"registry-mirrors"</span>: [</span><br><span class="line">        <span class="string">"http://0ed8bcb8.m.daocloud.io"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"insecure-registries"</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>验证</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure><h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><blockquote><p>关闭所有容器（停止所有服务）</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose stop</span><br></pre></td></tr></table></figure><blockquote><p>删除所有容器</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker-compose down</span><br><span class="line">docker container prune</span><br></pre></td></tr></table></figure><blockquote><p>删除所有镜像</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker rmi $(docker images -q)</span><br><span class="line">docker image rm $(docker image ls -q)</span><br></pre></td></tr></table></figure><blockquote><p>进入工作目录</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose <span class="built_in">exec</span> workspace bash</span><br></pre></td></tr></table></figure><blockquote><p>远程连接mysql并执行mysql命令行模式</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose <span class="built_in">exec</span> mysql mysql -u[用户名] -p[密码]</span><br></pre></td></tr></table></figure><blockquote><p>远程连接 <code>redis</code> 并进入 <code>redis</code> 命令行模式，这条命令是默认端口为 6379，如果你更改了端口请在后面加上 -p [端口号]</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose <span class="built_in">exec</span> redis redis-cli -h redis</span><br></pre></td></tr></table></figure><ul><li><p><a href="https://github.com/laradock/laradock/issues/1315#issuecomment-380492758" target="_blank" rel="noopener">laradock 设置代理</a></p></li><li><p>参考资料：</p></li><li><a href="https://docs.docker.com/install/linux/docker-ce/binaries/" target="_blank" rel="noopener">https://docs.docker.com/install/linux/docker-ce/binaries/</a></li><li><a href="https://docs.docker.com/install/linux/linux-postinstall/" target="_blank" rel="noopener">https://docs.docker.com/install/linux/linux-postinstall/</a></li><li><a href="https://docs.docker.com/compose/install/#install-compose" target="_blank" rel="noopener">https://docs.docker.com/compose/install/#install-compose</a></li><li><a href="https://github.com/yeasy/docker_practice/blob/master/SUMMARY.md" target="_blank" rel="noopener">https://github.com/yeasy/docker_practice/blob/master/SUMMARY.md</a></li></ul>]]></content>
    
    <summary type="html">
    
      docker &amp; docker-compose 部署
    
    </summary>
    
      <category term="配置" scheme="https://oceandlnu.github.io/categories/%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="linux" scheme="https://oceandlnu.github.io/tags/linux/"/>
    
      <category term="docker" scheme="https://oceandlnu.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Manjaro 日常配置</title>
    <link href="https://oceandlnu.github.io/2018/05/29/Manjaro%20%E6%97%A5%E5%B8%B8%E9%85%8D%E7%BD%AE/"/>
    <id>https://oceandlnu.github.io/2018/05/29/Manjaro 日常配置/</id>
    <published>2018-05-29T02:47:23.000Z</published>
    <updated>2018-07-31T03:00:47.671Z</updated>
    
    <content type="html"><![CDATA[<h3 id="更换国内源"><a href="#更换国内源" class="headerlink" title="更换国内源"></a>更换国内源</h3><p>清华源：<a href="https://mirrors.tuna.tsinghua.edu.cn/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/</a><br>中科大：<a href="https://mirrors.ustc.edu.cn/" target="_blank" rel="noopener">https://mirrors.ustc.edu.cn/</a><br>阿里源：<a href="https://opsx.alibaba.com/" target="_blank" rel="noopener">https://opsx.alibaba.com/</a></p><blockquote><p>列出可用中国镜像站列表：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman-mirrors -i -c China -m rank</span><br></pre></td></tr></table></figure><p>勾选 <code>https://mirrors.tuna.tsinghua.edu.cn/manjaro/</code>，然后 OK -&gt; 确定 。</p><blockquote><p><code>Arch Linux CN</code> 软件源</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/pacman.conf</span><br><span class="line"><span class="comment">#在文件末尾添加以下两行</span></span><br><span class="line">[archlinuxcn]</span><br><span class="line">Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/<span class="variable">$arch</span></span><br></pre></td></tr></table></figure><blockquote><p>更新缓存</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -Syy</span><br></pre></td></tr></table></figure><blockquote><p>安装 <code>archlinuxcn-keyring</code> 包导入 GPG key</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S archlinuxcn-keyring</span><br></pre></td></tr></table></figure><blockquote><p>安装更新</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -R thunar-archive-plugin</span><br><span class="line">sudo pacman -Syyu</span><br></pre></td></tr></table></figure><blockquote><p>安装 yaourt</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S yaourt</span><br></pre></td></tr></table></figure><blockquote><p><code>AUR</code> 软件源</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/yaourtrc</span><br><span class="line"><span class="comment"># 去掉 # AURURL 的注释，修改为</span></span><br><span class="line">AURURL=<span class="string">"https://aur.tuna.tsinghua.edu.cn"</span></span><br></pre></td></tr></table></figure><blockquote><p>菜单 -&gt; 添加/删除软件 -&gt; 首选项 -&gt; AUR，打开 <code>启用AUR支持</code>  勾选 <code>从AUR检查更新</code></p></blockquote><h3 id="常用软件"><a href="#常用软件" class="headerlink" title="常用软件"></a>常用软件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S chromium filezilla screenfetch netease-cloud-music obs-studio</span><br></pre></td></tr></table></figure><blockquote><p><code>chromiun</code>安装 <code>flash</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yaourt -S pepper-flash</span><br></pre></td></tr></table></figure><blockquote><p>微信、TIM</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yaourt -S deepin-wechat deepin.com.qq.office</span><br></pre></td></tr></table></figure><blockquote><p>git配置</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"ocean"</span></span><br><span class="line">git config --global user.name <span class="string">"oceandlnu"</span></span><br><span class="line">git config --global user.email <span class="string">"oceandlnu@gmail.com"</span></span><br></pre></td></tr></table></figure><blockquote><p>删除孤立软件包(慎用)</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -Rs $(pacman -Qtdq)</span><br></pre></td></tr></table></figure><ul><li>有需要可以自行去 <code>软件包管理器(添加/删除软件)</code> 或者<a href="https://aur.archlinux.org/" target="_blank" rel="noopener">AUR</a>查找软件。</li></ul><h3 id="自由截图快捷键设置"><a href="#自由截图快捷键设置" class="headerlink" title="自由截图快捷键设置"></a>自由截图快捷键设置</h3><ul><li>菜单 -&gt; 设置 -&gt; 键盘 -&gt; 应用程序快捷键 -&gt; 添加 -&gt; 命令 <code>xfce4-screenshooter -r</code> 点击确定，接下来会提示设置快捷键，我设置为 <code>ctrl+alt+A</code></li></ul><h3 id="安装深度截图"><a href="#安装深度截图" class="headerlink" title="安装深度截图"></a>安装深度截图</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yaourt -S deepin-screenshot</span><br></pre></td></tr></table></figure><h3 id="移动设备挂载"><a href="#移动设备挂载" class="headerlink" title="移动设备挂载"></a>移动设备挂载</h3><ul><li><p>系统默认已安装 <code>udiskie</code>，如果没有执行下面命令安装 <code>sudo pacman -S udiskie</code></p></li><li><p>菜单 -&gt; 设置 -&gt; 可移动驱动器和介质 -&gt; 选择 <code>存储器</code> -&gt; 勾选 <code>热插拔时挂载可移动驱动器</code> <code>插入后挂载可移动介质</code>(或执行<code>usidkie -2</code> 命令设置为开机启动)</p></li></ul><h3 id="日常开发"><a href="#日常开发" class="headerlink" title="日常开发"></a>日常开发</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yaourt -S charles mysql-workbench postman-bin redis-desktop-manager haroopad</span><br></pre></td></tr></table></figure><ul><li>破解 <code>charles</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mv charles.jar /usr/share/java/charles</span><br></pre></td></tr></table></figure><ul><li>如果 <code>redis-desktop-manager</code>打开失败</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yaourt -R redis-desktop-manager</span><br><span class="line">yaourt -S redis-desktop-manager-bin</span><br><span class="line">yaourt -R redis-desktop-manager-bin</span><br><span class="line">yaourt -S redis-desktop-manager</span><br></pre></td></tr></table></figure><h4 id="phpstorm"><a href="#phpstorm" class="headerlink" title="phpstorm"></a>phpstorm</h4><p>下载地址：<a href="http://www.jetbrains.com/" target="_blank" rel="noopener">http://www.jetbrains.com/</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/hosts</span><br><span class="line"><span class="comment">#添加下面一行</span></span><br><span class="line">0.0.0.0 account.jetbrains.com</span><br></pre></td></tr></table></figure><p>解压安装包进入bin目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./phpstorm.sh &amp;</span><br></pre></td></tr></table></figure><p>获取激活码，注册码激活：</p><p><a href="http://idea.iteblog.com/" target="_blank" rel="noopener">http://idea.iteblog.com/</a><br><a href="http://idea.lanyus.com/" target="_blank" rel="noopener">http://idea.lanyus.com/</a></p><p>配置文件存放目录：<code>~/.PhpStorm2018.1</code></p><h4 id="sublime-text"><a href="#sublime-text" class="headerlink" title="sublime text"></a>sublime text</h4><p><a href="https://oceandlnu.github.io/2017/01/18/Sublime%20Text%20%E6%97%A5%E5%B8%B8%E9%85%8D%E7%BD%AE/">Sublime Text 日常配置</a></p><h4 id="wechat-dev-tool"><a href="#wechat-dev-tool" class="headerlink" title="wechat-dev-tool"></a>wechat-dev-tool</h4><p>在 <code>～/.local/share/applications/</code> 目录下创建desktop文件(nano xxx.desktop)</p><p>wechat-dev-tool</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Version=1.0</span><br><span class="line">Type=Application</span><br><span class="line">Name=wechat-dev-tool</span><br><span class="line">Icon=/home/ocean/develop/wechat-dev-tool/app/images/icon.png</span><br><span class="line">Exec=<span class="string">"/home/ocean/develop/wechat-dev-tool/nw"</span> %f</span><br><span class="line">Comment=The Drive to Develop</span><br><span class="line">Categories=Development;IDE;</span><br><span class="line">Terminal=<span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="安装WPS"><a href="#安装WPS" class="headerlink" title="安装WPS"></a>安装WPS</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yaourt -S wps-office ttf-wps-fonts</span><br></pre></td></tr></table></figure><h3 id="安装搜狗拼音"><a href="#安装搜狗拼音" class="headerlink" title="安装搜狗拼音"></a>安装搜狗拼音</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yaourt -S fcitx-im fcitx-configtool fcitx-sogoupinyin</span><br></pre></td></tr></table></figure><ul><li>创建 <code>.xprofile</code> 文件，添加以下语句，否则只能在一部分窗口下输入。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nano ~/.xprofile</span><br><span class="line"><span class="comment">#添加以下语句</span></span><br><span class="line"><span class="built_in">export</span> GTK_IM_MODULE=fcitx</span><br><span class="line"><span class="built_in">export</span> QT_IM_MODULE=fcitx</span><br><span class="line"><span class="built_in">export</span> XMODIFIERS=@im=fcitx</span><br></pre></td></tr></table></figure><h3 id="SSR-Client安装配置脚本"><a href="#SSR-Client安装配置脚本" class="headerlink" title="SSR Client安装配置脚本"></a>SSR Client安装配置脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/develop</span><br><span class="line"><span class="comment"># 下载</span></span><br><span class="line">curl https://raw.githubusercontent.com/the0demiurge/CharlesScripts/master/charles/bin/ssr -o <span class="string">"ssr"</span></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">wget https://raw.githubusercontent.com/the0demiurge/CharlesScripts/master/charles/bin/ssr -O <span class="string">"ssr"</span></span><br><span class="line"><span class="comment"># 添加执行权限</span></span><br><span class="line">chmod a+x ssr</span><br><span class="line">sudo ln -s /home/ocean/develop/ssr /usr/bin/ssr</span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">yaourt -S jq tsocks</span><br><span class="line"><span class="comment"># 安装ssr客户端</span></span><br><span class="line">ssr install</span><br><span class="line"><span class="comment"># 配置</span></span><br><span class="line">ssr config</span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">ssr start</span><br><span class="line"><span class="comment"># 停止</span></span><br><span class="line">ssr stop</span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">ssr restart</span><br><span class="line"><span class="comment"># 卸载</span></span><br><span class="line">ssr uninstall</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://github.com/Alvin9999/new-pac/wiki/ss%E5%85%8D%E8%B4%B9%E8%B4%A6%E5%8F%B7" target="_blank" rel="noopener">自由上网</a></p></blockquote><blockquote><p><a href="https://doub.io/sszhfx/" target="_blank" rel="noopener">逗比根据地</a></p></blockquote><blockquote><p><a href="http://ss.pythonic.life/" target="_blank" rel="noopener">SSR 账号</a></p></blockquote><blockquote><p><a href="https://laod.cn/" target="_blank" rel="noopener">老D博客</a></p></blockquote><h3 id="代理配置-Pac-SwitchyOmega-二选一"><a href="#代理配置-Pac-SwitchyOmega-二选一" class="headerlink" title="代理配置(Pac/SwitchyOmega 二选一)"></a>代理配置(Pac/SwitchyOmega 二选一)</h3><h4 id="Pac-全局代理"><a href="#Pac-全局代理" class="headerlink" title="Pac 全局代理"></a>Pac 全局代理</h4><blockquote><p>系统默认已经安装 <code>pip</code>，重新安装执行<code>yaourt -S python-pip</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install genpac</span><br><span class="line"><span class="comment"># 在当前目录(比如：/home/ocean/develop)下生成autoproxy.pac</span></span><br><span class="line">genpac --format=pac --pac-proxy=<span class="string">"SOCKS5 127.0.0.1:1080"</span> --pac-precise --output=<span class="string">"autoproxy.pac"</span></span><br></pre></td></tr></table></figure><blockquote><p>设置全局代理，在<code>environment</code>文件里添加 <code>auto_proxy/AUTO_PROXY</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/environment</span><br><span class="line"><span class="comment">#添加下面任意一行</span></span><br><span class="line">auto_proxy=<span class="string">"file:///home/ocean/develop/autoproxy.pac"</span></span><br><span class="line">AUTO_PROXY=<span class="string">"file:///home/ocean/develop/autoproxy.pac"</span></span><br></pre></td></tr></table></figure><h4 id="SwitchyOmega-代理配置"><a href="#SwitchyOmega-代理配置" class="headerlink" title="SwitchyOmega 代理配置"></a>SwitchyOmega 代理配置</h4><p><a href="https://switchyomega.com/index.html" target="_blank" rel="noopener">SwitchyOmega</a></p><p><a href="https://github.com/FelisCatus/SwitchyOmega/releases" target="_blank" rel="noopener">SwitchyOmega Github</a></p><p>安装完成后，点击右上角 <code>SwitchyOmega</code> -&gt; 选项</p><p>1.情景模式 -&gt; proxy</p><table><thead><tr><th style="text-align:left">网址协议</th><th style="text-align:left">代理协议</th><th style="text-align:left">代理服务器</th><th style="text-align:left">代理端口</th></tr></thead><tbody><tr><td style="text-align:left">(默认)</td><td style="text-align:left">SOCKS5</td><td style="text-align:left">127.0.0.1</td><td style="text-align:left">1080</td></tr></tbody></table><p>2.情景模式 -&gt; auto switch</p><blockquote><p>规则列表设置 -&gt; 添加规则列表</p></blockquote><table><thead><tr><th style="text-align:left">规则列表格式</th><th style="text-align:left">AutoProxy</th></tr></thead><tbody><tr><td style="text-align:left">规则列表网址</td><td style="text-align:left"><a href="https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt" target="_blank" rel="noopener">https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt</a></td></tr></tbody></table><blockquote><p>切换规则</p></blockquote><table><thead><tr><th style="text-align:left">规则列表规则</th><th style="text-align:left">(按照规则列表匹配请求)</th><th style="text-align:left">proxy</th></tr></thead><tbody><tr><td style="text-align:left">默认情景模式</td><td style="text-align:left"></td><td style="text-align:left">直接连接</td></tr></tbody></table><p>3.<code>立即更新情景模式</code> -&gt; <code>应用选项</code> 保存设置。</p><p>情景模式说明：</p><table><thead><tr><th style="text-align:left">proxy</th><th style="text-align:left">所有URL都走代理模式</th></tr></thead><tbody><tr><td style="text-align:left">auto switch</td><td style="text-align:left">自动根据URL判断是否走代理</td></tr></tbody></table><h3 id="终端代理"><a href="#终端代理" class="headerlink" title="终端代理"></a>终端代理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yaourt -S proxychains-ng</span><br></pre></td></tr></table></figure><ul><li>编辑<code>proxychains.conf</code>文件，将<code>socks4 127.0.0.1 9095</code>修改为<code>socks5 127.0.0.1 1080</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/proxychains.conf</span><br><span class="line"><span class="comment">#找到最后一行，修改为</span></span><br><span class="line">socks5 127.0.0.1 1080</span><br></pre></td></tr></table></figure><ul><li>使用：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains yourcommand</span><br></pre></td></tr></table></figure><ul><li>eg：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains curl www.google.com</span><br></pre></td></tr></table></figure><h3 id="安装-VirtualBox"><a href="#安装-VirtualBox" class="headerlink" title="安装 VirtualBox"></a>安装 VirtualBox</h3><ul><li>查看当前的内核版本， <code>uname -r</code> ，比如输出了 <code>4.14.44-1-MANJARO</code> 内核版本为 <code>414</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yaourt -S virtualbox linux414-virtualbox-host-modules virtualbox-ext-oracle</span><br></pre></td></tr></table></figure><ul><li><p><code>[kernel version]-virtualbox-host-modules</code>  根据内核版本选择，假如我的内核版本为 <code>3.7.4-1-MANJARO</code>，则安装 <code>linux37-virtualbox-host-modules</code></p></li><li><p>添加当前用户到vboxusers，如果不需要使用USB外设，可以不执行此操作。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gpasswd -a [username] vboxusers</span><br></pre></td></tr></table></figure><ul><li>eg</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gpasswd -a ocean vboxusers</span><br></pre></td></tr></table></figure><p>重新启动系统或执行 <code>sudo vboxreload</code> ，<a href="https://wiki.manjaro.org/index.php?title=Virtualbox" target="_blank" rel="noopener">参考链接</a></p><h3 id="安装oh-my-zsh、powerline"><a href="#安装oh-my-zsh、powerline" class="headerlink" title="安装oh-my-zsh、powerline"></a>安装oh-my-zsh、powerline</h3><ul><li>Manjaro 自带 <code>zsh</code> ， <code>zsh --version</code> 查看，如果没有安装 执行 <code>yaourt -S zsh</code></li></ul><p>oh-my-zsh：<a href="http://ohmyz.sh/" target="_blank" rel="noopener">http://ohmyz.sh/</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 oh-my-zsh</span></span><br><span class="line">sh -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>"</span></span><br></pre></td></tr></table></figure><ul><li><code>zsh</code> 主题配置(非必须)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装powerline及字体</span></span><br><span class="line">yaourt -S powerline powerline-fonts</span><br><span class="line"><span class="comment"># 编辑 `nano .zshrc` 在最后添加</span></span><br><span class="line">powerline-daemon -q</span><br><span class="line">. /usr/lib/python3.6/site-packages/powerline/bindings/zsh/powerline.zsh</span><br></pre></td></tr></table></figure><ul><li>安装 nvm(安装完成后需要重启终端)</li></ul><p>Github：<a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">https://github.com/creationix/nvm</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | zsh</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | zsh</span><br><span class="line"><span class="comment"># 更换 nvm 淘宝源</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"export NVM_NODEJS_ORG_MIRROR=https://npm.taobao.org/mirrors/node"</span> &gt;&gt; ~/.zshrc</span><br></pre></td></tr></table></figure><ul><li>安装 node</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 最新 lts 版本</span></span><br><span class="line">nvm install --lts</span><br><span class="line"><span class="comment"># 更换 npm 淘宝源</span></span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br><span class="line"><span class="comment"># 查看当前源</span></span><br><span class="line">npm config get registry</span><br><span class="line"><span class="comment"># 补充(yarn安装，查看源，更换源)</span></span><br><span class="line">npm install -g yarn</span><br><span class="line">yarn config get registry</span><br><span class="line">yarn config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><ul><li>安装hexo</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><ul><li>临时切换 bash</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash</span><br></pre></td></tr></table></figure><ul><li>临时切换 zsh</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zsh</span><br></pre></td></tr></table></figure><ul><li>修改 bash 为默认 shell</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /bin/bash</span><br></pre></td></tr></table></figure><ul><li>修改 zsh 为默认 shell</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure><ul><li>免密登录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br><span class="line"><span class="comment">#将公钥追加到远程服务器的 ~/.ssh/authorized_keys</span></span><br></pre></td></tr></table></figure><ul><li>保持ssh连接(客户端配置)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/ssh/ssh_config</span><br><span class="line"><span class="comment">#添加下面两行</span></span><br><span class="line">ServerAliveInterval 120</span><br><span class="line">ServerAliveCountMax 60</span><br></pre></td></tr></table></figure><p><a href="http://einverne.github.io/post/2017/05/ssh-keep-alive.html" target="_blank" rel="noopener">参考链接</a></p>]]></content>
    
    <summary type="html">
    
      Manjaro 日常配置
    
    </summary>
    
      <category term="配置" scheme="https://oceandlnu.github.io/categories/%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="linux" scheme="https://oceandlnu.github.io/tags/linux/"/>
    
      <category term="manjaro" scheme="https://oceandlnu.github.io/tags/manjaro/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 日常配置</title>
    <link href="https://oceandlnu.github.io/2018/05/26/Ubuntu%20%E6%97%A5%E5%B8%B8%E9%85%8D%E7%BD%AE/"/>
    <id>https://oceandlnu.github.io/2018/05/26/Ubuntu 日常配置/</id>
    <published>2018-05-26T05:47:23.000Z</published>
    <updated>2018-07-31T03:01:13.511Z</updated>
    
    <content type="html"><![CDATA[<h3 id="更换国内源"><a href="#更换国内源" class="headerlink" title="更换国内源"></a>更换国内源</h3><p>系统设置 -&gt; 软件和更新 选择下载服务器 -&gt; “mirrors.aliyun.com”</p><h3 id="安装常用软件"><a href="#安装常用软件" class="headerlink" title="安装常用软件"></a>安装常用软件</h3><p>更新源并且升级软件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br></pre></td></tr></table></figure><h4 id="安装vim、chromium、filezilla"><a href="#安装vim、chromium、filezilla" class="headerlink" title="安装vim、chromium、filezilla"></a>安装vim、chromium、filezilla</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install git vim chromium-browser filezilla -y</span><br><span class="line"><span class="comment">#GIMP图像处理，Kdenlive视频处理，p7zip支持rar压缩</span></span><br><span class="line">sudo apt install gimp kdenlive p7zip-full -y</span><br></pre></td></tr></table></figure><h4 id="安装nvm-安装完成后需要重启终端"><a href="#安装nvm-安装完成后需要重启终端" class="headerlink" title="安装nvm(安装完成后需要重启终端)"></a>安装nvm(安装完成后需要重启终端)</h4><p><a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">nvm</a><br><a href="https://github.com/tj/n" target="_blank" rel="noopener">n</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash</span><br><span class="line"><span class="comment"># 更换 nvm 淘宝源</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"export NVM_NODEJS_ORG_MIRROR=https://npm.taobao.org/mirrors/node"</span> &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure><ul><li>安装 node</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 最新 lts 版本</span></span><br><span class="line">nvm install --lts</span><br><span class="line"><span class="comment"># 更换 npm 淘宝源</span></span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br><span class="line"><span class="comment"># 查看当前源</span></span><br><span class="line">npm config get registry</span><br><span class="line"><span class="comment"># 补充(yarn安装，查看源，更换源)</span></span><br><span class="line">npm install -g yarn</span><br><span class="line">yarn config get registry</span><br><span class="line">yarn config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><ul><li>安装hexo</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><h4 id="安装搜狗输入法"><a href="#安装搜狗输入法" class="headerlink" title="安装搜狗输入法"></a>安装搜狗输入法</h4><p>下载：<a href="https://pinyin.sogou.com/linux/" target="_blank" rel="noopener">https://pinyin.sogou.com/linux/</a></p><p>双击安装下载的deb软件包，安装完成之后，进入语言支持-&gt;键盘输入法系统 选项旁边选择fcitx，重启电脑</p><p>使用快捷键 ctrl+space 或者 shift 切换输入法</p><h4 id="安装网易云音乐"><a href="#安装网易云音乐" class="headerlink" title="安装网易云音乐"></a>安装网易云音乐</h4><p>下载：<a href="http://music.163.com/#/download" target="_blank" rel="noopener">http://music.163.com/#/download</a></p><p>双击安装下载的deb软件包即可</p><h4 id="Chromium创建桌面应用-例如：钉钉、微信"><a href="#Chromium创建桌面应用-例如：钉钉、微信" class="headerlink" title="Chromium创建桌面应用(例如：钉钉、微信)"></a>Chromium创建桌面应用(例如：钉钉、微信)</h4><p>在 ～/.local/share/applications/ 目录下创建各自的desktop文件(vim xxx.desktop)</p><p>钉钉</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env xdg-open</span></span><br><span class="line">[Desktop Entry]</span><br><span class="line">Version=1.0</span><br><span class="line">Type=Application</span><br><span class="line">Name=钉钉</span><br><span class="line">Icon=/home/ocean/appicon/dd.png</span><br><span class="line">Exec=/opt/google/chrome/google-chrome <span class="string">"--app=https://im.dingtalk.com/"</span></span><br><span class="line">Terminal=<span class="literal">false</span></span><br><span class="line">StartupWMClass=im.dingtalk.com</span><br></pre></td></tr></table></figure><p>微信</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env xdg-open</span></span><br><span class="line">[Desktop Entry]</span><br><span class="line">Version=1.0</span><br><span class="line">Type=Application</span><br><span class="line">Name=微信</span><br><span class="line">Icon=/home/ocean/appicon/wx.png</span><br><span class="line">Exec=/opt/google/chrome/google-chrome <span class="string">"--app=https://wx.qq.com/?lang=zh_CN"</span></span><br><span class="line">Terminal=<span class="literal">false</span></span><br><span class="line">StartupWMClass=wx.qq.com</span><br></pre></td></tr></table></figure><p>图标路径可以自己改成对应的路径，不必按照案例来做，只要能访问到就是OK的</p><p><img src="/uploads/2017-09-25/dd.png" alt=""></p><p><img src="/uploads/2017-09-25/wx.png" alt=""></p><p>创建App快捷方式：</p><p>charles<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Version=1.0</span><br><span class="line">Type=Application</span><br><span class="line">Name=charles</span><br><span class="line">Icon=/home/ocean/develop/charles/icon/64x64/apps/charles-proxy.png</span><br><span class="line">Exec=<span class="string">"/home/ocean/develop/charles/bin/charles"</span> %f</span><br><span class="line">Comment=The Drive to Develop</span><br><span class="line">Categories=Development;IDE;</span><br><span class="line">Terminal=<span class="literal">false</span></span><br></pre></td></tr></table></figure></p><p>postman<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Version=1.0</span><br><span class="line">Type=Application</span><br><span class="line">Name=Postman</span><br><span class="line">Icon=/home/ocean/develop/Postman/resources/app/assets/icon.png</span><br><span class="line">Exec=<span class="string">"/home/ocean/develop/Postman/Postman"</span> %f</span><br><span class="line">Comment=The Drive to Develop</span><br><span class="line">Categories=Development;IDE;</span><br><span class="line">Terminal=<span class="literal">false</span></span><br></pre></td></tr></table></figure></p><p>pycharm<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Version=1.0</span><br><span class="line">Type=Application</span><br><span class="line">Name=Pycharm</span><br><span class="line">Icon=/home/ocean/develop/pycharm-community-2018.1.2/bin/pycharm.png</span><br><span class="line">Exec=<span class="string">"/home/ocean/develop/pycharm-community-2018.1.2/bin/pycharm.sh"</span> %f</span><br><span class="line">Comment=The Drive to Develop</span><br><span class="line">Categories=Development;IDE;</span><br><span class="line">Terminal=<span class="literal">false</span></span><br></pre></td></tr></table></figure></p><p>wechat-dev-tool<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Version=1.0</span><br><span class="line">Type=Application</span><br><span class="line">Name=wechat-dev-tool</span><br><span class="line">Icon=/home/ocean/develop/wechat-dev-tool/app/images/icon.png</span><br><span class="line">Exec=<span class="string">"/home/ocean/develop/wechat-dev-tool/nw"</span> %f</span><br><span class="line">Comment=The Drive to Develop</span><br><span class="line">Categories=Development;IDE;</span><br><span class="line">Terminal=<span class="literal">false</span></span><br></pre></td></tr></table></figure></p><h4 id="安装Postman"><a href="#安装Postman" class="headerlink" title="安装Postman"></a>安装Postman</h4><p>官网：<a href="https://www.getpostman.com/" target="_blank" rel="noopener">https://www.getpostman.com/</a></p><p>下载解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> Postman/</span><br><span class="line">sudo apt install libgconf-2-4 -y</span><br><span class="line">./Postman &amp;</span><br></pre></td></tr></table></figure><h4 id="安装Workbench"><a href="#安装Workbench" class="headerlink" title="安装Workbench"></a>安装Workbench</h4><p>下载地址：<a href="https://dev.mysql.com/downloads/workbench/" target="_blank" rel="noopener">https://dev.mysql.com/downloads/workbench/</a></p><h4 id="安装VirtualBox-VMware"><a href="#安装VirtualBox-VMware" class="headerlink" title="安装VirtualBox VMware"></a>安装VirtualBox VMware</h4><p>VirtualBox下载地址：<a href="https://www.virtualbox.org/wiki/Downloads" target="_blank" rel="noopener">https://www.virtualbox.org/wiki/Downloads</a></p><p>VMware下载地址：<a href="https://www.vmware.com/cn/products/workstation-pro/workstation-pro-evaluation.html" target="_blank" rel="noopener">https://www.vmware.com/cn/products/workstation-pro/workstation-pro-evaluation.html</a></p><p>安装Vmware:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ./VMware-Workstation-Full-14.1.1-7528167.x86_64.bundle</span><br></pre></td></tr></table></figure><h4 id="PHPStorm-Pycharm"><a href="#PHPStorm-Pycharm" class="headerlink" title="PHPStorm Pycharm"></a>PHPStorm Pycharm</h4><p>下载地址：<a href="http://www.jetbrains.com/" target="_blank" rel="noopener">http://www.jetbrains.com/</a></p><p>解压进入bin目录，启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./phpstorm.sh &amp;</span><br><span class="line">./pycharm.sh &amp;</span><br></pre></td></tr></table></figure><blockquote><p>激活</p></blockquote><p>修改hosts文件，添加下面一行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0.0.0.0 account.jetbrains.com</span><br></pre></td></tr></table></figure><p>获取激活码，注册码激活：</p><p><a href="http://idea.iteblog.com/" target="_blank" rel="noopener">http://idea.iteblog.com/</a><br><a href="http://idea.lanyus.com/" target="_blank" rel="noopener">http://idea.lanyus.com/</a></p><h4 id="Sublime-Text"><a href="#Sublime-Text" class="headerlink" title="Sublime Text"></a>Sublime Text</h4><p>下载地址：<a href="http://www.sublimetext.com/" target="_blank" rel="noopener">http://www.sublimetext.com/</a></p><h3 id="Shadowsocksr-Client"><a href="#Shadowsocksr-Client" class="headerlink" title="Shadowsocksr Client"></a>Shadowsocksr Client</h3><h5 id="SSR-客户端安装配置脚本-推荐"><a href="#SSR-客户端安装配置脚本-推荐" class="headerlink" title="SSR 客户端安装配置脚本(推荐)"></a>SSR 客户端安装配置脚本(推荐)</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line">curl https://raw.githubusercontent.com/the0demiurge/CharlesScripts/master/charles/bin/ssr -o <span class="string">"ssr"</span></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">wget https://raw.githubusercontent.com/the0demiurge/CharlesScripts/master/charles/bin/ssr -O <span class="string">"ssr"</span></span><br><span class="line"><span class="comment"># 添加执行权限</span></span><br><span class="line">chmod a+x ssr</span><br><span class="line">sudo ln -s /home/ocean/develop/ssr /usr/bin/ssr</span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">sudo apt install curl jq tsocks -y</span><br><span class="line"><span class="comment"># 安装ssr客户端</span></span><br><span class="line">ssr install</span><br><span class="line"><span class="comment"># 配置</span></span><br><span class="line">ssr config</span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">ssr start</span><br><span class="line"><span class="comment"># 停止</span></span><br><span class="line">ssr stop</span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">ssr restart</span><br><span class="line"><span class="comment"># 卸载</span></span><br><span class="line">ssr uninstall</span><br></pre></td></tr></table></figure><h5 id="SSR-GUI-客户端"><a href="#SSR-GUI-客户端" class="headerlink" title="SSR GUI 客户端"></a>SSR GUI 客户端</h5><p><a href="https://github.com/erguotou520/electron-ssr/releases" target="_blank" rel="noopener">ssr GUI 客户端</a></p><p>直接下载安装就可以，不多做介绍，对于有些Linux客户端无效，不推荐。</p><p>安装ssr之后，还不能翻墙，因为没有设置代理，下面进行设置。</p><h4 id="代理配置-Pac-SwitchyOmega-二选一"><a href="#代理配置-Pac-SwitchyOmega-二选一" class="headerlink" title="代理配置(Pac/SwitchyOmega 二选一)"></a>代理配置(Pac/SwitchyOmega 二选一)</h4><h5 id="Pac-自动代理配置"><a href="#Pac-自动代理配置" class="headerlink" title="Pac 自动代理配置"></a>Pac 自动代理配置</h5><p>1.genpac 生成pac(推荐)</p><blockquote><p><a href="https://github.com/JinnLynn/genpac" target="_blank" rel="noopener">genpac</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装pip</span></span><br><span class="line">sudo apt install python-pip -y</span><br><span class="line"><span class="comment"># 安装genpac</span></span><br><span class="line">pip install genpac</span><br><span class="line"><span class="comment"># 更新genpac</span></span><br><span class="line">pip install --upgrade genpac</span><br><span class="line"><span class="comment"># 卸载genpac</span></span><br><span class="line">pip uninstall genpac</span><br><span class="line"><span class="comment"># 在当前目录(比如：/home/ocean/develop)下生成autoproxy.pac</span></span><br><span class="line">genpac --format=pac --pac-proxy=<span class="string">"SOCKS5 127.0.0.1:1080"</span> --pac-precise --output=<span class="string">"autoproxy.pac"</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：如果执行时出现无法找到命令 genpac 错误，可能是因为genpac命令没有被安装到系统路径，genpac执行入口文件被安装到了<code>~/.local/bin</code>，解决方法</p></blockquote><blockquote><p>方案一：将<code>~/.local/bin</code>添加到系统路径</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s ~/.<span class="built_in">local</span>/bin/genpac /usr/bin/genpac</span><br></pre></td></tr></table></figure><blockquote><p>方案二：卸载重新使用sudo安装genpac</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip uninstall genpac</span><br><span class="line">sudo pip install genpac</span><br><span class="line">sudo pip install --upgrade genpac</span><br></pre></td></tr></table></figure><p>2.pac_get.sh 生成pac</p><blockquote><p><a href="https://github.com/ToyoDAdoubi/doubi/blob/master/pac_get.sh" target="_blank" rel="noopener">pac_get</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载脚本到当前目录</span></span><br><span class="line">curl https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/pac_get.sh -o <span class="string">"pac_get"</span></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">wget https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/pac_get.sh -O <span class="string">"pac_get"</span></span><br><span class="line">chmod a+x pac_get</span><br><span class="line">vim pac_get</span><br><span class="line"><span class="comment"># "__PROXY__"修改为自己的代理地址，比如"SOCKS5 127.0.0.1:1080"，否则无法翻墙</span></span><br><span class="line"><span class="comment"># Output_URL=生成pac文件路径，可自由修改，比如"autoproxy.pac"</span></span><br><span class="line"><span class="comment"># 修改保存后，执行脚本，在当前目录(比如：/home/ocean/develop)下生成autoproxy.pac</span></span><br><span class="line">./pac_get</span><br></pre></td></tr></table></figure><p>3.打开系统设置-&gt;网络-&gt;网络代理-&gt;自动，配置 URL”file://pac文件路径”，比如”file:///home/ocean/develop/autoproxy.pac”</p><h5 id="SwitchyOmega-代理配置"><a href="#SwitchyOmega-代理配置" class="headerlink" title="SwitchyOmega 代理配置"></a>SwitchyOmega 代理配置</h5><p><a href="https://switchyomega.com/index.html" target="_blank" rel="noopener">SwitchyOmega</a></p><p><a href="https://github.com/FelisCatus/SwitchyOmega/releases" target="_blank" rel="noopener">SwitchyOmega Github</a></p><p>安装完成后，点击右上角 <code>SwitchyOmega</code> -&gt; 选项</p><p>1.情景模式 -&gt; proxy</p><table><thead><tr><th style="text-align:left">网址协议</th><th style="text-align:left">代理协议</th><th style="text-align:left">代理服务器</th><th style="text-align:left">代理端口</th></tr></thead><tbody><tr><td style="text-align:left">(默认)</td><td style="text-align:left">SOCKS5</td><td style="text-align:left">127.0.0.1</td><td style="text-align:left">1080</td></tr></tbody></table><p>2.情景模式 -&gt; auto switch</p><blockquote><p>规则列表设置 -&gt; 添加规则列表</p></blockquote><table><thead><tr><th style="text-align:left">规则列表格式</th><th style="text-align:left">AutoProxy</th></tr></thead><tbody><tr><td style="text-align:left">规则列表网址</td><td style="text-align:left"><a href="https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt" target="_blank" rel="noopener">https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt</a></td></tr></tbody></table><blockquote><p>切换规则</p></blockquote><table><thead><tr><th style="text-align:left">规则列表规则</th><th style="text-align:left">(按照规则列表匹配请求)</th><th style="text-align:left">proxy</th></tr></thead><tbody><tr><td style="text-align:left">默认情景模式</td><td style="text-align:left"></td><td style="text-align:left">直接连接</td></tr></tbody></table><p>3.<code>立即更新情景模式</code> -&gt; <code>应用选项</code> 保存设置。</p><p>情景模式说明：</p><table><thead><tr><th style="text-align:left">proxy</th><th style="text-align:left">所有URL都走代理模式</th></tr></thead><tbody><tr><td style="text-align:left">auto switch</td><td style="text-align:left">自动根据URL判断是否走代理</td></tr></tbody></table><p>4.干货分享</p><blockquote><p><a href="https://github.com/Alvin9999/new-pac/wiki/ss%E5%85%8D%E8%B4%B9%E8%B4%A6%E5%8F%B7" target="_blank" rel="noopener">自由上网</a></p></blockquote><blockquote><p><a href="https://doub.io/sszhfx/" target="_blank" rel="noopener">逗比根据地</a></p></blockquote><blockquote><p><a href="http://ss.pythonic.life/" target="_blank" rel="noopener">SSR 账号</a></p></blockquote><blockquote><p><a href="https://laod.cn/" target="_blank" rel="noopener">老D博客</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      Ubuntu 日常配置
    
    </summary>
    
      <category term="配置" scheme="https://oceandlnu.github.io/categories/%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="linux" scheme="https://oceandlnu.github.io/tags/linux/"/>
    
      <category term="ubuntu" scheme="https://oceandlnu.github.io/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>lnmp access denied解决方案</title>
    <link href="https://oceandlnu.github.io/2018/05/12/lnmp%20access%20denied%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>https://oceandlnu.github.io/2018/05/12/lnmp access denied解决方案/</id>
    <published>2018-05-12T09:56:08.000Z</published>
    <updated>2018-07-26T05:19:37.220Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ul><li>前提：lnmp安装完成后，访问页面出现access denied</li></ul></blockquote><blockquote><ul><li>vim /usr/local/nginx/conf/vhost/xxx.conf 添加三行，如下</li></ul></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen <span class="number">8000</span>;</span><br><span class="line">  server_name alitong.com;</span><br><span class="line">  access_log off;</span><br><span class="line">  index index.html index.htm index.php;</span><br><span class="line">  root /code/ali_childrens_electric_business_live;</span><br><span class="line">  </span><br><span class="line">  include /usr/local/nginx/conf/rewrite/ecshop.conf;</span><br><span class="line">  #error_page <span class="number">404</span> /<span class="number">404.</span>html;</span><br><span class="line">  #error_page <span class="number">502</span> /<span class="number">502.</span>html;</span><br><span class="line">  </span><br><span class="line">  #允许跨域，仅测试开放</span><br><span class="line">  location / &#123;</span><br><span class="line">        add_header Access-Control-Allow-Origin *;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  location ~ [^/]\.php(/|$) &#123;</span><br><span class="line">    #增加下面三行</span><br><span class="line">    fastcgi_split_path_info ^(.+\.php)(/?.+)$;</span><br><span class="line">    fastcgi_param PATH_INFO $fastcgi_path_info;</span><br><span class="line">    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line">    #fastcgi_pass remote_php_ip:<span class="number">9000</span>;</span><br><span class="line">    fastcgi_pass unix:/dev/shm/php-cgi.sock;</span><br><span class="line">    fastcgi_index index.php;</span><br><span class="line">    include fastcgi.conf;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  location ~ .*\.(gif|jpg|jpeg|png|bmp|swf|flv|mp4|ico)$ &#123;</span><br><span class="line">    expires <span class="number">30</span>d;</span><br><span class="line">    access_log off;</span><br><span class="line">  &#125;</span><br><span class="line">  location ~ .*\.(js|css)?$ &#123;</span><br><span class="line">    expires <span class="number">7</span>d;</span><br><span class="line">    access_log off;</span><br><span class="line">  &#125;</span><br><span class="line">  location ~ /\.ht &#123;</span><br><span class="line">    deny all;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>重启nginx，解决</li></ul></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service nginx restart</span><br></pre></td></tr></table></figure><blockquote><ul><li>如果上面操作之后还不行 <code>vim /usr/local/php/etc/php.ini</code></li></ul></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#yyp复制一行备份</span></span><br><span class="line">cgi.fix_pathinfo=<span class="number">1</span></span><br><span class="line">;cgi.fix_pathinfo=<span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      lnmp access denied解决方案
    
    </summary>
    
      <category term="Nginx" scheme="https://oceandlnu.github.io/categories/Nginx/"/>
    
    
      <category term="Linux" scheme="https://oceandlnu.github.io/tags/Linux/"/>
    
      <category term="Nginx" scheme="https://oceandlnu.github.io/tags/Nginx/"/>
    
      <category term="MySQL" scheme="https://oceandlnu.github.io/tags/MySQL/"/>
    
      <category term="PHP" scheme="https://oceandlnu.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu la(n)mp 环境搭建</title>
    <link href="https://oceandlnu.github.io/2018/05/03/Ubuntu%20la(n)mp%20%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://oceandlnu.github.io/2018/05/03/Ubuntu la(n)mp 环境搭建/</id>
    <published>2018-05-03T13:26:56.000Z</published>
    <updated>2018-07-26T05:11:26.900Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装apache2"><a href="#安装apache2" class="headerlink" title="安装apache2"></a>安装apache2</h3><pre><code>sudo apt install apache2</code></pre><p>安装完成之后使用service apache2 status查看apahce2的状态，使用service apache2 restart重启apache2。</p><h3 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h3><pre><code>sudo apt install nginx</code></pre><p>安装好之后，使用 dpkg -S nginx 命令来搜索 nginx相关文件，可以从命令显示结果看出 Nginx默认的安装位置是/etc/nginx目录，其配置文件nginx.conf也是在该目录下，并且在 etc/init.d 下有 nginx的启动程序，该目录下的程序都会在系统开启时启动。</p><p>启动 Nginx服务，使用下面两个命令任意一个即可：</p><pre><code>sudo /etc/init.d/nginx start sudo service nginx start</code></pre><p>使用 netstat -anp 则可以看到80端口已经处于 LISTEN状态了。 </p><p>直接查看80端口可以使用命令：sudo lsof -i :80</p><p>在浏览器输入 127.0.0.1后，就可以看见 Nginx的欢迎页面了。</p><h3 id="安装php7-0"><a href="#安装php7-0" class="headerlink" title="安装php7.0"></a>安装php7.0</h3><pre><code>sudo apt install php7.0</code></pre><p>安装完成之后可以通过php -v测试环境是否配置正确，或者通过 sudo vim /var/www/html/testphp.php 命令创建testphp.php文件,浏览器输入 <a href="http://localhost/testphp.php" target="_blank" rel="noopener">http://localhost/testphp.php</a> 进行访问，如果访问正常，则表示php安装成功。</p><h3 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h3><pre><code>sudo apt install mysql-server</code></pre><p>安装过程中记住自己设置的密码。使用mysql -u root -p命令，然后输入自己的密码进行数据库登录。</p><h3 id="整合LA-N-MP"><a href="#整合LA-N-MP" class="headerlink" title="整合LA(N)MP"></a>整合LA(N)MP</h3><h4 id="整合php和mysql"><a href="#整合php和mysql" class="headerlink" title="整合php和mysql"></a>整合php和mysql</h4><pre><code>sudo apt install php7.0-mysql</code></pre><h4 id="整合php和Apache"><a href="#整合php和Apache" class="headerlink" title="整合php和Apache"></a>整合php和Apache</h4><pre><code>sudo apt install libapache2-mod-php7.0sudo service apache2 restart</code></pre><h4 id="Nginx-与-PHP-FPM集成"><a href="#Nginx-与-PHP-FPM集成" class="headerlink" title="Nginx 与 PHP-FPM集成"></a>Nginx 与 PHP-FPM集成</h4><p><strong>注意：</strong></p><p>在nginx配置文件中修改网站根目录路径</p><p>确保nginx 中fastcgi_pass与PHP-fpm监听同一个sock</p><p>备份/etc/nginx/sites-available/default文件 </p><pre><code>sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/default.back</code></pre><p>PHP-FPM 与 Nginx 通信方式有两种，一种是TCP方式，一种是unix socket 方式。</p><p>Unix domain socket </p><p>可以使同一台操作系统上的两个或多个进程进行数据通信。Unix domain sockets 的接口和 Internet socket 很像，但它不使用网络底层协议来通信。</p><p>服务器压力不大的情况下，tcp 和 socket 差别不大，但在压力比较满的时候，用套接字方式，效果确实比较好。</p><p>socket方式：</p><p>在 /etc/nginx/sites-available/default 配置文件中（网站根目录也在是这里更改）， Nginx已经为与 PHP-FPM的整合准备好了，只需要将下面这部分改好就可以了。</p><pre><code>sudo vim /etc/nginx/sites-available/default</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># Add index.php to the list if you are using PHP</span><br><span class="line">index index.html index.htm index.nginx-debian.html;</span><br><span class="line"></span><br><span class="line"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">#</span><br><span class="line">#location ~ \.php$ &#123;</span><br><span class="line">#   include snippets/fastcgi-php.conf;</span><br><span class="line">#</span><br><span class="line">## With php7.0-cgi alone:</span><br><span class="line">#fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">## With php7.0-fpm:</span><br><span class="line">#   fastcgi_pass unix:/run/php/php7.0-fpm.sock;</span><br><span class="line">#&#125;</span><br></pre></td></tr></table></figure><p>修改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># Add index.php to the list if you are using PHP(在下面条目中添加index.php)</span><br><span class="line">index index.html index.htm index.nginx-debian.html index.php;</span><br><span class="line"></span><br><span class="line"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">#将下面4行前面的#号去掉，启动支持php模块</span><br><span class="line">#</span><br><span class="line">location ~ \.php$ &#123;</span><br><span class="line">    include snippets/fastcgi-php.conf;</span><br><span class="line">#</span><br><span class="line">#   # With php7.0-cgi alone:</span><br><span class="line">#   fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">#   # With php7.0-fpm:</span><br><span class="line">    fastcgi_pass unix:/run/php/php7.0-fpm.sock;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后再修改 PHP-FPM的配置文件 /etc/php/7.0/fpm/pool.d/<a href="http://www.conf" target="_blank" rel="noopener">www.conf</a><br>     ，(大概36行)如下:</p><pre><code>sudo vim /etc/php/7.0/fpm/pool.d/www.conf;  与 Nginx监听同一个 socklisten = /run/php/php7.0-fpm.sock</code></pre><p>sock文件路径为 /run/php/php7.0-fpm.sock 。</p><p>配置好后重启服务：</p><pre><code>sudo service nginx restartsudo service php7.0-fpm restart</code></pre><h4 id="验证环境"><a href="#验证环境" class="headerlink" title="验证环境"></a>验证环境</h4><p>Apache(Nginx)默认的网站根目录位于 /var/www/html/ ,进入这个目录，并创建 info.php</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">phpinfo();</span><br></pre></td></tr></table></figure><p>在浏览器中输入 <a href="http://localhost/info.php" target="_blank" rel="noopener">http://localhost/info.php</a> 。</p><h4 id="排错"><a href="#排错" class="headerlink" title="排错"></a>排错</h4><p>如果 <a href="http://localhost/info.php" target="_blank" rel="noopener">http://localhost/info.php</a> 页面空白，请尝试 Ctrl+F5 强制刷新页面。<br>如果依然空白，说明php和apache之间还需要一些配置<br>编辑 /etc/apache2/apache2.conf<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;FilesMatch \.php$&gt;</span><br><span class="line">SetHandler application/x-httpd-php</span><br><span class="line">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure></p><p>重启Apache</p><pre><code>sudo service apache2 restart</code></pre><p>刷新 <a href="http://localhost/info.php" target="_blank" rel="noopener">http://localhost/info.php</a> 。此时应该可以看见phpinfo中的内容了。</p><h3 id="安装phpmyadmin"><a href="#安装phpmyadmin" class="headerlink" title="安装phpmyadmin"></a>安装phpmyadmin</h3><p>参考资料：<a href="https://www.digitalocean.com/community/tutorials/how-to-install-and-secure-phpmyadmin-on-ubuntu-16-04" target="_blank" rel="noopener">https://www.digitalocean.com/community/tutorials/how-to-install-and-secure-phpmyadmin-on-ubuntu-16-04</a></p><p>sudo apt-get install phpmyadmin php-mbstring php-gettext，安装的过程中选择apache2。</p><p>安装完成之后使用如下两个命令修改支持模块:<br>sudo phpenmod mcrypt<br>sudo phpenmod mbstring<br>修改完成之后sudo systemctl restart apache2重启apache2服务器。在浏览器输入<a href="http://localhost/phpmyadmin/，进入熟悉的页面。一切OK。" target="_blank" rel="noopener">http://localhost/phpmyadmin/，进入熟悉的页面。一切OK。</a></p><h3 id="phpstorm安装"><a href="#phpstorm安装" class="headerlink" title="phpstorm安装"></a>phpstorm安装</h3><p>官方下载地址：<a href="https://www.jetbrains.com/phpstorm/download/#section=linux-version" target="_blank" rel="noopener">https://www.jetbrains.com/phpstorm/download/#section=linux-version</a></p><p>安装包下载完成之后，提取到你想要安装的位置，然后进入bin目录，输入./phpstorm.sh打开应用。</p>]]></content>
    
    <summary type="html">
    
      Ubuntu la(n)mp 环境搭建
    
    </summary>
    
      <category term="linux" scheme="https://oceandlnu.github.io/categories/linux/"/>
    
    
      <category term="Linux" scheme="https://oceandlnu.github.io/tags/Linux/"/>
    
      <category term="Apache" scheme="https://oceandlnu.github.io/tags/Apache/"/>
    
      <category term="Nginx" scheme="https://oceandlnu.github.io/tags/Nginx/"/>
    
      <category term="PHP" scheme="https://oceandlnu.github.io/tags/PHP/"/>
    
      <category term="Mysql" scheme="https://oceandlnu.github.io/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>PHPStorm 修改自动保存为Ctrl+S</title>
    <link href="https://oceandlnu.github.io/2018/04/15/PHPStorm%20%E4%BF%AE%E6%94%B9%E8%87%AA%E5%8A%A8%E4%BF%9D%E5%AD%98%E4%B8%BACtrl+S/"/>
    <id>https://oceandlnu.github.io/2018/04/15/PHPStorm 修改自动保存为Ctrl+S/</id>
    <published>2018-04-15T09:56:08.000Z</published>
    <updated>2018-07-26T05:11:26.900Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ul><li>进入设置 File -&gt; Settings</li></ul></blockquote><h4 id="使用换行，字体设置"><a href="#使用换行，字体设置" class="headerlink" title="使用换行，字体设置"></a>使用换行，字体设置</h4><blockquote><ul><li>找到 Editor -&gt; General 勾选<code>Use soft wraps in editor</code></li></ul></blockquote><blockquote><ul><li>找到 Editor -&gt; Font 字体设置<code>Liberation Mono</code>，字体大小<code>16</code></li></ul></blockquote><h4 id="取消自动保存"><a href="#取消自动保存" class="headerlink" title="取消自动保存"></a>取消自动保存</h4><blockquote><ul><li>找到 Appearance &amp; Behavior -&gt; System Settings，取消选中下面两项</li></ul></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/8858971-926b1ee8ebe86775.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="DeepinScrot-0200.png"></p><h4 id="开启未保存文件-号标记"><a href="#开启未保存文件-号标记" class="headerlink" title="开启未保存文件*号标记"></a>开启未保存文件*号标记</h4><blockquote><ul><li>找到 Editor -&gt; General -&gt; Editor Tabs 勾选下面选项</li></ul></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/8858971-1f40123eeb3e89d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="DeepinScrot-0611.png"></p><h4 id="自动识别模板引擎文件"><a href="#自动识别模板引擎文件" class="headerlink" title="自动识别模板引擎文件"></a>自动识别模板引擎文件</h4><blockquote><ul><li>找到 Editor -&gt; File Types 在<code>Smarty</code>下添加<code>*.dwt</code></li></ul></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/8858971-2d001a746fac40a4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="v2-36bdc1a9b39dfbcb31aab9d2f858bb5d_r.jpg"></p>]]></content>
    
    <summary type="html">
    
      PHPStorm 修改自动保存为Ctrl+S
    
    </summary>
    
      <category term="PHPStorm" scheme="https://oceandlnu.github.io/categories/PHPStorm/"/>
    
    
      <category term="Linux" scheme="https://oceandlnu.github.io/tags/Linux/"/>
    
      <category term="PHPStorm" scheme="https://oceandlnu.github.io/tags/PHPStorm/"/>
    
  </entry>
  
  <entry>
    <title>VirtualBox CentOS7 Mini 安装增强工具</title>
    <link href="https://oceandlnu.github.io/2018/04/12/VirtualBox%20CentOS7%20Mini%20%E5%AE%89%E8%A3%85%E5%A2%9E%E5%BC%BA%E5%B7%A5%E5%85%B7/"/>
    <id>https://oceandlnu.github.io/2018/04/12/VirtualBox CentOS7 Mini 安装增强工具/</id>
    <published>2018-04-12T09:56:08.000Z</published>
    <updated>2018-07-26T05:11:26.900Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装增强工具"><a href="#安装增强工具" class="headerlink" title="安装增强工具"></a>安装增强工具</h3><blockquote><ul><li>安装相关依赖</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># yum install vim gcc kernel kernel-devel bzip2 -y</span><br><span class="line"># reboot</span><br></pre></td></tr></table></figure><blockquote><ul><li>点击虚拟机菜单栏 =&gt; 设备 =&gt; 安装增强功能</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># mount /dev/cdrom /mnt</span><br><span class="line"># cd /mnt</span><br><span class="line"># ./VBoxLinuxAdditions.run</span><br></pre></td></tr></table></figure><blockquote><ul><li>打开 VirtualBox 界面，选择对应的虚拟系统进行”设置”，选中设置窗口中的最后一项”共享文件夹”，再选中”固定分配”，右键单击并确定共享文件夹的路径，下面的复选框一个都不用勾选，最后”确定”。启动虚拟系统，进入系统以后，执行以下命令来挂载共享文件夹：mount -t vboxsf share /share，其中 share 为共享文件夹的名字，/share 表示当前挂载到 share 目录下，如果没有share目录请自行创建 mkdir /share。如果需要取消挂载，可以直接使用命令：umount -f /share。</li></ul></blockquote><blockquote><ul><li>实现开机自动挂载</li></ul></blockquote><p>1.适用于CentOS7/6</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># vim ~/.bashrc</span><br><span class="line">// 在最后添加一行</span><br><span class="line"># mount -t vboxsf share /share</span><br></pre></td></tr></table></figure><p>2.只适用于CentOS6</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># vim /etc/rc.d/rc.local</span><br><span class="line">// 在文件的最后面加上挂载命令</span><br><span class="line"># mount -t vboxsf share /share</span><br></pre></td></tr></table></figure><h3 id="VirtualBox-Win7虚拟机无法识别U盘问题解决方法"><a href="#VirtualBox-Win7虚拟机无法识别U盘问题解决方法" class="headerlink" title="VirtualBox Win7虚拟机无法识别U盘问题解决方法"></a>VirtualBox Win7虚拟机无法识别U盘问题解决方法</h3><p>1.首先需要一个USB用户组，可以用vboxusers这个在安装VirtualBox的时候产生的用户组，把你使用的这个用户加到vboxusers组中，确保该用户是否有权限去读写usbfs这个文件系统</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cat /etc/group | grep vboxusers</span><br><span class="line">vboxusers:x:127:</span><br><span class="line">$ whoami</span><br><span class="line">ocean</span><br></pre></td></tr></table></figure><p>2.把ocean用户加到vboxusers组中，后面的ocean就是你自己的用户名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo adduser ocean vboxusers</span><br></pre></td></tr></table></figure><p>3.重启电脑，启动Virtualbox，确认在virtualbox管理器中，USB设备的enable usb controler 、enable usb2.0 controler打勾。Win7启动后，右击右下角USB设备符号，在Setting中，选择USB Massage相关的选项，就会自动安装驱动，驱动安装成功后，win7下成功挂载U盘。</p><p><strong>注意：U盘插入宿主机usb接口必须是usb2.0，如果为3.0虚拟机无法识别</strong></p>]]></content>
    
    <summary type="html">
    
      VirtualBox CentOS7 Mini 安装增强工具
    
    </summary>
    
      <category term="VirtualBox" scheme="https://oceandlnu.github.io/categories/VirtualBox/"/>
    
    
      <category term="Linux" scheme="https://oceandlnu.github.io/tags/Linux/"/>
    
      <category term="VirtualBox" scheme="https://oceandlnu.github.io/tags/VirtualBox/"/>
    
  </entry>
  
  <entry>
    <title>PHP解析post请求发送的json数据</title>
    <link href="https://oceandlnu.github.io/2018/04/12/PHP%E8%A7%A3%E6%9E%90post%E8%AF%B7%E6%B1%82%E5%8F%91%E9%80%81%E7%9A%84json%E6%95%B0%E6%8D%AE/"/>
    <id>https://oceandlnu.github.io/2018/04/12/PHP解析post请求发送的json数据/</id>
    <published>2018-04-12T09:56:08.000Z</published>
    <updated>2018-07-26T05:11:26.900Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ul><li>前端请求json数据</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  cat_id:<span class="number">6</span>,</span><br><span class="line">  <span class="string">"live_cat"</span>:<span class="string">"is_hot"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>后台解析json数据转换为数组</li></ul></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">receive_json_to_array</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $json = file_get_contents(<span class="string">'php://input'</span>);</span><br><span class="line">    <span class="comment">//加true转换为数组，不加转换为对象</span></span><br><span class="line">    $arr =  json_decode($json, <span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">return</span> $arr;</span><br><span class="line">&#125;</span><br><span class="line">$arr = receive_json_to_array();</span><br><span class="line"><span class="keyword">echo</span> $arr[<span class="string">'cat_id'</span>];  <span class="comment">//输出 6</span></span><br><span class="line"><span class="keyword">echo</span> $arr[<span class="string">'live_cat'</span>];  <span class="comment">//输出 is_hot</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      PHP解析post请求发送的json数据
    
    </summary>
    
      <category term="PHP" scheme="https://oceandlnu.github.io/categories/PHP/"/>
    
    
      <category term="Linux" scheme="https://oceandlnu.github.io/tags/Linux/"/>
    
      <category term="PHP" scheme="https://oceandlnu.github.io/tags/PHP/"/>
    
      <category term="json" scheme="https://oceandlnu.github.io/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>MySQL Access denied for user &#39;root&#39;@&#39;localhost&#39; 解决方法</title>
    <link href="https://oceandlnu.github.io/2018/04/10/MySQL%20Access%20denied%20for%20user%20&#39;root&#39;@&#39;localhost&#39;%20%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>https://oceandlnu.github.io/2018/04/10/MySQL Access denied for user &#39;root&#39;@&#39;localhost&#39; 解决方法/</id>
    <published>2018-04-10T09:56:08.000Z</published>
    <updated>2018-07-26T05:11:26.900Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ul><li>执行 mysql -uroot -ppassword 出现如下错误</li></ul></blockquote><pre><code>ERROR 1045 (28000): Access denied for user &apos;root&apos;@&apos;localhost&apos;</code></pre><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><blockquote><ul><li>停止mysql</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># service mysql stop</span><br><span class="line">//or</span><br><span class="line"># /usr/local/mysql/support-files/mysql.server stop</span><br></pre></td></tr></table></figure><blockquote><ul><li>安全模式启动</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//找到mysqld_safe所在位置</span><br><span class="line"># find /usr/local/mysql -name &quot;mysqld_safe&quot;</span><br><span class="line"># mysqld_safe --skip-grant-tables --skip-networking &amp;</span><br></pre></td></tr></table></figure><blockquote><ul><li>安全模式进入mysql</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># mysql -u root</span><br><span class="line">//password替换为你要修改的密码</span><br><span class="line">mysql&gt; UPDATE mysql.user SET PASSWORD=PASSWORD(&apos;password&apos;) WHERE USER=&apos;root&apos;;</span><br></pre></td></tr></table></figure><blockquote><ul><li>启动mysql，问题解决</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># service mysql start</span><br><span class="line">//or</span><br><span class="line"># /usr/local/mysql/support-files/mysql.server start</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      MySQL Access denied for user &#39;root&#39;@&#39;localhost&#39; 解决方法
    
    </summary>
    
      <category term="MySQL" scheme="https://oceandlnu.github.io/categories/MySQL/"/>
    
    
      <category term="Linux" scheme="https://oceandlnu.github.io/tags/Linux/"/>
    
      <category term="MySQL" scheme="https://oceandlnu.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Apache/Nginx重写URL配置</title>
    <link href="https://oceandlnu.github.io/2018/04/10/Apache&amp;Nginx%E9%87%8D%E5%86%99URL%E9%85%8D%E7%BD%AE/"/>
    <id>https://oceandlnu.github.io/2018/04/10/Apache&amp;Nginx重写URL配置/</id>
    <published>2018-04-10T09:56:08.000Z</published>
    <updated>2018-07-26T10:07:34.281Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ul><li>作者系统是Ubuntu，CentOS及其他linux发行版请自行变更<br> PHP框架是ThinkPHP5.0，官方文档说的有些模糊，所以自行补充了一下<br> 有错误欢迎随时指出</li></ul></blockquote><p>可以通过URL重写隐藏应用的入口文件index.php,下面是相关服务器的配置参考：</p><h3 id="Apache"><a href="#Apache" class="headerlink" title="[Apache]"></a>[Apache]</h3><p>1.启用 <code>rewrite</code> 模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo a2enmod rewrite</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">sudo ln -s /etc/apache2/mods-available/rewrite.load /etc/apache2/mods-enabled/rewrite.load</span><br></pre></td></tr></table></figure><p>2.编辑配置文件 <code>/etc/apache2/apache2.conf</code>，找到自己web根目录对应的位置</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Directory /<span class="keyword">var</span>/www/&gt;</span><br><span class="line">Options Indexes FollowSymLinks</span><br><span class="line">AllowOverride None</span><br><span class="line"><span class="keyword">Require</span> all granted</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure><p>3.将 <code>AllowOverride None</code> 改为 <code>AllowOverride All</code></p><p>4.重启服务 <code>sudo service apache2 restart</code></p><p>5.把下面的内容保存为 <code>.htaccess</code> 文件放到应用入口文件的同级目录下(默认已创建，如果没有自己创建)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;IfModule mod_rewrite.c&gt;</span><br><span class="line">Options +FollowSymlinks -Multiviews</span><br><span class="line">RewriteEngine on</span><br><span class="line"></span><br><span class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; !-d</span><br><span class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; !-f</span><br><span class="line">RewriteRule ^(.*)$ index.php?/$<span class="number">1</span> [QSA,PT,L]</span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="[Nginx]"></a>[Nginx]</h3><p>在Nginx低版本中，是不支持PATHINFO的，但是可以通过在Nginx中配置转发规则实现，</p><p>编辑文件 <code>/etc/nginx/sites-available/default</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server &#123; <span class="comment">// …..省略部分代码</span></span><br><span class="line">  root /<span class="keyword">var</span>/www/html;</span><br><span class="line">  <span class="comment">//找到这个模块，然后填入下面的配置</span></span><br><span class="line">&#125;</span><br><span class="line"> location / &#123; <span class="comment">// …..省略部分代码</span></span><br><span class="line">  <span class="keyword">if</span> (!-e $request_filename) &#123;</span><br><span class="line">  rewrite  ^(.*)$  /index.php?s=/$<span class="number">1</span>  last;</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实内部是转发到了ThinkPHP提供的兼容URL，利用这种方式，可以解决其他不支持PATHINFO的WEB服务器环境。</p><p>如果你的应用安装在二级目录，Nginx的伪静态方法设置如下，其中 <code>/tp5/public/</code> 是所在的目录名称。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">location /tp5/<span class="keyword">public</span>/ &#123;</span><br><span class="line">    <span class="keyword">if</span> (!-e $request_filename)&#123;</span><br><span class="line">        rewrite  ^/tp5/<span class="keyword">public</span>/(.*)$  /tp5/<span class="keyword">public</span>/index.php?s=/$<span class="number">1</span>  last;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>原来的访问URL： <code>http://serverName/index.php/模块/控制器/操作/[参数名/参数值...]</code></p><p>设置后，我们可以采用下面的方式访问： <code>http://serverName/模块/控制器/操作/[参数名/参数值...]</code></p><p>如果你没有修改服务器的权限，可以在 <code>index.php</code> 入口文件做修改，这不是正确的做法，并且不一定成功，视服务器而定，只是在框架执行前补全 <code>PATH_INFO</code> 参数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$_SERVER[<span class="string">'PATH_INFO'</span>] = $_SERVER[<span class="string">'REQUEST_URI'</span> ];</span><br></pre></td></tr></table></figure><p>最后重启服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service nginx restart</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Apache/Nginx重写URL配置
    
    </summary>
    
      <category term="Nginx" scheme="https://oceandlnu.github.io/categories/Nginx/"/>
    
      <category term="Apache" scheme="https://oceandlnu.github.io/categories/Nginx/Apache/"/>
    
    
      <category term="Linux" scheme="https://oceandlnu.github.io/tags/Linux/"/>
    
      <category term="Apache" scheme="https://oceandlnu.github.io/tags/Apache/"/>
    
      <category term="Nginx" scheme="https://oceandlnu.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Linux Composer安装，配置国内镜像</title>
    <link href="https://oceandlnu.github.io/2018/03/07/Linux%20Composer%E5%AE%89%E8%A3%85%EF%BC%8C%E9%85%8D%E7%BD%AE%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F/"/>
    <id>https://oceandlnu.github.io/2018/03/07/Linux Composer安装，配置国内镜像/</id>
    <published>2018-03-07T09:56:08.000Z</published>
    <updated>2018-07-30T03:44:15.819Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ul><li>安装 Composer</li></ul></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://dl.laravel-china.org/composer.phar -O /usr/<span class="built_in">local</span>/bin/composer</span><br><span class="line">chmod a+x /usr/<span class="built_in">local</span>/bin/composer</span><br></pre></td></tr></table></figure><blockquote><ul><li>Composer 镜像加速</li></ul></blockquote><blockquote><ul><li>一、全局配置</li></ul></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer config -g repo.packagist composer https://packagist.laravel-china.org</span><br></pre></td></tr></table></figure><blockquote><ul><li>二、局部配置(仅限当前工程使用镜像，去掉 -g 即可)</li></ul></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer config repo.packagist composer https://packagist.laravel-china.org</span><br></pre></td></tr></table></figure><blockquote><ul><li>全局配置信息(查看[repositories.packagist.org.url]表示当前镜像地址)</li></ul></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer config -gl</span><br></pre></td></tr></table></figure><blockquote><ul><li>取消镜像</li></ul></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer config -g --<span class="built_in">unset</span> repos.packagist</span><br></pre></td></tr></table></figure><blockquote><ul><li>查看当前版本</li></ul></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer -v</span><br></pre></td></tr></table></figure><blockquote><ul><li>升级 <code>composer</code> 版本</li></ul></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer selfupdate</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Linux Composer安装，配置国内镜像
    
    </summary>
    
      <category term="Composer" scheme="https://oceandlnu.github.io/categories/Composer/"/>
    
    
      <category term="Linux" scheme="https://oceandlnu.github.io/tags/Linux/"/>
    
      <category term="PHP" scheme="https://oceandlnu.github.io/tags/PHP/"/>
    
      <category term="Composer" scheme="https://oceandlnu.github.io/tags/Composer/"/>
    
  </entry>
  
  <entry>
    <title>PHPStorm常用插件</title>
    <link href="https://oceandlnu.github.io/2017/09/28/PHPStorm%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6/"/>
    <id>https://oceandlnu.github.io/2017/09/28/PHPStorm常用插件/</id>
    <published>2017-09-28T13:26:56.000Z</published>
    <updated>2018-07-26T05:11:26.900Z</updated>
    
    <content type="html"><![CDATA[<h3 id="phpstorm插件安装"><a href="#phpstorm插件安装" class="headerlink" title="phpstorm插件安装"></a>phpstorm插件安装</h3><p>打开phpstorm，选择File-&gt;Settings-&gt;Plugins，在搜索框输入想安装的插件名称(演示：abcd)，如果本地没有，会出现search in repositories</p><p><img src="/uploads/2017-09-28/1.png" alt=""></p><p>点击之后选择install安装，然后关闭页面</p><p><img src="/uploads/2017-09-28/2.png" alt=""></p><p>返回勾选刚刚安装的插件即可（默认安装后会自动勾选）</p><p><img src="/uploads/2017-09-28/3.png" alt=""></p><h3 id="phpstorm的常用插件"><a href="#phpstorm的常用插件" class="headerlink" title="phpstorm的常用插件"></a>phpstorm的常用插件</h3><h4 id="tool"><a href="#tool" class="headerlink" title="tool"></a>tool</h4><pre><code>Translation</code></pre><p>Translation是一个翻译插件，支持中英互译、单词朗读 <a href="https://github.com/YiiGuxing/TranslationPlugin" target="_blank" rel="noopener">github</a></p><pre><code>A8Translate</code></pre><p>一款翻译插件<a href="https://github.com/ice1000/A8Translate" target="_blank" rel="noopener">github</a></p><pre><code>.ignore</code></pre><p>忽略文件支持(e.g .gitignore (GIT), .hgignore (Mercurial), .npmignore (NPM), .dockerignore (Docker) 等)<a href="https://github.com/hsz/idea-gitignore" target="_blank" rel="noopener">github</a></p><pre><code>BashSupport</code></pre><p>bash support</p><pre><code>EditorConfig</code></pre><p>项目的 .editorconfig 支持</p><pre><code>CodeGlance</code></pre><p>可以在右侧生成一个类似于 sublime 的文档小地图</p><pre><code>RegexpTester</code></pre><p>正则表达式测试工具</p><h4 id="editor"><a href="#editor" class="headerlink" title="editor"></a>editor</h4><pre><code>IdeaVim</code></pre><p>vim 快捷键支持</p><pre><code>AceJump</code></pre><p>代码快速跳转 <a href="https://github.com/johnlindquist/AceJump" target="_blank" rel="noopener">github</a></p><h4 id="database"><a href="#database" class="headerlink" title="database"></a>database</h4><pre><code>Database navigator</code></pre><p>数据库工具</p><h4 id="php"><a href="#php" class="headerlink" title="php"></a>php</h4><pre><code>PHP Advanced AutoComplete</code></pre><p>php的高级自动补全</p><pre><code>PHP Toolbox</code></pre><p>php工具增强 <a href="https://github.com/Haehnchen/idea-php-toolbox" target="_blank" rel="noopener">github</a></p><pre><code>PHP Annotations</code></pre><p>php 注释增强工具 <a href="https://github.com/Haehnchen/idea-php-annotation-plugin" target="_blank" rel="noopener">github</a></p><pre><code>Laravel Plugin</code></pre><p>laravel 框架支持</p><pre><code>PHP composer.json support</code></pre><p>composer.json 支持</p><pre><code>Php Inspections (EA Extended)</code></pre><p>这个项目是一个静态代码分析工具 <a href="https://github.com/kalessil/phpinspectionsea" target="_blank" rel="noopener">github</a></p><h4 id="golang"><a href="#golang" class="headerlink" title="golang"></a>golang</h4><pre><code>Go</code></pre><p>golang语言支持</p><pre><code>Go language support</code></pre><p>golang 语言支持</p><h4 id="frontend"><a href="#frontend" class="headerlink" title="frontend"></a>frontend</h4><pre><code>JS Toolbox</code></pre><p>js 支持</p><pre><code>NodeJs</code></pre><p>NodeJs 支持</p><pre><code>vue-for-idea</code></pre><p>Support for Vue.</p><pre><code>Vue.js</code></pre><p>Support for Vue.js</p><h4 id="other"><a href="#other" class="headerlink" title="other"></a>other</h4><pre><code>Protobuf support</code></pre><p>Protobuf Support Plugin <a href="https://github.com/protostuff/protobuf-jetbrains-plugin" target="_blank" rel="noopener">github</a></p>]]></content>
    
    <summary type="html">
    
      PHPStorm常用插件
    
    </summary>
    
      <category term="PHPStorm" scheme="https://oceandlnu.github.io/categories/PHPStorm/"/>
    
    
      <category term="PHPStorm" scheme="https://oceandlnu.github.io/tags/PHPStorm/"/>
    
  </entry>
  
  <entry>
    <title>Linux 安装 nvm</title>
    <link href="https://oceandlnu.github.io/2017/09/16/Linux%20%E5%AE%89%E8%A3%85%20nvm/"/>
    <id>https://oceandlnu.github.io/2017/09/16/Linux 安装 nvm/</id>
    <published>2017-09-16T13:26:56.000Z</published>
    <updated>2018-07-31T03:00:22.294Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>nvm是专门的node版本管理工具，可以在同一台机器上管理不同node版本。</p></blockquote><p>github地址: <a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">https://github.com/creationix/nvm</a></p><h4 id="卸载已安装到全局的-node-npm"><a href="#卸载已安装到全局的-node-npm" class="headerlink" title="卸载已安装到全局的 node/npm"></a>卸载已安装到全局的 node/npm</h4><p>如果之前是在官网下载的 node 安装包，运行后会自动安装在全局目录，其中</p><p>node 命令在 /usr/local/bin/node ，npm 命令在全局 node_modules 目录中，具体路径为 /usr/local/lib/node_modules/npm</p><p>安装 nvm 之后最好先删除下已安装的 node 和全局 node 模块：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看已经安装在全局的模块，以便删除这些全局模块后再按照不同的 node 版本重新进行全局安装</span></span><br><span class="line">npm ls -g --depth=0</span><br><span class="line"><span class="comment">#删除全局 node_modules 目录</span></span><br><span class="line">sudo rm -rf /usr/<span class="built_in">local</span>/lib/node_modules</span><br><span class="line"><span class="comment">#删除 node</span></span><br><span class="line">sudo rm /usr/<span class="built_in">local</span>/bin/node</span><br><span class="line"><span class="comment">#删除全局 node 模块注册的软链</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/bin &amp;&amp; ls -l | grep <span class="string">"../lib/node_modules/"</span> | awk <span class="string">'&#123;print $9&#125;'</span>| xargs rm</span><br></pre></td></tr></table></figure><h4 id="安装-nvm-安装完成后需要重启终端"><a href="#安装-nvm-安装完成后需要重启终端" class="headerlink" title="安装 nvm(安装完成后需要重启终端)"></a>安装 nvm(安装完成后需要重启终端)</h4><p>Github：<a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">https://github.com/creationix/nvm</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | zsh</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | zsh</span><br><span class="line"><span class="comment"># 更换 nvm 淘宝源</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"export NVM_NODEJS_ORG_MIRROR=https://npm.taobao.org/mirrors/node"</span> &gt;&gt; ~/.zshrc</span><br></pre></td></tr></table></figure><ul><li>安装 node</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 最新 lts 版本</span></span><br><span class="line">nvm install --lts</span><br><span class="line"><span class="comment"># 更换 npm 淘宝源</span></span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br><span class="line"><span class="comment"># 查看当前源</span></span><br><span class="line">npm config get registry</span><br><span class="line"><span class="comment"># 补充(yarn安装，查看源，更换源)</span></span><br><span class="line">npm install -g yarn</span><br><span class="line">yarn config get registry</span><br><span class="line">yarn config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h4 id="安装切换各版本-node-npm"><a href="#安装切换各版本-node-npm" class="headerlink" title="安装切换各版本 node/npm"></a>安装切换各版本 node/npm</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 最新 LTS 版本</span></span><br><span class="line">nvm install --lts</span><br><span class="line"><span class="comment">#安装 8.11.3 版本</span></span><br><span class="line">nvm install 8.11.3</span><br><span class="line"><span class="comment">#安装 4.2.2 版本</span></span><br><span class="line">nvm install 4.2.2</span><br><span class="line"><span class="comment"># 特别说明：以下模块安装仅供演示说明，并非必须安装模块</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#切换至 8.11.3 版本</span></span><br><span class="line">nvm use 8</span><br><span class="line"><span class="comment">#安装 mz-fis 模块至全局目录，安装完成的路径是 /Users/&lt;你的用户名&gt;/.nvm/versions/node/v8.11.3/lib/mz-fis</span></span><br><span class="line">npm install -g mz-fis</span><br><span class="line"><span class="comment">#切换至 4.2.2 版本</span></span><br><span class="line">nvm use 4</span><br><span class="line"><span class="comment">#安装 react-native-cli 模块至全局目录，安装完成的路径是 /Users/&lt;你的用户名&gt;/.nvm/versions/node/v4.2.2/lib/react-native-cli</span></span><br><span class="line">npm install -g react-native-cli</span><br><span class="line"><span class="comment">#设置默认 node 版本为 8.11.3</span></span><br><span class="line">nvm <span class="built_in">alias</span> default 8.11.3</span><br></pre></td></tr></table></figure><p>使用 <code>nvm --help</code> 查看是否安装成功。</p><p>使用 <code>nvm ls</code> 查看已经安装的版本。</p><p>使用 <code>nvm ls-remote</code> 查看所有远端版本。</p><p>使用 <code>nvm install</code> 安装某个版本，如 <code>nvm install v8.11.3</code> 。</p><p>使用 <code>nvm use</code> 切换到某个版本，如 <code>nvm use v8.11.3</code> 使用 <code>8.11.3</code> ， <code>nvm use system</code> 使用系统版本。</p><h4 id="使用-nvmrc-文件配置项目所使用的-node-版本"><a href="#使用-nvmrc-文件配置项目所使用的-node-版本" class="headerlink" title="使用 .nvmrc 文件配置项目所使用的 node 版本"></a>使用 .nvmrc 文件配置项目所使用的 node 版本</h4><p>如果你的默认 node 版本（通过 nvm alias 命令设置的）与项目所需的版本不同，则可在项目根目录或其任意父级目录中创建 .nvmrc 文件，在文件中指定使用的 node 版本号，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd &lt;项目根目录&gt;  #进入项目根目录</span><br><span class="line">echo 4 &gt; .nvmrc #添加 .nvmrc 文件</span><br><span class="line">nvm use #无需指定版本号，会自动使用 .nvmrc 文件中配置的版本</span><br><span class="line">node -v #查看 node 是否切换为对应版本</span><br></pre></td></tr></table></figure><h4 id="Ps"><a href="#Ps" class="headerlink" title="Ps:"></a>Ps:</h4><p>类似的工具也有n命令，n 命令是作为一个 node 的模块而存在，而 nvm 是一个独立于 node/npm 的外部 shell 脚本， 因此 n 命令相比 nvm 更加局限。由于 npm 安装的模块路径均为 /usr/local/lib/node_modules ， 当使用 n 切换不同的 node 版本时，实际上会共用全局的 node/npm 目录。所以还是推荐使用nvm。</p><p>github地址：<a href="https://github.com/tj/n" target="_blank" rel="noopener">https://github.com/tj/n</a></p>]]></content>
    
    <summary type="html">
    
      Linux 安装 nvm
    
    </summary>
    
      <category term="linux" scheme="https://oceandlnu.github.io/categories/linux/"/>
    
    
      <category term="Linux" scheme="https://oceandlnu.github.io/tags/Linux/"/>
    
      <category term="nvm" scheme="https://oceandlnu.github.io/tags/nvm/"/>
    
  </entry>
  
  <entry>
    <title>UEFI启动模式下安装Ubuntu教程</title>
    <link href="https://oceandlnu.github.io/2017/09/11/UEFI%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F%E4%B8%8B%E5%AE%89%E8%A3%85Ubuntu%E6%95%99%E7%A8%8B/"/>
    <id>https://oceandlnu.github.io/2017/09/11/UEFI启动模式下安装Ubuntu教程/</id>
    <published>2017-09-11T13:26:56.000Z</published>
    <updated>2018-07-26T05:11:26.900Z</updated>
    
    <content type="html"><![CDATA[<h3 id="制作Ubuntu启动盘"><a href="#制作Ubuntu启动盘" class="headerlink" title="制作Ubuntu启动盘"></a>制作Ubuntu启动盘</h3><p>个人习惯于使用U盘安装的方式，简单快捷。那么准备好一个空的U盘，首先去<a href="https://www.ubuntu.com/download/desktop" target="_blank" rel="noopener">Ubuntu官网</a>下载最新的Ubuntu 16.04的ISO映像文件，然后需要下载制作启动盘的工具，这里建议使用Ubuntu官方主推的工具<a href="https://rufus.akeo.ie/?locale=zh_CN" target="_blank" rel="noopener">Rufus</a>，详见网页：<a href="https://tutorials.ubuntu.com/tutorial/tutorial-create-a-usb-stick-on-windows" target="_blank" rel="noopener">How to create a bootable USB stick on Windows</a> ，使用该工具的时候，有三种模式可选，到底是用那种模式取决于电脑的配置，可以百度一下电脑主板是不是UEFI以及硬盘分区是MBR还是GPT，确实不清楚的就选第一项。当然，有同学也喜欢使用软碟通等刻盘工具，这也是没问题的，甚至有资料说直接解压到空的U盘也能行。总之很多方式都能做成系统启动盘。</p><p>为Ubuntu系统分配硬盘空间</p><p>接下来，我们需要为Ubuntu在硬盘上分配足够的空间，一般来说需要至少100GB的空间才用的舒服。右键点击windows键（windows+X）选择磁盘管理，然后选择你需要进行分区的磁盘，点击右键，选择“压缩卷”，设置需要压缩空间的大小，点击压缩，等一会，空间就压缩好了，会出现一个未分配空间，这就是我们刚才压缩出来的空间，到这里分配空间就ok了。</p><p>说明一下，Ubuntu系统总共需要四个磁盘空间：根目录、home目录、交换空间和启动引导空间。有种比较老的方法是在Windows系统中提前划分好这四个空间再安装，私以为这还不如直接在Ubuntu安装界面中划分来的方便，也能减少安装出错的可能。</p><h3 id="安装Ubuntu系统"><a href="#安装Ubuntu系统" class="headerlink" title="安装Ubuntu系统"></a>安装Ubuntu系统</h3><p>关闭Windows的快速启动，重启电脑。按住Win + X(请记住这个万能的组合)，选择“电源选项”，依次执行：选择电源按钮的功能 - 更改当前不可用的设置 - 启用快速启动（把勾去掉）-保存修改</p><p>把启动盘插入笔记本电脑，重启系统，进入BIOS，首先修改BIOS选项，需要确保boot mode为UEFI，以及关闭secure boot（很重要，如不设置，可能导致装完nvidia显卡驱动后无限重启）。</p><p>然后修改启动项。在明确支持UEFI启动的笔记本电脑中，BIOS启动项可以看到两个U盘，那其实是一个U盘的两种模式，这里需要选择带有“UEFI”字样的U盘作为第一启动项。</p><p>保存设置并退出BIOS，就可以进入安装界面了。一般来说，会出现直接安装和试用的选项。新手可以点击试用“Try Ubuntu”，体验下该系统，然后还能继续安装。</p><p>首先应该是选择语言，直接照着中文去就行了。在“准备安装”菜单，勾选下面的“为图形和无线硬件，以及 MP3 和媒体安装第三方软件”，上面的“安装Ubuntu时下载更新”不用勾选，这些东西以后可以通过系统更新来安装。然后进入“安装类型”菜单，这里选择“其他选项”。</p><p>接下来就是最重要的安装分区了，在界面中可以看到不少分区，我们用鼠标拖到最后，选择刚才分配的200GB空闲空间，鼠标双击或者点击“+”按钮，就从这里依次分出四个子空间。</p><p><img src="/uploads/2017-09-11/1.png" alt=""></p><h4 id="分配启动引导空间"><a href="#分配启动引导空间" class="headerlink" title="分配启动引导空间"></a>分配启动引导空间</h4><p>如果没有引导，就无法进入系统。我们选中那200GB空闲空间，鼠标双击，或者点击下面的加号，首先分配引导的空间，选中主分区（或逻辑分区）和空间起始位置。建议这部分最小也要给到500MB，系统引导文件都会在里面，我给的2048MB，它的作用和boot引导分区一样，但是boot引导是默认grub引导的，而efi显然是UEFI引导的。不要按照那些老教程去选boot引导分区，也就是最后你的挂载点里没有“/boot”这一项，否则你就没办法UEFI启动两个系统了。</p><p><strong>注意：选择“保留BIOS启动区域”或者“efi系统分区”都可以，这里分区类型选择的主分区，Linux不区分逻辑分区和主分区，选择逻辑分区也没有问题。</strong></p><p><img src="/uploads/2017-09-11/2.png" alt=""></p><p>有同学可能要问了，为什么选择这个“保留BIOS启动区域”，而不是挂载“/boot”？这里需要说明下，因为该笔记本是支持UEFI的，之前博主就是采用的传统方法，挂载“/boot”，这样做的结果是，无论如何无法进入刚安好的Ubuntu系统，就连EasyBCD也不起作用，找不到Ubuntu的引导启动项。后来看到了一篇文章，大意说是UEFI启动模式下，Ubuntu的引导挂载应该是biosgrub，否则出错。在博主亲自试验之后，证实了这个说法。</p><p>当然，如果笔记本不支持UEFI模式启动，使用的是CSM兼容模式的话，倒是可以用挂载“/boot”的方式，这也实验成功过。</p><h4 id="分配交换空间"><a href="#分配交换空间" class="headerlink" title="分配交换空间"></a>分配交换空间</h4><p>swap交换空间，选择逻辑分区和空间起始位置，所谓交换空间，也就是虚拟内存，可以小幅度提示系统的运行性能。由于本机的内存大小是8GB，所以可以分配相同大小的虚拟内存。（物理内存小于等于4G，虚拟内存建议分配物理内存的2倍大小）</p><p><img src="/uploads/2017-09-11/3.png" alt=""></p><h4 id="分配根目录空间"><a href="#分配根目录空间" class="headerlink" title="分配根目录空间"></a>分配根目录空间</h4><p>根目录“/”，类型为EXT4日志文件系统，选中逻辑分区和空间起始位置，根目录就是系统盘，主要存放操作系统文件和安装的第三方软件，无法扩展，所以不能太小，建议最低也要给到30GB，这里应人所求，分配了70GB的磁盘空间给根目录。</p><p><img src="/uploads/2017-09-11/4.png" alt=""></p><h4 id="分配-home目录空间"><a href="#分配-home目录空间" class="headerlink" title="分配/home目录空间"></a>分配/home目录空间</h4><p>挂载“/home”，类型为EXT4日志文件系统，选中逻辑分区和空间起始位置，/home目录就是用户能自行操作的空间，可大可小，当然安装到这里，剩下的磁盘空间（大约120GB）都要给/home目录了，如下图所示。</p><p><img src="/uploads/2017-09-11/5.png" alt=""></p><h4 id="选择引导器"><a href="#选择引导器" class="headerlink" title="选择引导器"></a>选择引导器</h4><p>分配好上述四个空间后，我们还要选择“安装启动引导器的设备”，由于刚才biosgrub的磁盘符号为/dev/sda4，所以就选择了该磁盘。</p><p><img src="/uploads/2017-09-11/6.png" alt=""></p><p>一切就绪之后，点击“现在安装”，然后会让你确认分区是否正确，无误后就可以继续安装了。</p><p><img src="/uploads/2017-09-11/7.png" alt=""></p><p>接着填写用户名和密码，这里建议尽可能简短，因为在以后的时间你会无数次输入它们。</p><p>最后选择“Shanghai”时区，系统开始自动安装了，你可以喝杯咖啡。</p><h4 id="调整BIOS启动顺序（可选）"><a href="#调整BIOS启动顺序（可选）" class="headerlink" title="调整BIOS启动顺序（可选）"></a>调整BIOS启动顺序（可选）</h4><p>安装完成后，重启电脑，还是需要进BIOS，设置Ubuntu为第一启动项，这样就可以使用GNU GRUB作为操作系统选择工具，就不用再安装easyBCD等第三方引导软件。我默认是进入Ubuntu，想要进入Windows 10需要用方向键选择后面的的选项，这个顺序也是可以改的。</p><p>—————–分割线——————</p><h4 id="非UEFI模式"><a href="#非UEFI模式" class="headerlink" title="非UEFI模式"></a>非UEFI模式</h4><p>部分华硕华硕和惠普笔记本在BIOS中找不到boot mode选项，也无法直接看到UEFI的相关字样。那么这种笔记本怎么安装Ubuntu呢？</p><p>简要说下，就是制作启动盘还是一样，然后BIOS中的设置会不同，我们需要设置launch csm（兼容模式）为开启，secure boot同样需要关闭。然后选择不带“UEFI”字样的U盘作为第一启动项。</p><p>安装Ubuntu的过程中，只存在引导部分不同，和上面相反，这里不选择“保留BIOS启动区域”，而是选择“逻辑分区”-&gt;“Ext4 日志文件系统”挂载“/boot”，然后启动引导器可以直接使用Ubuntu所在的整个硬盘（比如WestData机械硬盘，亲测通过），不用刻意选择/boot所在盘符。</p><p>如此这般，也能安装好Ubuntu操作系统，此时就找不到“Ubuntu”这个启动项，那我们可以设置WestData机械硬盘为第一启动项，就能使用GNU GRUB作为操作系统选择工具。也可以去安装EasyBCD，但此时需要设置Windows所在盘为第一启动项。</p>]]></content>
    
    <summary type="html">
    
      UEFI启动模式下安装Ubuntu教程
    
    </summary>
    
      <category term="linux" scheme="https://oceandlnu.github.io/categories/linux/"/>
    
    
      <category term="Linux" scheme="https://oceandlnu.github.io/tags/Linux/"/>
    
      <category term="Ubuntu" scheme="https://oceandlnu.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Win10关闭security boot的方法</title>
    <link href="https://oceandlnu.github.io/2017/09/10/Win10%E5%85%B3%E9%97%ADsecurity%20boot%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>https://oceandlnu.github.io/2017/09/10/Win10关闭security boot的方法/</id>
    <published>2017-09-10T05:47:23.000Z</published>
    <updated>2018-07-26T05:11:26.900Z</updated>
    
    <content type="html"><![CDATA[<p>如何关闭security boot？许多使用win10的用户在调配某些系统设置的时候需要关闭“security boot”。下面小编给大家分享下关闭BIOS中security boot 选项的方法，这里以联想Y480笔记本为例。</p><h3 id="步骤一：关闭快速启动"><a href="#步骤一：关闭快速启动" class="headerlink" title="步骤一：关闭快速启动"></a>步骤一：关闭快速启动</h3><p>1、在开始菜单中单击右键，选择“电源选项”；</p><p><img src="/uploads/2017-09-10/1.jpg" alt=""></p><p>2、点击【选择电源按钮的功能】；</p><p><img src="/uploads/2017-09-10/2.jpg" alt=""></p><p>3、点击【更改当前不可用的设置】，将下面“启用快速启动”前面的勾去掉，点击保存修改。</p><p><img src="/uploads/2017-09-10/3.jpg" alt=""></p><h3 id="步骤二：修改bios设置"><a href="#步骤二：修改bios设置" class="headerlink" title="步骤二：修改bios设置"></a>步骤二：修改bios设置</h3><p>1、重启计算机，不停按F2进入到bios中；</p><p><img src="/uploads/2017-09-10/4.jpg" alt=""></p><p>2、使用方向键选定【Security】选项卡，在下面我们可以找到【Secure Boot】；</p><p><img src="/uploads/2017-09-10/5.jpg" alt=""></p><p>3、选择“Secure Boot”项，按下回车键，选择“Disabled”按下回车键确认，按下“F10”，点击Y保存并重启计算机即可。</p><p><img src="/uploads/2017-09-10/6.jpg" alt=""></p><p>若其他型号的笔记本或电脑找不到该选项，请咨询对应品牌官方客服即可。</p>]]></content>
    
    <summary type="html">
    
      Win10关闭security boot的方法
    
    </summary>
    
      <category term="配置" scheme="https://oceandlnu.github.io/categories/%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="windows" scheme="https://oceandlnu.github.io/tags/windows/"/>
    
      <category term="配置" scheme="https://oceandlnu.github.io/tags/%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>CentOS安装python3.6和第三方库</title>
    <link href="https://oceandlnu.github.io/2017/09/07/CentOS%E5%AE%89%E8%A3%85Python3.6%E5%92%8C%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
    <id>https://oceandlnu.github.io/2017/09/07/CentOS安装Python3.6和第三方库/</id>
    <published>2017-09-07T09:56:08.000Z</published>
    <updated>2018-07-26T10:14:08.394Z</updated>
    
    <content type="html"><![CDATA[<p>如果本机安装了python2，尽量不要管他，使用python3运行python脚本就好，因为可能有程序依赖目前的python2环境，</p><p>比如yum！！！</p><p>不要动现有的python2环境！</p><p>一、安装python3.6</p><p>1.安装openssl静态库，若未装该静态库会导致python3自带的pip3安装失败</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y openssl-static</span><br></pre></td></tr></table></figure><p>编译python3源码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install -y gcc wget</span><br><span class="line">yum groupinstall <span class="string">"Development tools"</span></span><br><span class="line">yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel</span><br></pre></td></tr></table></figure></p><p>2.下载Python3 <a href="https://www.python.org/ftp/python" target="_blank" rel="noopener">https://www.python.org/ftp/python</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.python.org/ftp/python/3.6.3/Python-3.6.3.tgz</span><br></pre></td></tr></table></figure><p>3.安装python3<br>　　<br>我个人习惯安装在 <code>/usr/local/python3</code>（具体安装位置看个人喜好），创建目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /usr/<span class="built_in">local</span>/python3</span><br></pre></td></tr></table></figure><p>解压下载好的 <code>Python-3.x.x.tgz</code> 包(具体包名因你下载的Python具体版本不同而不同，如：我下载的是Python3.6.3.那我这就是Python-3.6.3.tgz)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf Python-3.6.3.tgz</span><br><span class="line">chmod -R 777 Python-3.6.3</span><br></pre></td></tr></table></figure></p><p>4.进入解压后的目录，编译安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> Python-3.6.3</span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/python3</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>5.建立python3的软链</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/<span class="built_in">local</span>/python3/bin/python3 /usr/bin/python3</span><br></pre></td></tr></table></figure><p>如果软链接已存在，先删除原链接，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf [filename]</span><br></pre></td></tr></table></figure><p>6.并将 <code>/usr/local/python3/bin</code> 加入 <code>PATH</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bash_profile</span><br><span class="line"><span class="comment"># 添加下面内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Get the aliases and functions</span></span><br><span class="line"><span class="keyword">if</span> [ -f ~/.bashrc ]; <span class="keyword">then</span></span><br><span class="line">        . ~/.bashrc</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># User specific environment and startup programs</span></span><br><span class="line"></span><br><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$HOME</span>/bin:/usr/<span class="built_in">local</span>/python3/bin</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> PATH</span><br></pre></td></tr></table></figure><p>修改完记得执行下面的命令，让上一步的修改生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br><span class="line"><span class="comment">#检查Python3及pip3是否正常可用：</span></span><br><span class="line">python3 -V</span><br><span class="line"><span class="comment">#Python 3.6.3</span></span><br><span class="line">pip3 -V</span><br><span class="line"><span class="comment">#pip 9.0.1 from /usr/local/python3/lib/python3.6/site-packages (python 3.6)</span></span><br></pre></td></tr></table></figure><p>7.不行的话在创建一下 <code>pip3</code> 的软链接(我也不清楚这一步有什么用)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/<span class="built_in">local</span>/python3/bin/pip3 /usr/bin/pip3</span><br></pre></td></tr></table></figure><p>8.安装pip</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://bootstrap.pypa.io/get-pip.py</span><br><span class="line">python3 get-pip.py</span><br></pre></td></tr></table></figure><p>二、安装pip以及setuptools<br>　　<br>毕竟丰富的第三方库是python的优势所在，为了更加方便的安装第三方库，使用pip命令，我们需要进行相应的安装。</p><p>1、安装pip前需要前置安装setuptools</p><p>命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate  https://pypi.python.org/packages/<span class="built_in">source</span>/s/setuptools/setuptools-19.6.tar.gz<span class="comment">#md5=c607dd118eae682c44ed146367a17e26</span></span><br><span class="line"></span><br><span class="line">tar -zxvf setuptools-19.6.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> setuptools-19.6</span><br><span class="line"></span><br><span class="line">python3 setup.py build</span><br><span class="line"></span><br><span class="line">python3 setup.py install</span><br></pre></td></tr></table></figure><p>如果前面没布置好环境的话，就要苦逼一下了：</p><p>报错： RuntimeError: Compression requires the (missing) zlib module</p><p>我们需要在linux中安装zlib-devel包，进行支持。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install zlib-devel</span><br><span class="line"><span class="comment">#需要对python3.5进行重新编译安装。</span></span><br><span class="line"><span class="built_in">cd</span> python3.6.1</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>又是漫长的编译安装过程。</p><p>重新安装setuptools<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python3 setup.py build</span><br><span class="line">python3 setup.py install</span><br></pre></td></tr></table></figure></p><p>2、安装pip</p><p>命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate  https://pypi.python.org/packages/<span class="built_in">source</span>/p/pip/pip-8.0.2.tar.gz<span class="comment">#md5=3a73c4188f8dbad6a1e6f6d44d117eeb</span></span><br><span class="line"></span><br><span class="line">tar -zxvf pip-8.0.2.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> pip-8.0.2</span><br><span class="line"></span><br><span class="line">python3 setup.py build</span><br><span class="line"></span><br><span class="line">python3 setup.py install</span><br></pre></td></tr></table></figure><p>如果没有意外的话，pip安装完成。</p><p>如果没有搞好环境的话，会碰见亲切的报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip3 install paramiko</span><br><span class="line"><span class="comment">#报这个错</span></span><br><span class="line">pip is configured with locations that require TLS/SSL, however the ssl module <span class="keyword">in</span> Python is not available.</span><br></pre></td></tr></table></figure><p>然后开始进行如下操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install openssl</span><br><span class="line">yum install openssl-devel</span><br><span class="line"><span class="built_in">cd</span> python3.6.1</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      CentOS安装python3.6和第三方库
    
    </summary>
    
      <category term="Python3" scheme="https://oceandlnu.github.io/categories/Python3/"/>
    
    
      <category term="Linux" scheme="https://oceandlnu.github.io/tags/Linux/"/>
    
      <category term="Python3" scheme="https://oceandlnu.github.io/tags/Python3/"/>
    
  </entry>
  
  <entry>
    <title>PHP在Linux下出现HTTP ERROR 500解决方法</title>
    <link href="https://oceandlnu.github.io/2017/08/26/PHP%E5%9C%A8Linux%E4%B8%8B%E5%87%BA%E7%8E%B0500%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>https://oceandlnu.github.io/2017/08/26/PHP在Linux下出现500解决方法/</id>
    <published>2017-08-26T05:41:08.000Z</published>
    <updated>2018-07-26T05:11:26.900Z</updated>
    
    <content type="html"><![CDATA[<p>如图，出现HTTP ERROR 500说明你的php代码里可能有错，默认php的错误不会输出到浏览器</p><p><img src="/uploads/2017-08-26/1.png" alt=""></p><p>修改配置文件</p><pre><code>sudo vim /etc/php.ini #CentOSsudo vim /etc/php/7.0/fpm/php.ini #Ubunbu</code></pre><p>把display_errors = Off 改成 display_errors = On，建议开发完之后关闭，只在开发的时候开启此项</p><p><img src="/uploads/2017-08-26/2.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#向上搜索 ?display_errors</span><br><span class="line">#向下搜索 /display_errors</span><br><span class="line"># n 下一个 N 上一个</span><br><span class="line"></span><br><span class="line">vi /etc/php.ini</span><br><span class="line"></span><br><span class="line">#找到display_errors</span><br><span class="line"></span><br><span class="line">display_errors = Off</span><br><span class="line">改成</span><br><span class="line">display_errors = On</span><br></pre></td></tr></table></figure><p>重启apache 刷新页面看到显示错误信息，我们看到错误提示为require_once(): Failed opening required，打开文件请求失败，由于Linux下”/“表示根目录，我这是从windows直接移植过来的，将前面的”/“去掉。</p><pre><code>#重启服务器apacheservice httpd restart</code></pre><p><img src="/uploads/2017-08-26/3.png" alt=""></p><p>如果出现 “PHP Fatal error:  Uncaught think\exception\ErrorException: mkdir(): Permission denied in…” 实际原因是/var/www/html/mvc_article/目录是由httpd服务的用户来读写，默认不是apache这个账户来读写，所以就抛出了没有创建目录的权限，类似写这个目录的权限也没有，需要向下面这样改变mvc_article的权限(或者读写用户和组)</p><pre><code>#此文件夹以及目录下的所有文件和文件夹都赋予777权限chmod -R 777 文件夹或者#单个赋予权限chmod 777 文件夹/文件名</code></pre><p>最后，大功告成~</p><p>参考： <a href="http://blog.csdn.net/zhengzizhi/article/details/74845190" target="_blank" rel="noopener">http://blog.csdn.net/zhengzizhi/article/details/74845190</a></p>]]></content>
    
    <summary type="html">
    
      PHP在Linux下出现HTTP ERROR 500解决方法
    
    </summary>
    
      <category term="Linux" scheme="https://oceandlnu.github.io/categories/Linux/"/>
    
    
      <category term="PHP" scheme="https://oceandlnu.github.io/tags/PHP/"/>
    
      <category term="CentOS" scheme="https://oceandlnu.github.io/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>Win10修改编辑hosts文件没有权限保存解决方法</title>
    <link href="https://oceandlnu.github.io/2017/06/11/Win10%E4%BF%AE%E6%94%B9%E7%BC%96%E8%BE%91hosts%E6%96%87%E4%BB%B6%E6%B2%A1%E6%9C%89%E6%9D%83%E9%99%90%E4%BF%9D%E5%AD%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>https://oceandlnu.github.io/2017/06/11/Win10修改编辑hosts文件没有权限保存解决方法/</id>
    <published>2017-06-11T05:47:23.000Z</published>
    <updated>2018-07-26T05:11:26.900Z</updated>
    
    <content type="html"><![CDATA[<p>Win10无法修改编辑保存hosts文件怎么办?Win10系统默认是没有权限去编辑保存系统里的文件，这也是权限不够才导致修改编辑hosts后无法保存的原因，解决的办法就是把自己的帐户权限给提高就行了。</p><h3 id="工具-原料"><a href="#工具-原料" class="headerlink" title="工具/原料"></a>工具/原料</h3><p>Win10</p><h3 id="Win10修改编辑hosts文件无法保存怎么办"><a href="#Win10修改编辑hosts文件无法保存怎么办" class="headerlink" title="Win10修改编辑hosts文件无法保存怎么办"></a>Win10修改编辑hosts文件无法保存怎么办</h3><p>首先进入Win10系统的hosts文件所在位置，我们直接输入C:\Windows\System32\Drivers\etc后回车就可以打开了，右键hosts文件，选择属性，点击hosts属性对话框里的“高级”，如下图所示。</p><p><img src="/uploads/2017-06-11/1.png" alt=""></p><p>在hosts的高级安全设置界面点击更改权限，如下图所示。</p><p><img src="/uploads/2017-06-11/2.png" alt=""></p><p>在新弹出的对话框里点击添加按钮，如下图所示。</p><p><img src="/uploads/2017-06-11/3.png" alt=""></p><p>点击hosts的权限项目窗口下面的主体的“选择主体”，如下图所示。</p><p><img src="/uploads/2017-06-11/4.png" alt=""></p><p>点击进入选择用户或组界面，点击高级，如下图所示。</p><p><img src="/uploads/2017-06-11/5.png" alt=""></p><p>点击高级后，我们接着在点击<strong>立即查找</strong>，然后在查找结果里找到当前用户的账号，选中后点击确定，如下图所示。</p><p><img src="/uploads/2017-06-11/6.png" alt=""></p><p>在选择用户或组界面里点击确定，如下图所示。</p><p><img src="/uploads/2017-06-11/7.png" alt=""></p><p>将hosts的权限项目界面下的基本权限的所以项目都勾选上，然后点击确定，如下图所示。</p><p><img src="/uploads/2017-06-11/8.png" alt=""></p><p>权限添加成功后，直接点击确定，如下图所示。</p><p><img src="/uploads/2017-06-11/9.png" alt=""></p><p>点击后，系统提示你将要更改系统文件夹的权限设置，这样会降低计算机的安全性，并导致用户访问文件时出现问题。要继续吗？我们点击是。如下图所示。</p><p><img src="/uploads/2017-06-11/10.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      Win10修改编辑hosts文件没有权限保存解决方法
    
    </summary>
    
      <category term="windows10" scheme="https://oceandlnu.github.io/categories/windows10/"/>
    
    
      <category term="hosts" scheme="https://oceandlnu.github.io/tags/hosts/"/>
    
  </entry>
  
  <entry>
    <title>如何修改MySQL数据库引擎为INNODB</title>
    <link href="https://oceandlnu.github.io/2017/05/07/%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%95%E6%93%8E%E4%B8%BAINNODB/"/>
    <id>https://oceandlnu.github.io/2017/05/07/如何修改MySQL数据库引擎为INNODB/</id>
    <published>2017-05-07T05:41:08.000Z</published>
    <updated>2018-07-26T05:11:26.900Z</updated>
    
    <content type="html"><![CDATA[<p>对于MySQL数据库，如果你要使用事务以及行级锁就必须使用INNODB引擎。如果你要使用全文索引，那必须使用myisam。 INNODB的实用性，安全性，稳定性更高但是效率比MYISAM稍差，但是有的功能是MYISAM没有的。修改MySQL的引擎为INNODB，可以使用外键，事务等功能，性能高。本文主要介绍如何修改MySQL数据库引擎为INNODB，接下来我们开始介绍。</p><p>首先修改my.ini，在[mysqld]下加上：</p><pre><code>default-storage-engine=INNODB</code></pre><p>其中的INNODB是要指定的数据库引擎名称。</p><p>用sql语句修改已经建成表的引擎：</p><pre><code>alter table tableName type=InnoDB  </code></pre><p>下面贴出我的my.ini文件供参考：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]  </span><br><span class="line"> </span><br><span class="line">basedir=C:\Program Files\VertrigoServ\Mysql\  </span><br><span class="line"> </span><br><span class="line">datadir=C:\Program Files\VertrigoServ\Mysql\data\  </span><br><span class="line"> </span><br><span class="line">port =3306 </span><br><span class="line"> </span><br><span class="line">key_buffer =64M </span><br><span class="line"> </span><br><span class="line">max_allowed_packet =1M </span><br><span class="line"> </span><br><span class="line">table_cache =128 </span><br><span class="line"> </span><br><span class="line">sort_buffer_size =512K </span><br><span class="line"> </span><br><span class="line">net_buffer_length =8K </span><br><span class="line"> </span><br><span class="line">read_buffer_size =256K </span><br><span class="line"> </span><br><span class="line">read_rnd_buffer_size =512K </span><br><span class="line"> </span><br><span class="line">myisam_sort_buffer_size =68M </span><br><span class="line"> </span><br><span class="line">default-storage-engine=INNODB </span><br><span class="line"> </span><br><span class="line">[mysqldump]  </span><br><span class="line"> </span><br><span class="line">quick  </span><br><span class="line"> </span><br><span class="line">max_allowed_packet =116M </span><br><span class="line"> </span><br><span class="line">[mysql]  </span><br><span class="line"> </span><br><span class="line">no-auto-rehash  </span><br><span class="line"> </span><br><span class="line"># Remove the next comment character if you are not familiar with SQL  </span><br><span class="line"> </span><br><span class="line">#safe-updates  </span><br><span class="line"> </span><br><span class="line">[isamchk]  </span><br><span class="line"> </span><br><span class="line">key_buffer =20M </span><br><span class="line"> </span><br><span class="line">sort_buffer_size =20M </span><br><span class="line"> </span><br><span class="line">read_buffer =62M </span><br><span class="line"> </span><br><span class="line">write_buffer =62M </span><br><span class="line"> </span><br><span class="line">[myisamchk]  </span><br><span class="line"> </span><br><span class="line">key_buffer =20M </span><br><span class="line"> </span><br><span class="line">sort_buffer_size =20M </span><br><span class="line"> </span><br><span class="line">read_buffer =62M </span><br><span class="line"> </span><br><span class="line">write_buffer =62M </span><br><span class="line"> </span><br><span class="line">[mysqlhotcopy]  </span><br><span class="line"> </span><br><span class="line">interactive-timeout</span><br></pre></td></tr></table></figure><p>按照以上的代码提示操作，我们就能够成功地修改MySQL数据库引擎为INNODB了。</p>]]></content>
    
    <summary type="html">
    
      如何修改MySQL数据库引擎为INNODB
    
    </summary>
    
      <category term="SQL" scheme="https://oceandlnu.github.io/categories/SQL/"/>
    
    
      <category term="MySQL" scheme="https://oceandlnu.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>GitHub+Hexo博客多终端同步</title>
    <link href="https://oceandlnu.github.io/2017/04/05/GitHub+Hexo%E5%8D%9A%E5%AE%A2%E5%A4%9A%E7%BB%88%E7%AB%AF%E5%90%8C%E6%AD%A5/"/>
    <id>https://oceandlnu.github.io/2017/04/05/GitHub+Hexo博客多终端同步/</id>
    <published>2017-04-05T11:23:08.000Z</published>
    <updated>2018-07-26T10:18:56.401Z</updated>
    
    <content type="html"><![CDATA[<p>我们发现用Github+Hexo搭建了自己的博客，但是回到宿舍打开电脑时遇到了一个问题，我想在不同的终端进行github+Hexo的博客发布更新该如何进行呢，在Google中搜了一些教程，并自身进行了简化与实践！</p><p>主体的思路是<strong>将博文内容相关文件放在Github项目中master中，将Hexo配置写博客用的相关文件放在Github项目的hexo分支上</strong>，这个是关键，多终端的同步只需要对分支hexo进行操作。下面是详细的步骤讲解：</p><p>1.准备条件</p><p>安装Node,Git,Hexo环境，完成Github与本地Hexo的对接。</p><p>配置好这些，就可以捋起袖子大干一场了！</p><p>2.在其中一个终端操作，push本地文件夹Hexo中的必要文件到yourname.github.io的hexo分支上</p><p>在利用Github+Hexo搭建自己的博客时，新建了一个Hexo的文件夹，并进行相关的配置，这部分主要是将这些配置的文件托管到Github项目的分支上，其中只托管部分用于多终端的同步的文件：</p><p><strong>注意：themes文件夹里面的主题是不会add的，所以可以先将主题文件压缩（如我的是next.tar.gz），然后add，之后同步到本地之后再解压，目前还没有找到别的办法</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//初始化本地仓库</span><br><span class="line">git init</span><br><span class="line">//将目录下的所有文件添加到本地仓库</span><br><span class="line">git add . </span><br><span class="line">git commit -m <span class="string">"Blog Source Hexo"</span></span><br><span class="line">//新建hexo分支</span><br><span class="line">git branch hexo</span><br><span class="line">//切换到hexo分支上</span><br><span class="line">git checkout hexo</span><br><span class="line">//将本地与Github项目对接</span><br><span class="line">git remote add origin git@github.com:oceandlnu/oceandlnu.github.io.git</span><br><span class="line">//push到Github项目的hexo分支上</span><br><span class="line">git push origin hexo</span><br></pre></td></tr></table></figure><p>完成之后的效果图为：</p><p><img src="/uploads/2017-04-05/1.png" alt=""></p><p>这样你的github项目中就会多出一个Hexo分支，这个就是用于多终端同步关键的部分。</p><p>3.另一终端完成clone和push更新</p><p>此时在另一终端更新博客，只需要将Github的hexo分支clone下来，进行初次的相关配置，详细配置点击<a href="https://oceandlnu.github.io/2017/03/06/GitHub+Hexo%E5%8D%9A%E5%AE%A2%E5%A4%9A%E7%BB%88%E7%AB%AF%E5%90%8C%E6%AD%A5[%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C]/">GitHub+Hexo博客多终端同步[准备工作]</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//将Github中hexo分支<span class="built_in">clone</span>到本地</span><br><span class="line">git <span class="built_in">clone</span> -b hexo git@github.com:oceandlnu/oceandlnu.github.io.git  </span><br><span class="line">//切换到刚刚<span class="built_in">clone</span>的文件夹内</span><br><span class="line"><span class="built_in">cd</span> oceandlnu.github.io</span><br><span class="line">//注意，这里一定要切换到刚刚<span class="built_in">clone</span>的文件夹内执行，安装必要的所需组件，不用再hexo init</span><br><span class="line">npm install</span><br><span class="line"><span class="built_in">cd</span> theme</span><br><span class="line">tar zxvf next.tar.gz</span><br><span class="line">//新建一个.md文件，并编辑完成自己的博客内容</span><br><span class="line">hexo new post <span class="string">"new blog name"</span></span><br><span class="line">//经测试每次只要更新<span class="built_in">source</span>中的文件到Github中即可，因为只是新建了一篇新博客</span><br><span class="line">git add <span class="built_in">source</span></span><br><span class="line">git commit -m <span class="string">"XX"</span></span><br><span class="line">//推送到远程仓库，更新hexo分支</span><br><span class="line">git push origin hexo</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d   </span><br><span class="line"><span class="comment">#push更新完分支之后将自己写的博客对接到自己搭的博客网站上，同时同步了Github中的master</span></span><br></pre></td></tr></table></figure><p>4.不同终端间愉快地玩耍</p><p>在不同的终端已经做完配置，就可以愉快的分享自己更新的博客，进入自己相应的文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//先pull完成本地与远端的融合</span><br><span class="line">git pull origin hexo</span><br><span class="line">hexo new post <span class="string">" new blog name"</span></span><br><span class="line">git add <span class="built_in">source</span></span><br><span class="line">git commit -m <span class="string">"XX"</span></span><br><span class="line">git push origin hexo</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><p>关于Github不熟悉的强烈推荐张哥的Github系列教程<a href="http://stormzhang.com/2017/01/20/learn-github-from-zero-pdf/" target="_blank" rel="noopener">我的书籍出版了</a></p><p>另外你可能会遇到一些其他的坑，在这里我没有遇到，大家可以参考一篇博文<a href="https://righere.github.io/2016/10/10/install-hexo/" target="_blank" rel="noopener">搭建hexo博客并简单的实现多终端同步</a></p><p>对于于博文的图片托管问题感兴趣的可以我写的参考<a href="http://blog.csdn.net/monkey_lzl/article/details/57480599" target="_blank" rel="noopener">如何利用Github在Markdown中优雅的插入图片</a></p>]]></content>
    
    <summary type="html">
    
      GitHub+Hexo博客多终端同步
    
    </summary>
    
      <category term="基本操作" scheme="https://oceandlnu.github.io/categories/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    
    
      <category term="Git" scheme="https://oceandlnu.github.io/tags/Git/"/>
    
      <category term="GitHub" scheme="https://oceandlnu.github.io/tags/GitHub/"/>
    
      <category term="Hexo" scheme="https://oceandlnu.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
