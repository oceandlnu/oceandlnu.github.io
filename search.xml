<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[MySQL 主从复制(Master-Slave)]]></title>
    <url>%2F2018%2F07%2F20%2FMySQL%20%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6(Master-Slave)%2F</url>
    <content type="text"><![CDATA[MySQL数据库自身提供的主从复制功能可以方便的实现数据的多处自动备份，实现数据库的拓展。多个数据备份不仅可以加强数据的安全性，通过实现读写分离还能进一步提升数据库的负载性能。 下图描述了一个多个数据库间主从复制与读写分离的模型(来源网络) 在一主多从的数据库体系中，多个从服务器采用异步的方式更新主数据库的变化，业务服务器在执行写或者相关修改数据库的操作是在主服务器上进行的，读操作则是在各从服务器上进行。如果配置了多个从服务器或者多个主服务器又涉及到相应的负载均衡问题，关于负载均衡具体的技术细节还没有研究过，今天就先简单的实现一主一从的主从复制功能。 Mysql主从复制的实现原理图大致如下(来源网络)： MySQL之间数据复制的基础是二进制日志文件（binary log file）。一台MySQL数据库一旦启用二进制日志后，其作为master，它的数据库中所有操作都会以“事件”的方式记录在二进制日志中，其他数据库作为slave通过一个I/O线程与主服务器保持通信，并监控master的二进制日志文件的变化，如果发现master二进制日志文件发生变化，则会把变化复制到自己的中继日志中，然后slave的一个SQL线程会把相关的“事件”执行到自己的数据库中，以此实现从数据库和主数据库的一致性，也就实现了主从复制。 实现MySQL主从复制需要进行的配置： 主服务器： 开启二进制日志 配置唯一的server-id 获得master二进制日志文件名及位置 创建一个用于slave和master通信的用户账号 从服务器： 配置唯一的server-id 使用master分配的用户账号读取master二进制日志 启用slave服务 具体实现过程如下准备工作：1.主从数据库版本最好一致(MySQL 5.7)2.主从数据库内数据保持一致 主数据库：182.92.172.80 从数据库：123.57.44.85 主数据库master修改：1.修改mysql配置 找到主数据库的配置文件my.cnf(或者my.ini)，我的在 /etc/mysql/my.cnf ,在[mysqld]部分插入如下两行： 1234#开启二进制日志[mysqld]log-bin=mysql-bin #设置server-idserver-id=1 2.重启mysql，创建用于同步的用户账号 1mysql -hlocalhost -uname -ppassword 创建用户并授权：用户rel1，密码slavepass 123456#创建用户mysql&gt; CREATE USER 'repl'@'123.57.44.85' IDENTIFIED BY 'slavepass';#分配权限mysql&gt; GRANT REPLICATION SLAVE ON *.* TO 'repl'@'123.57.44.85';#刷新权限mysql&gt; flush privileges; 3.查看master状态，记录二进制文件名(mysql-bin.000003)和位置(73)： 123456mysql&gt; SHOW MASTER STATUS;+------------------+----------+--------------+------------------+|File | Position | Binlog_Do_DB | Binlog_Ignore_DB |+------------------+----------+--------------+------------------+|mysql-bin.000003 | 73 | test | manual,mysql |+------------------+----------+--------------+------------------+ 从服务器slave修改：1.修改mysql配置 同样找到my.cnf配置文件，添加server-id 123[mysqld]#设置server-id，必须唯一server-id=2 2.重启mysql，打开mysql会话，执行同步SQL语句(需要主服务器主机名，登陆凭据，二进制文件的名称和位置)： 123456mysql&gt; CHANGE MASTER TO -&gt; MASTER_HOST=&apos;182.92.172.80&apos;, -&gt; MASTER_USER=&apos;rep1&apos;, -&gt; MASTER_PASSWORD=&apos;slavepass&apos;, -&gt; MASTER_LOG_FILE=&apos;mysql-bin.000003&apos;, -&gt; MASTER_LOG_POS=73; 3.启动slave同步进程： 1mysql&gt; start slave; 4.查看slave状态： 1234567891011121314151617mysql&gt; show slave status\G; *************************** 1. row *************************** Slave_IO_State: Waiting for master to send event Master_Host: 182.92.172.80 Master_User: rep1 Master_Port: 3306 Connect_Retry: 60 Master_Log_File: mysql-bin.000013 Read_Master_Log_Pos: 11662 Relay_Log_File: mysqld-relay-bin.000022 Relay_Log_Pos: 11765 Relay_Master_Log_File: mysql-bin.000013 Slave_IO_Running: Yes Slave_SQL_Running: Yes Replicate_Do_DB: Replicate_Ignore_DB: ... 当 Slave_IO_Running 和 Slave_SQL_Running 都为YES的时候就表示主从同步设置成功了。接下来就可以进行一些验证了，比如在主master数据库的test数据库的一张表中插入一条数据，在slave的test库的相同数据表中查看是否有新增的数据即可验证主从复制功能是否有效，还可以关闭slave（mysql&gt;stop slave;）,然后再修改master，看slave是否也相应修改（停止slave后，master的修改不会同步到slave），就可以完成主从复制功能的验证了。 还可以用到的其他相关参数： master开启二进制日志后默认记录所有库所有表的操作，可以通过配置来指定只记录指定的数据库甚至指定的表的操作，具体在mysql配置文件的 [mysqld] 可添加修改如下选项： 1234567# 不同步哪些数据库 binlog-ignore-db = mysql binlog-ignore-db = test binlog-ignore-db = information_schema # 只同步哪些数据库，除此之外，其他不同步 binlog-do-db = game]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Redis 配置说明]]></title>
    <url>%2F2018%2F07%2F07%2FRedis%20%E9%85%8D%E7%BD%AE%E8%AF%B4%E6%98%8E%2F</url>
    <content type="text"><![CDATA[Redis 配置文件 redis.conf (find / -name &quot;redis.conf&quot;) Redis 默认不是以守护进程的方式运行，可以通过该配置项修改，使用 yes 启用守护进程 1daemonize no 当 Redis 以守护进程方式运行时，Redis 默认会把 pid 写入 /var/run/redis.pid 文件，可以通过 pidfile 指定 1pidfile /var/run/redis.pid 指定 Redis 监听端口，默认端口为 6379，作者在自己的一篇博文中解释了为什么选用 6379 作为默认端口，因为 6379 在手机按键上对应 MERZ，而 MERZ 取自意大利歌女 Alessia Merz 的名字 1port 6379 绑定的主机地址，注释改行表示允许远程连接(建议开发环境注释，生产环境恢复) 1bind 127.0.0.1 5.当客户端闲置多长时间后关闭连接，如果指定为 0，表示关闭该功能 1timeout 300 指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为 verbose 1loglevel verbose 日志记录方式，默认为标准输出，如果配置Redis为守护进程方式运行，而这里又配置为日志记录方式为标准输出，则日志将会发送给 /dev/null 1logfile stdout 设置数据库的数量，默认数据库为 0，可以使用 SELECT &lt;dbid&gt; 命令在连接上指定数据库 id 1databases 16 指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合 123456# save &lt;seconds&gt; &lt;changes&gt;# Redis默认配置文件中提供了三个条件save 900 1save 300 10save 60 10000# 分别表示900秒（15分钟）内有1个更改，300秒（5分钟）内有10个更改以及60秒内有10000个更改。 指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，可以关闭该选项，但会导致数据库文件变的巨大 1rdbcompression yes 指定本地数据库文件名，默认值为dump.rdb 1dbfilename dump.rdb 指定本地数据库存放目录 1dir ./ 设置当本机为slav服务时，设置master服务的IP地址及端口，在Redis启动时，它会自动从master进行数据同步 1slaveof &lt;masterip&gt; &lt;masterport&gt; 当master服务设置了密码保护时，slav服务连接master的密码 1masterauth &lt;master-password&gt; 设置Redis连接密码，如果配置了连接密码，客户端在连接Redis时需要通过AUTH 命令提供密码，默认关闭 1requirepass ocean 设置同一时间最大客户端连接数，默认无限制，Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件描述符数，如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis会关闭新的连接并向客户端返回max number of clients reached错误信息 1maxclients 128 指定Redis最大内存限制，Redis在启动时会把数据加载到内存中，达到最大内存后，Redis会先尝试清除已到期或即将到期的Key，当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis新的vm机制，会把Key存放内存，Value会存放在swap区 1maxmemory &lt;bytes&gt; 指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为 redis本身同步数据文件是按上面save条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为no 1appendonly no 指定更新日志文件名，默认为appendonly.aof 1appendfilename appendonly.aof 指定更新日志条件 123456# 共有3个可选值： # no：表示等操作系统进行数据缓存同步到磁盘（快） # always：表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全） # everysec：表示每秒同步一次（折衷，默认值）appendfsync everysec 指定是否启用虚拟内存机制，默认值为no，简单的介绍一下，VM机制将数据分页存放，由Redis将访问量较少的页即冷数据swap到磁盘上，访问多的页面由磁盘自动换出到内存中 1vm-enabled no 虚拟内存文件路径，默认值为 /tmp/redis.swap，不可多个Redis实例共享 1vm-swap-file /tmp/redis.swap 将所有大于vm-max-memory的数据存入虚拟内存,无论vm-max-memory设置多小,所有索引数据都是内存存储的(Redis的索引数据 就是keys),也就是说,当vm-max-memory设置为0的时候,其实是所有value都存在于磁盘。默认值为0 1vm-max-memory 0 Redis swap文件分成了很多的page，一个对象可以保存在多个page上面，但一个page上不能被多个对象共享，vm-page-size是要根据存储的 数据大小来设定的，作者建议如果存储很多小对象，page大小最好设置为32或者64bytes；如果存储很大大对象，则可以使用更大的page，如果不确定，就使用默认值 1vm-page-size 32 设置swap文件中的page数量，由于页表（一种表示页面空闲或使用的bitmap）是在放在内存中的，，在磁盘上每8个pages将消耗1byte的内存。 1vm-pages 134217728 设置访问swap文件的线程数,最好不要超过机器的核数,如果设置为0,那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟。默认值为4 1vm-max-threads 4 设置在向客户端应答时，是否把较小的包合并为一个包发送，默认为开启 1glueoutputbuf yes 指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法 12hash-max-zipmap-entries 64hash-max-zipmap-value 512 指定是否激活重置哈希，默认为开启（后面在介绍Redis的哈希算法时具体介绍） 1activerehashing yes 指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件 1include /path/to/local.conf]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[docker & docker-compose 部署]]></title>
    <url>%2F2018%2F06%2F29%2Fdocker%20%26%20docker-compose%20%E9%83%A8%E7%BD%B2%2F</url>
    <content type="text"><![CDATA[docker 安装进入 下载地址 选择最新的包下载 12tar xzvf docker-18.03.1-ce.tgzsudo cp docker/* /usr/bin/ 启动 1sudo dockerd &amp; 验证是否安装成功 12docker -vdocker info 为当前用户增加执行权限 12sudo groupadd dockersudo usermod -aG docker $USER docker-compose 安装1234#如果shell是zsh，切换到bash安装bashsudo curl -L https://github.com/docker/compose/releases/download/1.21.2/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-composesudo chmod +x /usr/local/bin/docker-compose 替换国内源 编辑 sudo nano /etc/docker/daemon.json 如果不存在则创建。如果文件为空，添加以下内容。 参考链接 123456&#123; "registry-mirrors": [ "http://0ed8bcb8.m.daocloud.io" ], "insecure-registries": []&#125; 验证 1docker-compose --version 基本命令 关闭所有容器（停止所有服务） 1docker-compose stop 删除所有容器 12docker-compose downdocker container prune 删除所有镜像 12docker rmi $(docker images -q)docker image rm $(docker image ls -q) 进入工作目录 1docker-compose exec workspace bash 远程连接mysql并执行mysql命令行模式 1docker-compose exec mysql mysql -u[用户名] -p[密码] 远程连接 redis 并进入 redis 命令行模式，这条命令是默认端口为 6379，如果你更改了端口请在后面加上 -p [端口号] 1docker-compose exec redis redis-cli -h redis laradock 设置代理 参考资料： https://docs.docker.com/install/linux/docker-ce/binaries/ https://docs.docker.com/install/linux/linux-postinstall/ https://docs.docker.com/compose/install/#install-compose https://github.com/yeasy/docker_practice/blob/master/SUMMARY.md]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Manjaro 日常配置]]></title>
    <url>%2F2018%2F05%2F29%2FManjaro%20%E6%97%A5%E5%B8%B8%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[更换国内源清华源：https://mirrors.tuna.tsinghua.edu.cn/中科大：https://mirrors.ustc.edu.cn/阿里源：https://opsx.alibaba.com/ 列出可用中国镜像站列表： 1sudo pacman-mirrors -i -c China -m rank 勾选 https://mirrors.tuna.tsinghua.edu.cn/manjaro/，然后 OK -&gt; 确定 。 Arch Linux CN 软件源 1234sudo nano /etc/pacman.conf#在文件末尾添加以下两行[archlinuxcn]Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$arch 更新缓存 1sudo pacman -Syy 安装 archlinuxcn-keyring 包导入 GPG key 1sudo pacman -S archlinuxcn-keyring 安装更新 12sudo pacman -R thunar-archive-pluginsudo pacman -Syyu 安装 yaourt 1sudo pacman -S yaourt AUR 软件源 123sudo nano /etc/yaourtrc# 去掉 # AURURL 的注释，修改为AURURL="https://aur.tuna.tsinghua.edu.cn" 菜单 -&gt; 添加/删除软件 -&gt; 首选项 -&gt; AUR，打开 启用AUR支持 勾选 从AUR检查更新 常用软件1sudo pacman -S chromium filezilla screenfetch netease-cloud-music obs-studio chromiun安装 flash 1yaourt -S pepper-flash 微信、TIM 1yaourt -S deepin-wechat deepin.com.qq.office git配置 123ssh-keygen -t rsa -C "ocean"git config --global user.name "oceandlnu"git config --global user.email "oceandlnu@gmail.com" 删除孤立软件包(慎用) 1sudo pacman -Rs $(pacman -Qtdq) 有需要可以自行去 软件包管理器(添加/删除软件) 或者AUR查找软件。 自由截图快捷键设置 菜单 -&gt; 设置 -&gt; 键盘 -&gt; 应用程序快捷键 -&gt; 添加 -&gt; 命令 xfce4-screenshooter -r 点击确定，接下来会提示设置快捷键，我设置为 ctrl+alt+A 安装深度截图1yaourt -S deepin-screenshot 移动设备挂载 系统默认已安装 udiskie，如果没有执行下面命令安装 sudo pacman -S udiskie 菜单 -&gt; 设置 -&gt; 可移动驱动器和介质 -&gt; 选择 存储器 -&gt; 勾选 热插拔时挂载可移动驱动器 插入后挂载可移动介质(或执行usidkie -2 命令设置为开机启动) 日常开发1yaourt -S charles mysql-workbench postman-bin redis-desktop-manager haroopad 破解 charles 1sudo mv charles.jar /usr/share/java/charles 如果 redis-desktop-manager打开失败 1234yaourt -R redis-desktop-manageryaourt -S redis-desktop-manager-binyaourt -R redis-desktop-manager-binyaourt -S redis-desktop-manager phpstorm下载地址：http://www.jetbrains.com/ 123sudo nano /etc/hosts#添加下面一行0.0.0.0 account.jetbrains.com 解压安装包进入bin目录 1./phpstorm.sh &amp; 获取激活码，注册码激活： http://idea.iteblog.com/http://idea.lanyus.com/ 配置文件存放目录：~/.PhpStorm2018.1 sublime textSublime Text 日常配置 wechat-dev-tool在 ～/.local/share/applications/ 目录下创建desktop文件(nano xxx.desktop) wechat-dev-tool 123456789[Desktop Entry]Version=1.0Type=ApplicationName=wechat-dev-toolIcon=/home/ocean/develop/wechat-dev-tool/app/images/icon.pngExec="/home/ocean/develop/wechat-dev-tool/nw" %fComment=The Drive to DevelopCategories=Development;IDE;Terminal=false 安装WPS1yaourt -S wps-office ttf-wps-fonts 安装搜狗拼音1yaourt -S fcitx-im fcitx-configtool fcitx-sogoupinyin 创建 .xprofile 文件，添加以下语句，否则只能在一部分窗口下输入。 12345nano ~/.xprofile#添加以下语句export GTK_IM_MODULE=fcitxexport QT_IM_MODULE=fcitxexport XMODIFIERS=@im=fcitx SSR Client安装配置脚本12345678910111213141516171819202122cd ~/develop# 下载curl https://raw.githubusercontent.com/the0demiurge/CharlesScripts/master/charles/bin/ssr -o "ssr"# 或者wget https://raw.githubusercontent.com/the0demiurge/CharlesScripts/master/charles/bin/ssr -O "ssr"# 添加执行权限chmod a+x ssrsudo ln -s /home/ocean/develop/ssr /usr/bin/ssr# 安装依赖yaourt -S jq tsocks# 安装ssr客户端ssr install# 配置ssr config# 启动ssr start# 停止ssr stop# 重启ssr restart# 卸载ssr uninstall 自由上网 逗比根据地 SSR 账号 老D博客 代理配置(Pac/SwitchyOmega 二选一)Pac 全局代理 系统默认已经安装 pip，重新安装执行yaourt -S python-pip 123sudo pip install genpac# 在当前目录(比如：/home/ocean/develop)下生成autoproxy.pacgenpac --format=pac --pac-proxy="SOCKS5 127.0.0.1:1080" --pac-precise --output="autoproxy.pac" 设置全局代理，在environment文件里添加 auto_proxy/AUTO_PROXY 1234sudo nano /etc/environment#添加下面任意一行auto_proxy="file:///home/ocean/develop/autoproxy.pac"AUTO_PROXY="file:///home/ocean/develop/autoproxy.pac" SwitchyOmega 代理配置SwitchyOmega SwitchyOmega Github 安装完成后，点击右上角 SwitchyOmega -&gt; 选项 1.情景模式 -&gt; proxy 网址协议 代理协议 代理服务器 代理端口 (默认) SOCKS5 127.0.0.1 1080 2.情景模式 -&gt; auto switch 规则列表设置 -&gt; 添加规则列表 规则列表格式 AutoProxy 规则列表网址 https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt 切换规则 规则列表规则 (按照规则列表匹配请求) proxy 默认情景模式 直接连接 3.立即更新情景模式 -&gt; 应用选项 保存设置。 情景模式说明： proxy 所有URL都走代理模式 auto switch 自动根据URL判断是否走代理 终端代理1yaourt -S proxychains-ng 编辑proxychains.conf文件，将socks4 127.0.0.1 9095修改为socks5 127.0.0.1 1080 123sudo nano /etc/proxychains.conf#找到最后一行，修改为socks5 127.0.0.1 1080 使用： 1proxychains yourcommand eg： 1proxychains curl www.google.com 安装 VirtualBox 查看当前的内核版本， uname -r ，比如输出了 4.14.44-1-MANJARO 内核版本为 414 1yaourt -S virtualbox linux414-virtualbox-host-modules virtualbox-ext-oracle [kernel version]-virtualbox-host-modules 根据内核版本选择，假如我的内核版本为 3.7.4-1-MANJARO，则安装 linux37-virtualbox-host-modules 添加当前用户到vboxusers，如果不需要使用USB外设，可以不执行此操作。 1sudo gpasswd -a [username] vboxusers eg 1sudo gpasswd -a ocean vboxusers 重新启动系统或执行 sudo vboxreload ，参考链接 安装oh-my-zsh、powerline Manjaro 自带 zsh ， zsh --version 查看，如果没有安装 执行 yaourt -S zsh oh-my-zsh：http://ohmyz.sh/ 12# 安装 oh-my-zshsh -c "$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)" zsh 主题配置(非必须) 12345# 安装powerline及字体yaourt -S powerline powerline-fonts# 编辑 `nano .zshrc` 在最后添加powerline-daemon -q. /usr/lib/python3.6/site-packages/powerline/bindings/zsh/powerline.zsh 安装 nvm(安装完成后需要重启终端) Github：https://github.com/creationix/nvm 12345curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | zsh# 或者wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | zsh# 更换 nvm 淘宝源echo "export NVM_NODEJS_ORG_MIRROR=https://npm.taobao.org/mirrors/node" &gt;&gt; ~/.zshrc 安装 node 12345678910# 最新 lts 版本nvm install --lts# 更换 npm 淘宝源npm config set registry https://registry.npm.taobao.org# 查看当前源npm config get registry# 补充(yarn安装，查看源，更换源)npm install -g yarnyarn config get registryyarn config set registry https://registry.npm.taobao.org 安装hexo 1npm install hexo-cli -g 临时切换 bash 1bash 临时切换 zsh 1zsh 修改 bash 为默认 shell 1chsh -s /bin/bash 修改 zsh 为默认 shell 1chsh -s /bin/zsh 免密登录 12cat ~/.ssh/id_rsa.pub#将公钥追加到远程服务器的 ~/.ssh/authorized_keys 保持ssh连接(客户端配置) 1234sudo nano /etc/ssh/ssh_config#添加下面两行ServerAliveInterval 120ServerAliveCountMax 60 参考链接]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>manjaro</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu 日常配置]]></title>
    <url>%2F2018%2F05%2F26%2FUbuntu%20%E6%97%A5%E5%B8%B8%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[更换国内源系统设置 -&gt; 软件和更新 选择下载服务器 -&gt; “mirrors.aliyun.com” 安装常用软件更新源并且升级软件 12sudo apt updatesudo apt upgrade 安装vim、chromium、filezilla123sudo apt install git vim chromium-browser filezilla -y#GIMP图像处理，Kdenlive视频处理，p7zip支持rar压缩sudo apt install gimp kdenlive p7zip-full -y 安装nvm(安装完成后需要重启终端)nvmn 12345curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash# 或者wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash# 更换 nvm 淘宝源echo "export NVM_NODEJS_ORG_MIRROR=https://npm.taobao.org/mirrors/node" &gt;&gt; ~/.bashrc 安装 node 12345678910# 最新 lts 版本nvm install --lts# 更换 npm 淘宝源npm config set registry https://registry.npm.taobao.org# 查看当前源npm config get registry# 补充(yarn安装，查看源，更换源)npm install -g yarnyarn config get registryyarn config set registry https://registry.npm.taobao.org 安装hexo 1npm install hexo-cli -g 安装搜狗输入法下载：https://pinyin.sogou.com/linux/ 双击安装下载的deb软件包，安装完成之后，进入语言支持-&gt;键盘输入法系统 选项旁边选择fcitx，重启电脑 使用快捷键 ctrl+space 或者 shift 切换输入法 安装网易云音乐下载：http://music.163.com/#/download 双击安装下载的deb软件包即可 Chromium创建桌面应用(例如：钉钉、微信)在 ～/.local/share/applications/ 目录下创建各自的desktop文件(vim xxx.desktop) 钉钉 123456789#!/usr/bin/env xdg-open[Desktop Entry]Version=1.0Type=ApplicationName=钉钉Icon=/home/ocean/appicon/dd.pngExec=/opt/google/chrome/google-chrome "--app=https://im.dingtalk.com/"Terminal=falseStartupWMClass=im.dingtalk.com 微信 123456789#!/usr/bin/env xdg-open[Desktop Entry]Version=1.0Type=ApplicationName=微信Icon=/home/ocean/appicon/wx.pngExec=/opt/google/chrome/google-chrome "--app=https://wx.qq.com/?lang=zh_CN"Terminal=falseStartupWMClass=wx.qq.com 图标路径可以自己改成对应的路径，不必按照案例来做，只要能访问到就是OK的 创建App快捷方式： charles123456789[Desktop Entry]Version=1.0Type=ApplicationName=charlesIcon=/home/ocean/develop/charles/icon/64x64/apps/charles-proxy.pngExec="/home/ocean/develop/charles/bin/charles" %fComment=The Drive to DevelopCategories=Development;IDE;Terminal=false postman123456789[Desktop Entry]Version=1.0Type=ApplicationName=PostmanIcon=/home/ocean/develop/Postman/resources/app/assets/icon.pngExec="/home/ocean/develop/Postman/Postman" %fComment=The Drive to DevelopCategories=Development;IDE;Terminal=false pycharm123456789[Desktop Entry]Version=1.0Type=ApplicationName=PycharmIcon=/home/ocean/develop/pycharm-community-2018.1.2/bin/pycharm.pngExec="/home/ocean/develop/pycharm-community-2018.1.2/bin/pycharm.sh" %fComment=The Drive to DevelopCategories=Development;IDE;Terminal=false wechat-dev-tool123456789[Desktop Entry]Version=1.0Type=ApplicationName=wechat-dev-toolIcon=/home/ocean/develop/wechat-dev-tool/app/images/icon.pngExec="/home/ocean/develop/wechat-dev-tool/nw" %fComment=The Drive to DevelopCategories=Development;IDE;Terminal=false 安装Postman官网：https://www.getpostman.com/ 下载解压 123cd Postman/sudo apt install libgconf-2-4 -y./Postman &amp; 安装Workbench下载地址：https://dev.mysql.com/downloads/workbench/ 安装VirtualBox VMwareVirtualBox下载地址：https://www.virtualbox.org/wiki/Downloads VMware下载地址：https://www.vmware.com/cn/products/workstation-pro/workstation-pro-evaluation.html 安装Vmware: 1sudo ./VMware-Workstation-Full-14.1.1-7528167.x86_64.bundle PHPStorm Pycharm下载地址：http://www.jetbrains.com/ 解压进入bin目录，启动 12./phpstorm.sh &amp;./pycharm.sh &amp; 激活 修改hosts文件，添加下面一行 10.0.0.0 account.jetbrains.com 获取激活码，注册码激活： http://idea.iteblog.com/http://idea.lanyus.com/ Sublime Text下载地址：http://www.sublimetext.com/ Shadowsocksr ClientSSR 客户端安装配置脚本(推荐)123456789101112131415161718192021# 下载curl https://raw.githubusercontent.com/the0demiurge/CharlesScripts/master/charles/bin/ssr -o "ssr"# 或者wget https://raw.githubusercontent.com/the0demiurge/CharlesScripts/master/charles/bin/ssr -O "ssr"# 添加执行权限chmod a+x ssrsudo ln -s /home/ocean/develop/ssr /usr/bin/ssr# 安装依赖sudo apt install curl jq tsocks -y# 安装ssr客户端ssr install# 配置ssr config# 启动ssr start# 停止ssr stop# 重启ssr restart# 卸载ssr uninstall SSR GUI 客户端ssr GUI 客户端 直接下载安装就可以，不多做介绍，对于有些Linux客户端无效，不推荐。 安装ssr之后，还不能翻墙，因为没有设置代理，下面进行设置。 代理配置(Pac/SwitchyOmega 二选一)Pac 自动代理配置1.genpac 生成pac(推荐) genpac 12345678910# 安装pipsudo apt install python-pip -y# 安装genpacpip install genpac# 更新genpacpip install --upgrade genpac# 卸载genpacpip uninstall genpac# 在当前目录(比如：/home/ocean/develop)下生成autoproxy.pacgenpac --format=pac --pac-proxy="SOCKS5 127.0.0.1:1080" --pac-precise --output="autoproxy.pac" 注意：如果执行时出现无法找到命令 genpac 错误，可能是因为genpac命令没有被安装到系统路径，genpac执行入口文件被安装到了~/.local/bin，解决方法 方案一：将~/.local/bin添加到系统路径 1sudo ln -s ~/.local/bin/genpac /usr/bin/genpac 方案二：卸载重新使用sudo安装genpac 123pip uninstall genpacsudo pip install genpacsudo pip install --upgrade genpac 2.pac_get.sh 生成pac pac_get 12345678910# 下载脚本到当前目录curl https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/pac_get.sh -o "pac_get"# 或者wget https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/pac_get.sh -O "pac_get"chmod a+x pac_getvim pac_get# "__PROXY__"修改为自己的代理地址，比如"SOCKS5 127.0.0.1:1080"，否则无法翻墙# Output_URL=生成pac文件路径，可自由修改，比如"autoproxy.pac"# 修改保存后，执行脚本，在当前目录(比如：/home/ocean/develop)下生成autoproxy.pac./pac_get 3.打开系统设置-&gt;网络-&gt;网络代理-&gt;自动，配置 URL”file://pac文件路径”，比如”file:///home/ocean/develop/autoproxy.pac” SwitchyOmega 代理配置SwitchyOmega SwitchyOmega Github 安装完成后，点击右上角 SwitchyOmega -&gt; 选项 1.情景模式 -&gt; proxy 网址协议 代理协议 代理服务器 代理端口 (默认) SOCKS5 127.0.0.1 1080 2.情景模式 -&gt; auto switch 规则列表设置 -&gt; 添加规则列表 规则列表格式 AutoProxy 规则列表网址 https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt 切换规则 规则列表规则 (按照规则列表匹配请求) proxy 默认情景模式 直接连接 3.立即更新情景模式 -&gt; 应用选项 保存设置。 情景模式说明： proxy 所有URL都走代理模式 auto switch 自动根据URL判断是否走代理 4.干货分享 自由上网 逗比根据地 SSR 账号 老D博客]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[lnmp access denied解决方案]]></title>
    <url>%2F2018%2F05%2F12%2Flnmp%20access%20denied%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%2F</url>
    <content type="text"><![CDATA[前提：lnmp安装完成后，访问页面出现access denied vim /usr/local/nginx/conf/vhost/xxx.conf 添加三行，如下 123456789101112131415161718192021222324252627282930313233343536373839server &#123; listen 8000; server_name alitong.com; access_log off; index index.html index.htm index.php; root /code/ali_childrens_electric_business_live; include /usr/local/nginx/conf/rewrite/ecshop.conf; #error_page 404 /404.html; #error_page 502 /502.html; #允许跨域，仅测试开放 location / &#123; add_header Access-Control-Allow-Origin *; &#125; location ~ [^/]\.php(/|$) &#123; #增加下面三行 fastcgi_split_path_info ^(.+\.php)(/?.+)$; fastcgi_param PATH_INFO $fastcgi_path_info; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; #fastcgi_pass remote_php_ip:9000; fastcgi_pass unix:/dev/shm/php-cgi.sock; fastcgi_index index.php; include fastcgi.conf; &#125; location ~ .*\.(gif|jpg|jpeg|png|bmp|swf|flv|mp4|ico)$ &#123; expires 30d; access_log off; &#125; location ~ .*\.(js|css)?$ &#123; expires 7d; access_log off; &#125; location ~ /\.ht &#123; deny all; &#125;&#125; 重启nginx，解决 1service nginx restart 如果上面操作之后还不行 vim /usr/local/php/etc/php.ini 123#yyp复制一行备份cgi.fix_pathinfo=1;cgi.fix_pathinfo=0]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Nginx</tag>
        <tag>MySQL</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu la(n)mp 环境搭建]]></title>
    <url>%2F2018%2F05%2F03%2FUbuntu%20la(n)mp%20%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[安装apache2sudo apt install apache2 安装完成之后使用service apache2 status查看apahce2的状态，使用service apache2 restart重启apache2。 安装nginxsudo apt install nginx 安装好之后，使用 dpkg -S nginx 命令来搜索 nginx相关文件，可以从命令显示结果看出 Nginx默认的安装位置是/etc/nginx目录，其配置文件nginx.conf也是在该目录下，并且在 etc/init.d 下有 nginx的启动程序，该目录下的程序都会在系统开启时启动。 启动 Nginx服务，使用下面两个命令任意一个即可： sudo /etc/init.d/nginx start sudo service nginx start 使用 netstat -anp 则可以看到80端口已经处于 LISTEN状态了。 直接查看80端口可以使用命令：sudo lsof -i :80 在浏览器输入 127.0.0.1后，就可以看见 Nginx的欢迎页面了。 安装php7.0sudo apt install php7.0 安装完成之后可以通过php -v测试环境是否配置正确，或者通过 sudo vim /var/www/html/testphp.php 命令创建testphp.php文件,浏览器输入 http://localhost/testphp.php 进行访问，如果访问正常，则表示php安装成功。 安装mysqlsudo apt install mysql-server 安装过程中记住自己设置的密码。使用mysql -u root -p命令，然后输入自己的密码进行数据库登录。 整合LA(N)MP整合php和mysqlsudo apt install php7.0-mysql 整合php和Apachesudo apt install libapache2-mod-php7.0 sudo service apache2 restart Nginx 与 PHP-FPM集成注意： 在nginx配置文件中修改网站根目录路径 确保nginx 中fastcgi_pass与PHP-fpm监听同一个sock 备份/etc/nginx/sites-available/default文件 sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/default.back PHP-FPM 与 Nginx 通信方式有两种，一种是TCP方式，一种是unix socket 方式。 Unix domain socket 可以使同一台操作系统上的两个或多个进程进行数据通信。Unix domain sockets 的接口和 Internet socket 很像，但它不使用网络底层协议来通信。 服务器压力不大的情况下，tcp 和 socket 差别不大，但在压力比较满的时候，用套接字方式，效果确实比较好。 socket方式： 在 /etc/nginx/sites-available/default 配置文件中（网站根目录也在是这里更改）， Nginx已经为与 PHP-FPM的整合准备好了，只需要将下面这部分改好就可以了。 sudo vim /etc/nginx/sites-available/default 12345678910111213# Add index.php to the list if you are using PHPindex index.html index.htm index.nginx-debian.html; # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000##location ~ \.php$ &#123;# include snippets/fastcgi-php.conf;## # With php7.0-cgi alone:# fastcgi_pass 127.0.0.1:9000;# # With php7.0-fpm:# fastcgi_pass unix:/run/php/php7.0-fpm.sock;#&#125; 修改为 1234567891011121314# Add index.php to the list if you are using PHP(在下面条目中添加index.php)index index.html index.htm index.nginx-debian.html index.php;# pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000#将下面4行前面的#号去掉，启动支持php模块#location ~ \.php$ &#123; include snippets/fastcgi-php.conf;## # With php7.0-cgi alone:# fastcgi_pass 127.0.0.1:9000;# # With php7.0-fpm: fastcgi_pass unix:/run/php/php7.0-fpm.sock;&#125; 然后再修改 PHP-FPM的配置文件 /etc/php/7.0/fpm/pool.d/www.conf ，(大概36行)如下: sudo vim /etc/php/7.0/fpm/pool.d/www.conf ; 与 Nginx监听同一个 sock listen = /run/php/php7.0-fpm.sock sock文件路径为 /run/php/php7.0-fpm.sock 。 配置好后重启服务： sudo service nginx restart sudo service php7.0-fpm restart 验证环境Apache(Nginx)默认的网站根目录位于 /var/www/html/ ,进入这个目录，并创建 info.php 12&lt;?php phpinfo(); 在浏览器中输入 http://localhost/info.php 。 排错如果 http://localhost/info.php 页面空白，请尝试 Ctrl+F5 强制刷新页面。如果依然空白，说明php和apache之间还需要一些配置编辑 /etc/apache2/apache2.conf123&lt;FilesMatch \.php$&gt;SetHandler application/x-httpd-php&lt;/FilesMatch&gt; 重启Apache sudo service apache2 restart 刷新 http://localhost/info.php 。此时应该可以看见phpinfo中的内容了。 安装phpmyadmin参考资料：https://www.digitalocean.com/community/tutorials/how-to-install-and-secure-phpmyadmin-on-ubuntu-16-04 sudo apt-get install phpmyadmin php-mbstring php-gettext，安装的过程中选择apache2。 安装完成之后使用如下两个命令修改支持模块:sudo phpenmod mcryptsudo phpenmod mbstring修改完成之后sudo systemctl restart apache2重启apache2服务器。在浏览器输入http://localhost/phpmyadmin/，进入熟悉的页面。一切OK。 phpstorm安装官方下载地址：https://www.jetbrains.com/phpstorm/download/#section=linux-version 安装包下载完成之后，提取到你想要安装的位置，然后进入bin目录，输入./phpstorm.sh打开应用。]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Apache</tag>
        <tag>Nginx</tag>
        <tag>PHP</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PHPStorm 修改自动保存为Ctrl+S]]></title>
    <url>%2F2018%2F04%2F15%2FPHPStorm%20%E4%BF%AE%E6%94%B9%E8%87%AA%E5%8A%A8%E4%BF%9D%E5%AD%98%E4%B8%BACtrl%2BS%2F</url>
    <content type="text"><![CDATA[进入设置 File -&gt; Settings 使用换行，字体设置 找到 Editor -&gt; General 勾选Use soft wraps in editor 找到 Editor -&gt; Font 字体设置Liberation Mono，字体大小16 取消自动保存 找到 Appearance &amp; Behavior -&gt; System Settings，取消选中下面两项 开启未保存文件*号标记 找到 Editor -&gt; General -&gt; Editor Tabs 勾选下面选项 自动识别模板引擎文件 找到 Editor -&gt; File Types 在Smarty下添加*.dwt]]></content>
      <categories>
        <category>PHPStorm</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>PHPStorm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VirtualBox CentOS7 Mini 安装增强工具]]></title>
    <url>%2F2018%2F04%2F12%2FVirtualBox%20CentOS7%20Mini%20%E5%AE%89%E8%A3%85%E5%A2%9E%E5%BC%BA%E5%B7%A5%E5%85%B7%2F</url>
    <content type="text"><![CDATA[安装增强工具 安装相关依赖 12# yum install vim gcc kernel kernel-devel bzip2 -y# reboot 点击虚拟机菜单栏 =&gt; 设备 =&gt; 安装增强功能 123# mount /dev/cdrom /mnt# cd /mnt# ./VBoxLinuxAdditions.run 打开 VirtualBox 界面，选择对应的虚拟系统进行”设置”，选中设置窗口中的最后一项”共享文件夹”，再选中”固定分配”，右键单击并确定共享文件夹的路径，下面的复选框一个都不用勾选，最后”确定”。启动虚拟系统，进入系统以后，执行以下命令来挂载共享文件夹：mount -t vboxsf share /share，其中 share 为共享文件夹的名字，/share 表示当前挂载到 share 目录下，如果没有share目录请自行创建 mkdir /share。如果需要取消挂载，可以直接使用命令：umount -f /share。 实现开机自动挂载 1.适用于CentOS7/6 123# vim ~/.bashrc// 在最后添加一行# mount -t vboxsf share /share 2.只适用于CentOS6 123# vim /etc/rc.d/rc.local// 在文件的最后面加上挂载命令# mount -t vboxsf share /share VirtualBox Win7虚拟机无法识别U盘问题解决方法1.首先需要一个USB用户组，可以用vboxusers这个在安装VirtualBox的时候产生的用户组，把你使用的这个用户加到vboxusers组中，确保该用户是否有权限去读写usbfs这个文件系统 1234$ cat /etc/group | grep vboxusersvboxusers:x:127:$ whoamiocean 2.把ocean用户加到vboxusers组中，后面的ocean就是你自己的用户名 1$ sudo adduser ocean vboxusers 3.重启电脑，启动Virtualbox，确认在virtualbox管理器中，USB设备的enable usb controler 、enable usb2.0 controler打勾。Win7启动后，右击右下角USB设备符号，在Setting中，选择USB Massage相关的选项，就会自动安装驱动，驱动安装成功后，win7下成功挂载U盘。 注意：U盘插入宿主机usb接口必须是usb2.0，如果为3.0虚拟机无法识别]]></content>
      <categories>
        <category>VirtualBox</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>VirtualBox</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PHP解析post请求发送的json数据]]></title>
    <url>%2F2018%2F04%2F12%2FPHP%E8%A7%A3%E6%9E%90post%E8%AF%B7%E6%B1%82%E5%8F%91%E9%80%81%E7%9A%84json%E6%95%B0%E6%8D%AE%2F</url>
    <content type="text"><![CDATA[前端请求json数据 1234&#123; cat_id:6, "live_cat":"is_hot"&#125; 后台解析json数据转换为数组 1234567891011&lt;?phpfunction receive_json_to_array()&#123; $json = file_get_contents('php://input'); //加true转换为数组，不加转换为对象 $arr = json_decode($json, true); return $arr;&#125;$arr = receive_json_to_array();echo $arr['cat_id']; //输出 6echo $arr['live_cat']; //输出 is_hot]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>PHP</tag>
        <tag>json</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Apache/Nginx重写URL配置]]></title>
    <url>%2F2018%2F04%2F10%2FApache%26Nginx%E9%87%8D%E5%86%99URL%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[作者系统是Ubuntu，CentOS及其他linux发行版请自行变更 PHP框架是ThinkPHP5.0，官方文档说的有些模糊，所以自行补充了一下 有错误欢迎随时指出 可以通过URL重写隐藏应用的入口文件index.php,下面是相关服务器的配置参考： [Apache]1.启用 rewrite 模块 123sudo a2enmod rewrite#或者sudo ln -s /etc/apache2/mods-available/rewrite.load /etc/apache2/mods-enabled/rewrite.load 2.编辑配置文件 /etc/apache2/apache2.conf，找到自己web根目录对应的位置 12345&lt;Directory /var/www/&gt;Options Indexes FollowSymLinksAllowOverride NoneRequire all granted&lt;/Directory&gt; 3.将 AllowOverride None 改为 AllowOverride All 4.重启服务 sudo service apache2 restart 5.把下面的内容保存为 .htaccess 文件放到应用入口文件的同级目录下(默认已创建，如果没有自己创建) 12345678&lt;IfModule mod_rewrite.c&gt;Options +FollowSymlinks -MultiviewsRewriteEngine onRewriteCond %&#123;REQUEST_FILENAME&#125; !-dRewriteCond %&#123;REQUEST_FILENAME&#125; !-fRewriteRule ^(.*)$ index.php?/$1 [QSA,PT,L]&lt;/IfModule&gt; [Nginx]在Nginx低版本中，是不支持PATHINFO的，但是可以通过在Nginx中配置转发规则实现， 编辑文件 /etc/nginx/sites-available/default： 12345678910server &#123; // …..省略部分代码 root /var/www/html; //找到这个模块，然后填入下面的配置&#125; location / &#123; // …..省略部分代码 if (!-e $request_filename) &#123; rewrite ^(.*)$ /index.php?s=/$1 last; break; &#125;&#125; 其实内部是转发到了ThinkPHP提供的兼容URL，利用这种方式，可以解决其他不支持PATHINFO的WEB服务器环境。 如果你的应用安装在二级目录，Nginx的伪静态方法设置如下，其中 /tp5/public/ 是所在的目录名称。12345location /tp5/public/ &#123; if (!-e $request_filename)&#123; rewrite ^/tp5/public/(.*)$ /tp5/public/index.php?s=/$1 last; &#125;&#125; 原来的访问URL： http://serverName/index.php/模块/控制器/操作/[参数名/参数值...] 设置后，我们可以采用下面的方式访问： http://serverName/模块/控制器/操作/[参数名/参数值...] 如果你没有修改服务器的权限，可以在 index.php 入口文件做修改，这不是正确的做法，并且不一定成功，视服务器而定，只是在框架执行前补全 PATH_INFO 参数 1$_SERVER['PATH_INFO'] = $_SERVER['REQUEST_URI' ]; 最后重启服务器 1sudo service nginx restart]]></content>
      <categories>
        <category>Nginx</category>
        <category>Apache</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Apache</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL Access denied for user 'root'@'localhost' 解决方法]]></title>
    <url>%2F2018%2F04%2F10%2FMySQL%20Access%20denied%20for%20user%20'root'%40'localhost'%20%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[执行 mysql -uroot -ppassword 出现如下错误 ERROR 1045 (28000): Access denied for user &apos;root&apos;@&apos;localhost&apos; 解决方法 停止mysql 123# service mysql stop//or# /usr/local/mysql/support-files/mysql.server stop 安全模式启动 123//找到mysqld_safe所在位置# find /usr/local/mysql -name &quot;mysqld_safe&quot;# mysqld_safe --skip-grant-tables --skip-networking &amp; 安全模式进入mysql 123# mysql -u root//password替换为你要修改的密码mysql&gt; UPDATE mysql.user SET PASSWORD=PASSWORD(&apos;password&apos;) WHERE USER=&apos;root&apos;; 启动mysql，问题解决 123# service mysql start//or# /usr/local/mysql/support-files/mysql.server start]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux Composer安装，配置国内镜像]]></title>
    <url>%2F2018%2F03%2F07%2FLinux%20Composer%E5%AE%89%E8%A3%85%EF%BC%8C%E9%85%8D%E7%BD%AE%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F%2F</url>
    <content type="text"><![CDATA[安装 Composer 12wget https://dl.laravel-china.org/composer.phar -O /usr/local/bin/composerchmod a+x /usr/local/bin/composer Composer 镜像加速 一、全局配置 1composer config -g repo.packagist composer https://packagist.laravel-china.org 二、局部配置(仅限当前工程使用镜像，去掉 -g 即可) 1composer config repo.packagist composer https://packagist.laravel-china.org 全局配置信息(查看[repositories.packagist.org.url]表示当前镜像地址) 1composer config -gl 取消镜像 1composer config -g --unset repos.packagist 查看当前版本 1composer -v 升级 composer 版本 1composer selfupdate]]></content>
      <categories>
        <category>Composer</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>PHP</tag>
        <tag>Composer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PHPStorm常用插件]]></title>
    <url>%2F2017%2F09%2F28%2FPHPStorm%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[phpstorm插件安装打开phpstorm，选择File-&gt;Settings-&gt;Plugins，在搜索框输入想安装的插件名称(演示：abcd)，如果本地没有，会出现search in repositories 点击之后选择install安装，然后关闭页面 返回勾选刚刚安装的插件即可（默认安装后会自动勾选） phpstorm的常用插件toolTranslation Translation是一个翻译插件，支持中英互译、单词朗读 github A8Translate 一款翻译插件github .ignore 忽略文件支持(e.g .gitignore (GIT), .hgignore (Mercurial), .npmignore (NPM), .dockerignore (Docker) 等)github BashSupport bash support EditorConfig 项目的 .editorconfig 支持 CodeGlance 可以在右侧生成一个类似于 sublime 的文档小地图 RegexpTester 正则表达式测试工具 editorIdeaVim vim 快捷键支持 AceJump 代码快速跳转 github databaseDatabase navigator 数据库工具 phpPHP Advanced AutoComplete php的高级自动补全 PHP Toolbox php工具增强 github PHP Annotations php 注释增强工具 github Laravel Plugin laravel 框架支持 PHP composer.json support composer.json 支持 Php Inspections (EA Extended) 这个项目是一个静态代码分析工具 github golangGo golang语言支持 Go language support golang 语言支持 frontendJS Toolbox js 支持 NodeJs NodeJs 支持 vue-for-idea Support for Vue. Vue.js Support for Vue.js otherProtobuf support Protobuf Support Plugin github]]></content>
      <categories>
        <category>PHPStorm</category>
      </categories>
      <tags>
        <tag>PHPStorm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux 安装 nvm]]></title>
    <url>%2F2017%2F09%2F16%2FLinux%20%E5%AE%89%E8%A3%85%20nvm%2F</url>
    <content type="text"><![CDATA[nvm是专门的node版本管理工具，可以在同一台机器上管理不同node版本。 github地址: https://github.com/creationix/nvm 卸载已安装到全局的 node/npm如果之前是在官网下载的 node 安装包，运行后会自动安装在全局目录，其中 node 命令在 /usr/local/bin/node ，npm 命令在全局 node_modules 目录中，具体路径为 /usr/local/lib/node_modules/npm 安装 nvm 之后最好先删除下已安装的 node 和全局 node 模块： 12345678#查看已经安装在全局的模块，以便删除这些全局模块后再按照不同的 node 版本重新进行全局安装npm ls -g --depth=0#删除全局 node_modules 目录sudo rm -rf /usr/local/lib/node_modules#删除 nodesudo rm /usr/local/bin/node#删除全局 node 模块注册的软链cd /usr/local/bin &amp;&amp; ls -l | grep "../lib/node_modules/" | awk '&#123;print $9&#125;'| xargs rm 安装 nvm(安装完成后需要重启终端)Github：https://github.com/creationix/nvm 12345curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | zsh# 或者wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | zsh# 更换 nvm 淘宝源echo "export NVM_NODEJS_ORG_MIRROR=https://npm.taobao.org/mirrors/node" &gt;&gt; ~/.zshrc 安装 node 12345678910# 最新 lts 版本nvm install --lts# 更换 npm 淘宝源npm config set registry https://registry.npm.taobao.org# 查看当前源npm config get registry# 补充(yarn安装，查看源，更换源)npm install -g yarnyarn config get registryyarn config set registry https://registry.npm.taobao.org 安装切换各版本 node/npm123456789101112131415161718# 最新 LTS 版本nvm install --lts#安装 8.11.3 版本nvm install 8.11.3#安装 4.2.2 版本nvm install 4.2.2# 特别说明：以下模块安装仅供演示说明，并非必须安装模块#切换至 8.11.3 版本nvm use 8#安装 mz-fis 模块至全局目录，安装完成的路径是 /Users/&lt;你的用户名&gt;/.nvm/versions/node/v8.11.3/lib/mz-fisnpm install -g mz-fis#切换至 4.2.2 版本nvm use 4#安装 react-native-cli 模块至全局目录，安装完成的路径是 /Users/&lt;你的用户名&gt;/.nvm/versions/node/v4.2.2/lib/react-native-clinpm install -g react-native-cli#设置默认 node 版本为 8.11.3nvm alias default 8.11.3 使用 nvm --help 查看是否安装成功。 使用 nvm ls 查看已经安装的版本。 使用 nvm ls-remote 查看所有远端版本。 使用 nvm install 安装某个版本，如 nvm install v8.11.3 。 使用 nvm use 切换到某个版本，如 nvm use v8.11.3 使用 8.11.3 ， nvm use system 使用系统版本。 使用 .nvmrc 文件配置项目所使用的 node 版本如果你的默认 node 版本（通过 nvm alias 命令设置的）与项目所需的版本不同，则可在项目根目录或其任意父级目录中创建 .nvmrc 文件，在文件中指定使用的 node 版本号，例如： 1234cd &lt;项目根目录&gt; #进入项目根目录echo 4 &gt; .nvmrc #添加 .nvmrc 文件nvm use #无需指定版本号，会自动使用 .nvmrc 文件中配置的版本node -v #查看 node 是否切换为对应版本 Ps:类似的工具也有n命令，n 命令是作为一个 node 的模块而存在，而 nvm 是一个独立于 node/npm 的外部 shell 脚本， 因此 n 命令相比 nvm 更加局限。由于 npm 安装的模块路径均为 /usr/local/lib/node_modules ， 当使用 n 切换不同的 node 版本时，实际上会共用全局的 node/npm 目录。所以还是推荐使用nvm。 github地址：https://github.com/tj/n]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>nvm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[UEFI启动模式下安装Ubuntu教程]]></title>
    <url>%2F2017%2F09%2F11%2FUEFI%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F%E4%B8%8B%E5%AE%89%E8%A3%85Ubuntu%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[制作Ubuntu启动盘个人习惯于使用U盘安装的方式，简单快捷。那么准备好一个空的U盘，首先去Ubuntu官网下载最新的Ubuntu 16.04的ISO映像文件，然后需要下载制作启动盘的工具，这里建议使用Ubuntu官方主推的工具Rufus，详见网页：How to create a bootable USB stick on Windows ，使用该工具的时候，有三种模式可选，到底是用那种模式取决于电脑的配置，可以百度一下电脑主板是不是UEFI以及硬盘分区是MBR还是GPT，确实不清楚的就选第一项。当然，有同学也喜欢使用软碟通等刻盘工具，这也是没问题的，甚至有资料说直接解压到空的U盘也能行。总之很多方式都能做成系统启动盘。 为Ubuntu系统分配硬盘空间 接下来，我们需要为Ubuntu在硬盘上分配足够的空间，一般来说需要至少100GB的空间才用的舒服。右键点击windows键（windows+X）选择磁盘管理，然后选择你需要进行分区的磁盘，点击右键，选择“压缩卷”，设置需要压缩空间的大小，点击压缩，等一会，空间就压缩好了，会出现一个未分配空间，这就是我们刚才压缩出来的空间，到这里分配空间就ok了。 说明一下，Ubuntu系统总共需要四个磁盘空间：根目录、home目录、交换空间和启动引导空间。有种比较老的方法是在Windows系统中提前划分好这四个空间再安装，私以为这还不如直接在Ubuntu安装界面中划分来的方便，也能减少安装出错的可能。 安装Ubuntu系统关闭Windows的快速启动，重启电脑。按住Win + X(请记住这个万能的组合)，选择“电源选项”，依次执行：选择电源按钮的功能 - 更改当前不可用的设置 - 启用快速启动（把勾去掉）-保存修改 把启动盘插入笔记本电脑，重启系统，进入BIOS，首先修改BIOS选项，需要确保boot mode为UEFI，以及关闭secure boot（很重要，如不设置，可能导致装完nvidia显卡驱动后无限重启）。 然后修改启动项。在明确支持UEFI启动的笔记本电脑中，BIOS启动项可以看到两个U盘，那其实是一个U盘的两种模式，这里需要选择带有“UEFI”字样的U盘作为第一启动项。 保存设置并退出BIOS，就可以进入安装界面了。一般来说，会出现直接安装和试用的选项。新手可以点击试用“Try Ubuntu”，体验下该系统，然后还能继续安装。 首先应该是选择语言，直接照着中文去就行了。在“准备安装”菜单，勾选下面的“为图形和无线硬件，以及 MP3 和媒体安装第三方软件”，上面的“安装Ubuntu时下载更新”不用勾选，这些东西以后可以通过系统更新来安装。然后进入“安装类型”菜单，这里选择“其他选项”。 接下来就是最重要的安装分区了，在界面中可以看到不少分区，我们用鼠标拖到最后，选择刚才分配的200GB空闲空间，鼠标双击或者点击“+”按钮，就从这里依次分出四个子空间。 分配启动引导空间如果没有引导，就无法进入系统。我们选中那200GB空闲空间，鼠标双击，或者点击下面的加号，首先分配引导的空间，选中主分区（或逻辑分区）和空间起始位置。建议这部分最小也要给到500MB，系统引导文件都会在里面，我给的2048MB，它的作用和boot引导分区一样，但是boot引导是默认grub引导的，而efi显然是UEFI引导的。不要按照那些老教程去选boot引导分区，也就是最后你的挂载点里没有“/boot”这一项，否则你就没办法UEFI启动两个系统了。 注意：选择“保留BIOS启动区域”或者“efi系统分区”都可以，这里分区类型选择的主分区，Linux不区分逻辑分区和主分区，选择逻辑分区也没有问题。 有同学可能要问了，为什么选择这个“保留BIOS启动区域”，而不是挂载“/boot”？这里需要说明下，因为该笔记本是支持UEFI的，之前博主就是采用的传统方法，挂载“/boot”，这样做的结果是，无论如何无法进入刚安好的Ubuntu系统，就连EasyBCD也不起作用，找不到Ubuntu的引导启动项。后来看到了一篇文章，大意说是UEFI启动模式下，Ubuntu的引导挂载应该是biosgrub，否则出错。在博主亲自试验之后，证实了这个说法。 当然，如果笔记本不支持UEFI模式启动，使用的是CSM兼容模式的话，倒是可以用挂载“/boot”的方式，这也实验成功过。 分配交换空间swap交换空间，选择逻辑分区和空间起始位置，所谓交换空间，也就是虚拟内存，可以小幅度提示系统的运行性能。由于本机的内存大小是8GB，所以可以分配相同大小的虚拟内存。（物理内存小于等于4G，虚拟内存建议分配物理内存的2倍大小） 分配根目录空间根目录“/”，类型为EXT4日志文件系统，选中逻辑分区和空间起始位置，根目录就是系统盘，主要存放操作系统文件和安装的第三方软件，无法扩展，所以不能太小，建议最低也要给到30GB，这里应人所求，分配了70GB的磁盘空间给根目录。 分配/home目录空间挂载“/home”，类型为EXT4日志文件系统，选中逻辑分区和空间起始位置，/home目录就是用户能自行操作的空间，可大可小，当然安装到这里，剩下的磁盘空间（大约120GB）都要给/home目录了，如下图所示。 选择引导器分配好上述四个空间后，我们还要选择“安装启动引导器的设备”，由于刚才biosgrub的磁盘符号为/dev/sda4，所以就选择了该磁盘。 一切就绪之后，点击“现在安装”，然后会让你确认分区是否正确，无误后就可以继续安装了。 接着填写用户名和密码，这里建议尽可能简短，因为在以后的时间你会无数次输入它们。 最后选择“Shanghai”时区，系统开始自动安装了，你可以喝杯咖啡。 调整BIOS启动顺序（可选）安装完成后，重启电脑，还是需要进BIOS，设置Ubuntu为第一启动项，这样就可以使用GNU GRUB作为操作系统选择工具，就不用再安装easyBCD等第三方引导软件。我默认是进入Ubuntu，想要进入Windows 10需要用方向键选择后面的的选项，这个顺序也是可以改的。 —————–分割线—————— 非UEFI模式部分华硕华硕和惠普笔记本在BIOS中找不到boot mode选项，也无法直接看到UEFI的相关字样。那么这种笔记本怎么安装Ubuntu呢？ 简要说下，就是制作启动盘还是一样，然后BIOS中的设置会不同，我们需要设置launch csm（兼容模式）为开启，secure boot同样需要关闭。然后选择不带“UEFI”字样的U盘作为第一启动项。 安装Ubuntu的过程中，只存在引导部分不同，和上面相反，这里不选择“保留BIOS启动区域”，而是选择“逻辑分区”-&gt;“Ext4 日志文件系统”挂载“/boot”，然后启动引导器可以直接使用Ubuntu所在的整个硬盘（比如WestData机械硬盘，亲测通过），不用刻意选择/boot所在盘符。 如此这般，也能安装好Ubuntu操作系统，此时就找不到“Ubuntu”这个启动项，那我们可以设置WestData机械硬盘为第一启动项，就能使用GNU GRUB作为操作系统选择工具。也可以去安装EasyBCD，但此时需要设置Windows所在盘为第一启动项。]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Win10关闭security boot的方法]]></title>
    <url>%2F2017%2F09%2F10%2FWin10%E5%85%B3%E9%97%ADsecurity%20boot%E7%9A%84%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[如何关闭security boot？许多使用win10的用户在调配某些系统设置的时候需要关闭“security boot”。下面小编给大家分享下关闭BIOS中security boot 选项的方法，这里以联想Y480笔记本为例。 步骤一：关闭快速启动1、在开始菜单中单击右键，选择“电源选项”； 2、点击【选择电源按钮的功能】； 3、点击【更改当前不可用的设置】，将下面“启用快速启动”前面的勾去掉，点击保存修改。 步骤二：修改bios设置1、重启计算机，不停按F2进入到bios中； 2、使用方向键选定【Security】选项卡，在下面我们可以找到【Secure Boot】； 3、选择“Secure Boot”项，按下回车键，选择“Disabled”按下回车键确认，按下“F10”，点击Y保存并重启计算机即可。 若其他型号的笔记本或电脑找不到该选项，请咨询对应品牌官方客服即可。]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>配置</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOS安装python3.6和第三方库]]></title>
    <url>%2F2017%2F09%2F07%2FCentOS%E5%AE%89%E8%A3%85Python3.6%E5%92%8C%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%2F</url>
    <content type="text"><![CDATA[如果本机安装了python2，尽量不要管他，使用python3运行python脚本就好，因为可能有程序依赖目前的python2环境， 比如yum！！！ 不要动现有的python2环境！ 一、安装python3.6 1.安装openssl静态库，若未装该静态库会导致python3自带的pip3安装失败 1yum install -y openssl-static 编译python3源码123yum install -y gcc wgetyum groupinstall "Development tools"yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel 2.下载Python3 https://www.python.org/ftp/python 1wget https://www.python.org/ftp/python/3.6.3/Python-3.6.3.tgz 3.安装python3 我个人习惯安装在 /usr/local/python3（具体安装位置看个人喜好），创建目录： 1mkdir -p /usr/local/python3 解压下载好的 Python-3.x.x.tgz 包(具体包名因你下载的Python具体版本不同而不同，如：我下载的是Python3.6.3.那我这就是Python-3.6.3.tgz)12tar -zxvf Python-3.6.3.tgzchmod -R 777 Python-3.6.3 4.进入解压后的目录，编译安装。 1234cd Python-3.6.3./configure --prefix=/usr/local/python3makemake install 5.建立python3的软链 1ln -s /usr/local/python3/bin/python3 /usr/bin/python3 如果软链接已存在，先删除原链接，如下： 1rm -rf [filename] 6.并将 /usr/local/python3/bin 加入 PATH 12345678910111213vim ~/.bash_profile# 添加下面内容# Get the aliases and functionsif [ -f ~/.bashrc ]; then . ~/.bashrcfi# User specific environment and startup programsPATH=$PATH:$HOME/bin:/usr/local/python3/binexport PATH 修改完记得执行下面的命令，让上一步的修改生效： 123456source ~/.bash_profile#检查Python3及pip3是否正常可用：python3 -V#Python 3.6.3pip3 -V#pip 9.0.1 from /usr/local/python3/lib/python3.6/site-packages (python 3.6) 7.不行的话在创建一下 pip3 的软链接(我也不清楚这一步有什么用) 1ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3 8.安装pip 12wget https://bootstrap.pypa.io/get-pip.pypython3 get-pip.py 二、安装pip以及setuptools 毕竟丰富的第三方库是python的优势所在，为了更加方便的安装第三方库，使用pip命令，我们需要进行相应的安装。 1、安装pip前需要前置安装setuptools 命令如下： 123456789wget --no-check-certificate https://pypi.python.org/packages/source/s/setuptools/setuptools-19.6.tar.gz#md5=c607dd118eae682c44ed146367a17e26tar -zxvf setuptools-19.6.tar.gzcd setuptools-19.6python3 setup.py buildpython3 setup.py install 如果前面没布置好环境的话，就要苦逼一下了： 报错： RuntimeError: Compression requires the (missing) zlib module 我们需要在linux中安装zlib-devel包，进行支持。 1234yum install zlib-devel#需要对python3.5进行重新编译安装。cd python3.6.1make &amp;&amp; make install 又是漫长的编译安装过程。 重新安装setuptools12python3 setup.py buildpython3 setup.py install 2、安装pip 命令如下： 123456789wget --no-check-certificate https://pypi.python.org/packages/source/p/pip/pip-8.0.2.tar.gz#md5=3a73c4188f8dbad6a1e6f6d44d117eebtar -zxvf pip-8.0.2.tar.gzcd pip-8.0.2python3 setup.py buildpython3 setup.py install 如果没有意外的话，pip安装完成。 如果没有搞好环境的话，会碰见亲切的报错： 123pip3 install paramiko#报这个错pip is configured with locations that require TLS/SSL, however the ssl module in Python is not available. 然后开始进行如下操作 1234yum install opensslyum install openssl-develcd python3.6.1make &amp;&amp; make install]]></content>
      <categories>
        <category>Python3</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Python3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PHP在Linux下出现HTTP ERROR 500解决方法]]></title>
    <url>%2F2017%2F08%2F26%2FPHP%E5%9C%A8Linux%E4%B8%8B%E5%87%BA%E7%8E%B0500%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[如图，出现HTTP ERROR 500说明你的php代码里可能有错，默认php的错误不会输出到浏览器 修改配置文件 sudo vim /etc/php.ini #CentOS sudo vim /etc/php/7.0/fpm/php.ini #Ubunbu 把display_errors = Off 改成 display_errors = On，建议开发完之后关闭，只在开发的时候开启此项 1234567891011#向上搜索 ?display_errors#向下搜索 /display_errors# n 下一个 N 上一个vi /etc/php.ini#找到display_errorsdisplay_errors = Off改成display_errors = On 重启apache 刷新页面看到显示错误信息，我们看到错误提示为require_once(): Failed opening required，打开文件请求失败，由于Linux下”/“表示根目录，我这是从windows直接移植过来的，将前面的”/“去掉。 #重启服务器apache service httpd restart 如果出现 “PHP Fatal error: Uncaught think\exception\ErrorException: mkdir(): Permission denied in…” 实际原因是/var/www/html/mvc_article/目录是由httpd服务的用户来读写，默认不是apache这个账户来读写，所以就抛出了没有创建目录的权限，类似写这个目录的权限也没有，需要向下面这样改变mvc_article的权限(或者读写用户和组) #此文件夹以及目录下的所有文件和文件夹都赋予777权限 chmod -R 777 文件夹 或者 #单个赋予权限 chmod 777 文件夹/文件名 最后，大功告成~ 参考： http://blog.csdn.net/zhengzizhi/article/details/74845190]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Win10修改编辑hosts文件没有权限保存解决方法]]></title>
    <url>%2F2017%2F06%2F11%2FWin10%E4%BF%AE%E6%94%B9%E7%BC%96%E8%BE%91hosts%E6%96%87%E4%BB%B6%E6%B2%A1%E6%9C%89%E6%9D%83%E9%99%90%E4%BF%9D%E5%AD%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[Win10无法修改编辑保存hosts文件怎么办?Win10系统默认是没有权限去编辑保存系统里的文件，这也是权限不够才导致修改编辑hosts后无法保存的原因，解决的办法就是把自己的帐户权限给提高就行了。 工具/原料Win10 Win10修改编辑hosts文件无法保存怎么办首先进入Win10系统的hosts文件所在位置，我们直接输入C:\Windows\System32\Drivers\etc后回车就可以打开了，右键hosts文件，选择属性，点击hosts属性对话框里的“高级”，如下图所示。 在hosts的高级安全设置界面点击更改权限，如下图所示。 在新弹出的对话框里点击添加按钮，如下图所示。 点击hosts的权限项目窗口下面的主体的“选择主体”，如下图所示。 点击进入选择用户或组界面，点击高级，如下图所示。 点击高级后，我们接着在点击立即查找，然后在查找结果里找到当前用户的账号，选中后点击确定，如下图所示。 在选择用户或组界面里点击确定，如下图所示。 将hosts的权限项目界面下的基本权限的所以项目都勾选上，然后点击确定，如下图所示。 权限添加成功后，直接点击确定，如下图所示。 点击后，系统提示你将要更改系统文件夹的权限设置，这样会降低计算机的安全性，并导致用户访问文件时出现问题。要继续吗？我们点击是。如下图所示。]]></content>
      <categories>
        <category>windows10</category>
      </categories>
      <tags>
        <tag>hosts</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何修改MySQL数据库引擎为INNODB]]></title>
    <url>%2F2017%2F05%2F07%2F%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%95%E6%93%8E%E4%B8%BAINNODB%2F</url>
    <content type="text"><![CDATA[对于MySQL数据库，如果你要使用事务以及行级锁就必须使用INNODB引擎。如果你要使用全文索引，那必须使用myisam。 INNODB的实用性，安全性，稳定性更高但是效率比MYISAM稍差，但是有的功能是MYISAM没有的。修改MySQL的引擎为INNODB，可以使用外键，事务等功能，性能高。本文主要介绍如何修改MySQL数据库引擎为INNODB，接下来我们开始介绍。 首先修改my.ini，在[mysqld]下加上： default-storage-engine=INNODB 其中的INNODB是要指定的数据库引擎名称。 用sql语句修改已经建成表的引擎： alter table tableName type=InnoDB 下面贴出我的my.ini文件供参考： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263[mysqld] basedir=C:\Program Files\VertrigoServ\Mysql\ datadir=C:\Program Files\VertrigoServ\Mysql\data\ port =3306 key_buffer =64M max_allowed_packet =1M table_cache =128 sort_buffer_size =512K net_buffer_length =8K read_buffer_size =256K read_rnd_buffer_size =512K myisam_sort_buffer_size =68M default-storage-engine=INNODB [mysqldump] quick max_allowed_packet =116M [mysql] no-auto-rehash # Remove the next comment character if you are not familiar with SQL #safe-updates [isamchk] key_buffer =20M sort_buffer_size =20M read_buffer =62M write_buffer =62M [myisamchk] key_buffer =20M sort_buffer_size =20M read_buffer =62M write_buffer =62M [mysqlhotcopy] interactive-timeout 按照以上的代码提示操作，我们就能够成功地修改MySQL数据库引擎为INNODB了。]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GitHub+Hexo博客多终端同步]]></title>
    <url>%2F2017%2F04%2F05%2FGitHub%2BHexo%E5%8D%9A%E5%AE%A2%E5%A4%9A%E7%BB%88%E7%AB%AF%E5%90%8C%E6%AD%A5%2F</url>
    <content type="text"><![CDATA[我们发现用Github+Hexo搭建了自己的博客，但是回到宿舍打开电脑时遇到了一个问题，我想在不同的终端进行github+Hexo的博客发布更新该如何进行呢，在Google中搜了一些教程，并自身进行了简化与实践！ 主体的思路是将博文内容相关文件放在Github项目中master中，将Hexo配置写博客用的相关文件放在Github项目的hexo分支上，这个是关键，多终端的同步只需要对分支hexo进行操作。下面是详细的步骤讲解： 1.准备条件 安装Node,Git,Hexo环境，完成Github与本地Hexo的对接。 配置好这些，就可以捋起袖子大干一场了！ 2.在其中一个终端操作，push本地文件夹Hexo中的必要文件到yourname.github.io的hexo分支上 在利用Github+Hexo搭建自己的博客时，新建了一个Hexo的文件夹，并进行相关的配置，这部分主要是将这些配置的文件托管到Github项目的分支上，其中只托管部分用于多终端的同步的文件： 注意：themes文件夹里面的主题是不会add的，所以可以先将主题文件压缩（如我的是next.tar.gz），然后add，之后同步到本地之后再解压，目前还没有找到别的办法 12345678910111213//初始化本地仓库git init//将目录下的所有文件添加到本地仓库git add . git commit -m "Blog Source Hexo"//新建hexo分支git branch hexo//切换到hexo分支上git checkout hexo//将本地与Github项目对接git remote add origin git@github.com:oceandlnu/oceandlnu.github.io.git//push到Github项目的hexo分支上git push origin hexo 完成之后的效果图为： 这样你的github项目中就会多出一个Hexo分支，这个就是用于多终端同步关键的部分。 3.另一终端完成clone和push更新 此时在另一终端更新博客，只需要将Github的hexo分支clone下来，进行初次的相关配置，详细配置点击GitHub+Hexo博客多终端同步[准备工作] 123456789101112131415//将Github中hexo分支clone到本地git clone -b hexo git@github.com:oceandlnu/oceandlnu.github.io.git //切换到刚刚clone的文件夹内cd oceandlnu.github.io//注意，这里一定要切换到刚刚clone的文件夹内执行，安装必要的所需组件，不用再hexo initnpm installcd themetar zxvf next.tar.gz//新建一个.md文件，并编辑完成自己的博客内容hexo new post "new blog name"//经测试每次只要更新source中的文件到Github中即可，因为只是新建了一篇新博客git add sourcegit commit -m "XX"//推送到远程仓库，更新hexo分支git push origin hexo 12hexo g -d #push更新完分支之后将自己写的博客对接到自己搭的博客网站上，同时同步了Github中的master 4.不同终端间愉快地玩耍 在不同的终端已经做完配置，就可以愉快的分享自己更新的博客，进入自己相应的文件夹 123456//先pull完成本地与远端的融合git pull origin hexohexo new post " new blog name"git add sourcegit commit -m "XX"git push origin hexo 1hexo g -d 关于Github不熟悉的强烈推荐张哥的Github系列教程我的书籍出版了 另外你可能会遇到一些其他的坑，在这里我没有遇到，大家可以参考一篇博文搭建hexo博客并简单的实现多终端同步 对于于博文的图片托管问题感兴趣的可以我写的参考如何利用Github在Markdown中优雅的插入图片]]></content>
      <categories>
        <category>基本操作</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>GitHub</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GitHub+Hexo博客多终端同步[准备工作]]]></title>
    <url>%2F2017%2F03%2F06%2FGitHub%2BHexo%E5%8D%9A%E5%AE%A2%E5%A4%9A%E7%BB%88%E7%AB%AF%E5%90%8C%E6%AD%A5%5B%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C%5D%2F</url>
    <content type="text"><![CDATA[搭建 Git 环境 搭建 Node.js 环境 安装配置 Hexo GitHub 注册和配置 关联 Hexo 与 GitHub Pages GitHub Pages 地址解析到个人域名 搭建 Git 环境为什么要搭建 git 环境？ - 因为需要把本地的网页和文章等提交到 GitHub 上。Git 是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。 12sudo apt install gitgit --version 出现版本号则说明 Git 环境配置成功，第一步完成！！！ 搭建 Node.js 环境为什么要搭建 node.js 环境？ - 因为 Hexo 博客系统是基于 Node.js 编写的Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境，可以在非浏览器环境下，解释运行 JS 代码。 nvm 安装(安装完成后需要重启终端)12345curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | zsh# 或者wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | zsh# 更换 nvm 淘宝源echo "export NVM_NODEJS_ORG_MIRROR=https://npm.taobao.org/mirrors/node" &gt;&gt; ~/.zshrc 安装 node 12345678910# 最新 lts 版本nvm install --lts# 更换 npm 淘宝源npm config set registry https://registry.npm.taobao.org# 查看当前源npm config get registry# 补充(yarn安装，查看源，更换源)npm install -g yarnyarn config get registryyarn config set registry https://registry.npm.taobao.org 官方安装Node.js 官网：https://nodejs.org/en/ 下载安装包 LTS，根据官方说明文档安装 12node -vnpm -v 出现版本号则说明 Node.js 环境配置成功，第二步完成！！！ 安装配置 HexoHexo 是一个快速、简洁且高效的博客框架，使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 强烈建议你花20分钟区读一读 Hexo 的官方文档：https://hexo.io/zh-cn/ 使用 npm 安装 Hexo：在命令行中输入 1npm install hexo-cli -g 然后你将会看到下图，可能你会看到一个WARN，但是不用担心，这不会影响你的正常使用。 查看Hexo的版本 1hexo -v 到此搭建 Hexo 博客的相关环境配置已经完成，下面开始讲解 Hexo 的相关操作 注意： 如果是多终端hexo博客同步，下面的步骤不用执行了，到这里就结束 如果clone失败，可能是密钥没有配好，可以查看：关联 Hexo 与 GitHub Pages里面的SSH Key配置步骤 GitHub 注册和配置GitHub 是一个代码托管平台，因为只支持 Git 作为唯一的版本库格式进行托管，故名 GitHub。 Github注册：https://github.com/ 创建仓库：Repository name 使用自己的用户名，仓库名规则： 注意：yourname 必须是你的用户名。 1yourname/yourname.github.io 访问 yourname.github.io，如果可以正常访问，那么 Github 的配置已经结束了。 安装 Hexo 完成后，请执行下列命令来初始化 Hexo，用户名改成你的，Hexo 将会在指定文件夹中新建所需要的文件。 123hexo init oceandlnu.github.iocd oceandlnu.github.ionpm install 新建完成后，指定文件夹的目录如下： 1234567891011.├── .deploy #需要部署的文件├── node_modules #Hexo插件├── public #生成的静态网页文件├── scaffolds #模板├── source #博客正文和其他源文件，404、favicon、CNAME 都应该放在这里| ├── \_drafts #草稿| └── \_posts #文章├── themes #主题├── \_config.yml #全局配置文件└── package.json #npm 依赖等 运行本地 Hexo 服务12345hexo server或者hexo s# 如果报错，执行hexo generate 您的网站会在 http://localhost:4000 下启动。如果 http://localhost:4000 能够正常访问，则说明 Hexo 本地博客已经搭建起来了，只是本地哦，别人看不到的。 注意：如果 http://localhost:4000 不能访问，那有可能是端口被占用了，上面的命令加上端口号就行了，如下： 12#5000是你想改成的端口号，不加的话，默认是4000hexo s -p 5000 关联 Hexo 与 GitHub Pages我们如何让本地git项目与远程的github建立联系呢？用 SSH keys 检查是否已生成密钥， cd ~/.ssh，ls 如果有3个文件，则密钥已经生成，id_rsa.pub 就是公钥 12345YANG@DESKTOP-VLST063 MINGW64 /d/hexo/oceandlnu.github.io (master|REBASE 1/2)$ cd ~/.sshYANG@DESKTOP-VLST063 MINGW64 ~/.ssh$ lsid_rsa id_rsa.pub known_hosts 生成SSH keys，输入你自己的邮箱地址 1ssh-keygen -t rsa -C "ocean" 在回车中会提示你输入一个密码，这个密码会在你提交项目时使用，如果为空的话提交项目时则不用输入，我们按回车不设置密码。 添加 SSH Key 到 GitHub 打开 ~/.ssh/id_rsa.pub，此文件里面内容为刚才生成的密钥，准确的复制这个文件的内容，粘贴到 https://github.com/settings/keys 的 new SSH key 中 测试，输入下面的命令，看看设置是否成功，git@github.com的部分不要修改： 1ssh -T git@github.com 如果是下面的反馈：123The authenticity of host ‘github.com (207.97.227.239)’ can’t be established. RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48. Are you sure you want to continue connecting (yes/no)? 不要紧张，输入yes就好，然后会看到： 1Hi oceandlnu! You've successfully authenticated, but GitHub does not provide shell access. 配置Git个人信息 现在你已经可以通过 SSH 链接到 GitHub 了，还有一些个人信息需要完善的。Git 会根据用户的名字和邮箱来记录提交。GitHub 也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的。 12git config --global user.name "oceandlnu"git config --global user.email "136494666@qq.com" 配置 Deployment 在_config.yml文件中，找到Deployment，然后按照如下修改，用户名改成你的： 需要注意的是：冒号后面记得空一格！123456# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: git@github.com:oceandlnu/oceandlnu.github.io.git branch: master 本地文件提交到 GitHub Pages 123456789101112// 删除旧的 public 文件hexo clean// 生成新的 public 文件hexo generate或者hexo g// 开始部署hexo deploye或者hexo d 在浏览器中输入 https://oceandlnu.github.io （用户名改成你的）看到了 Hexo 与 GitHub Pages 已经成功关联了。 注意1：若上面操作失败，则需要提前安装一个扩展： npm install hexo-deployer-git --save 注意2：如果在执行 hexo d 后,出现 error deployer not found:github 的错误（如下），则是因为没有设置好 public key 所致，重新详细设置即可。 1234Permission denied (publickey). fatal: Could not read from remote repository. Please make sure you have the correct access rights and the repository exists. 注意3：怎么避免 .md 文件被解析？ 请查看Hexo 怎么避免 .md 文件被解析？ GitHub Pages 地址解析到个人域名Github Pages 是面向用户、组织和项目开放的公共静态页面搭建托管服 务，站点可以被免费托管在 Github 上，你可以选择使用 Github Pages 默 认提供的域名 github.io 或者自定义域名来发布站点。看着博客的域名是二级域名，总有一种寄人篱下的感觉，为了让这个小窝看起来更加正式，我在阿里云上买了一个域名，打算将博客绑定自己的域名。 进行该绑定过程，其实就是一个重定向的过程。 在 GitHub 仓库的根目录下建立一个 CNAME 的文本文件(注意：没有扩展名)，文件里面只能输入一个你的域名，不能加http:// www.xxxxxx.com 注意：CNAME 一定是在你 Github 项目的 master 根目录下 进入阿里云域名解析地址，添加解析： 1.记录类型选择CNAME2.主机记录填www3.解析线路选择默认4.记录值填yourname.github.io5.TTL值为10分钟6.再添加一个解析，记录类型A7.主机记录填www8.解析线路选择默认9.记录值填你GitHub 的ip地址（在cmd中ping：） ping oceandlnu.github.com 点击保存，等 1 分钟，访问下你自己的域名，一切就ok了。 域名绑定成功，域名解析成功，因此你在浏览中输入 www.xxxxxx.com，或 xxxxxx.com 就可以访问到博客了，输入 oceandlnu.github.io 会重定向到 www.xxxxxx.com。过程：www 的方式，会先解析成 http://xxxx.github.io，然后根据 CNAME 再变成 www 注意：CNAME文件在下次 hexo deploy的时候就消失了，需要重新创建，这样就很繁琐 方法一：每次 hexo d 之后，就去 GitHub 仓库根目录新建 CNAME文件 方法二：在 hexo g 之后， hexo d 之前，把CNAME文件复制到 “\public\” 目录下面，里面写入你要绑定的域名。 方法三（推荐）：将需要上传至github的内容放在source文件夹，例如CNAME、favicon.ico、images等，这样在 hexo d 之后就不会被删除了。 方法四：通过安装插件实现永久保留 $ npm install hexo-generator-cname --save 之后在_config.yml中添加一条 plugins: - hexo-generator-cname 需要注意的是：如果是在github上建立的CNAME文件，需要先clone到本地，然后安装插件，在deploy上去即可。CNAME只允许一个域名地址。 注意1：每次生成的 CNAME 都是 yoursite.com 怎么解决？ 修改 _config.yml 1234url: http://www.xxxxxx.comroot: /permalink: :year/:month/:day/:title/permalink_defaults:]]></content>
      <categories>
        <category>基本操作</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Sublime Text SFTP插件配置]]></title>
    <url>%2F2017%2F02%2F18%2FSublime%20Text%20SFTP%E6%8F%92%E4%BB%B6%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[SFTP 插件。主要功能就是通过 FTP/SFTP 连接远程服务器并获取文件列表，可以选择下载编辑、重命名、删除等等操作，点下载编辑之后，可以打开这个文件进行修改。修改完成之后，保存一下会自动上传到远程的服务器上面，使用这个插件之后，工作效率可以大大提高，下面就来记录一下具体的配置方法。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253&#123; // The tab key will cycle through the settings when first created // Visit http://wbond.net/sublime_packages/sftp/settings for help // sftp, ftp or ftps &quot;type&quot;: &quot;sftp&quot;, &quot;save_before_upload&quot;: true, // 保存后自动上传 &quot;upload_on_save&quot;: true, // 开启时同步远端到本地 &quot;sync_down_on_open&quot;: false, // 同步时跳过删除的文件 &quot;sync_skip_deletes&quot;: false, &quot;sync_same_age&quot;: true, //开启「下载确认」 &quot;confirm_downloads&quot;: false, //开启「同步确认」 &quot;confirm_sync&quot;: true, //开启「覆盖确认」 &quot;confirm_overwrite_newer&quot;: false, &quot;host&quot;: &quot;ip&quot;, &quot;user&quot;: &quot;username&quot;, &quot;password&quot;: &quot;password&quot;, //&quot;port&quot;: &quot;22&quot;, // 远程服务器文件夹路径 &quot;remote_path&quot;: &quot;/web/alexa-master/&quot;, &quot;ignore_regexes&quot;: [ &quot;\\.sublime-(project|workspace)&quot;, &quot;sftp-config(-alt\\d?)?\\.json&quot;, &quot;sftp-settings\\.json&quot;, &quot;/venv/&quot;, &quot;\\.svn/&quot;, &quot;\\.hg/&quot;, &quot;\\.git/&quot;, &quot;\\.bzr&quot;, &quot;_darcs&quot;, &quot;CVS&quot;, &quot;\\.DS_Store&quot;, &quot;Thumbs\\.db&quot;, &quot;desktop\\.ini&quot; ], //&quot;file_permissions&quot;: &quot;664&quot;, //&quot;dir_permissions&quot;: &quot;775&quot;, // 开启设置并发连接数为10，提高同步速度 &quot;extra_list_connections&quot;: 10, &quot;connect_timeout&quot;: 30, //&quot;keepalive&quot;: 120, //&quot;ftp_passive_mode&quot;: true, //&quot;ftp_obey_passive_host&quot;: false, //&quot;ssh_key_file&quot;: &quot;~/.ssh/id_rsa&quot;, //&quot;sftp_flags&quot;: [&quot;-F&quot;, &quot;/path/to/ssh_config&quot;], //&quot;preserve_modification_times&quot;: false, //&quot;remote_time_offset_in_hours&quot;: 0, //&quot;remote_encoding&quot;: &quot;utf-8&quot;, //&quot;remote_locale&quot;: &quot;C&quot;, //&quot;allow_config_upload&quot;: false,&#125;]]></content>
      <categories>
        <category>sublime</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>sublime</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo 怎么避免 .md 文件被解析？]]></title>
    <url>%2F2017%2F02%2F10%2FHexo%20%E6%80%8E%E4%B9%88%E9%81%BF%E5%85%8D%20.md%20%E6%96%87%E4%BB%B6%E8%A2%AB%E8%A7%A3%E6%9E%90%EF%BC%9F%2F</url>
    <content type="text"><![CDATA[Hexo原理就是hexo在执行hexo generate时会在本地先把博客生成的一套静态站点放到public文件夹中，在执行hexo deploy时将其复制到.deploy文件夹中。Github的版本库通常建议同时附上README.md说明文件，但是hexo默认情况下会把所有md文件解析成html文件，所以即使你在线生成了 README. md，它也会在你下一次部署时被删去。怎么解决呢？ 在Hexo目录下的source根目录下添加一个README.md。修改Hexo目录下的_config.yml。将skip_render参数的值设置上：12skip_render: - README.md 保存退出即可。使用hexo d 命令就不会在渲染 README.md 这个文件了。]]></content>
      <categories>
        <category>基本操作</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>GitHub</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Sublime Text 日常配置]]></title>
    <url>%2F2017%2F01%2F18%2FSublime%20Text%20%E6%97%A5%E5%B8%B8%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[安装官网下载压缩包 https://www.sublimetext.com/3 解压缩，将目录名改为sublime_text，移动到 /opt/ 目录下 12sudo mv sublime_text_3 sublime_textsudo mv sublime_text /opt/ 禁用自动更新123“Preferences -&gt; Settings-User/Distraction Free“#增加一行“update_check”: false, 如果上面方法无效，修改hosts文件，添加下面几行： 123456sudo nano /etc/hosts#添加下面几行127.0.0.1 www.sublimetext.com127.0.0.1 license.sublimehq.com127.0.0.1 45.55.255.55127.0.0.1 45.55.41.223 linux不能输入中文解决方法下载 zh_cn.tar.gz 执行 123tar -zxvf zh_cn.tar.gz cd sublime/sudo ./install.sh 注册码：12345678910111213--- BEGIN LICENSE -----ZYNGA INC.50 User LicenseEA7E-811825927BA117 84C9300F 4A0CCBC4 34A56B44985E4562 59F2B63B CCCFF92F 0E646B830FD6487D 1507AE29 9CC4F9F5 0A6F32E30343D868 C18E2CD5 27641A71 25475648309705B3 E468DDC4 1B766A18 7952D28CE627DDBA 960A2153 69A2D98A C87C060745DC6049 8C04EC29 D18DFA40 442C680B1342224D 44D90641 33A3B9F2 46AADB8F------ END LICENSE ------ 导入插件 进入Packages/User 1234cd ~/.config/sublime-text-3/Packages/Usergit clone git@gitee.com:oceandlnu/sublime-config.gitmv sublime-config/* ./rm -rf sublime-config 打开Sublime Text，按 ctrl + ` 或者 View &gt; Show Console ，打开 Console 一次性输入如下代码，回车： 1import urllib.request,os,hashlib; h = &apos;6f4c264a24d933ce70df5dedcf1dcaee&apos; + &apos;ebe013ee18cced0ef93d5f746d80ef60&apos;; pf = &apos;Package Control.sublime-package&apos;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( &apos;http://packagecontrol.io/&apos; + pf.replace(&apos; &apos;, &apos;%20&apos;)).read(); dh = hashlib.sha256(by).hexdigest(); print(&apos;Error validating download (got %s instead of %s), please try manual install&apos; % (dh, h)) if dh != h else open(os.path.join( ipp, pf), &apos;wb&apos; ).write(by) 其他配置1.首选项 -&gt; 快捷键设置 12345678910//显示、隐藏侧边栏&#123; &quot;keys&quot;: [&quot;alt+1&quot;], &quot;command&quot;: &quot;toggle_side_bar&quot; &#125;,//复制当前行&#123; &quot;keys&quot;: [&quot;ctrl+d&quot;],&quot;command&quot;: &quot;duplicate_line&quot; &#125;,//格式化代码&#123; &quot;keys&quot;: [&quot;alt+f&quot;],&quot;command&quot;:&quot;reindent&quot;,&quot;args&quot;:&#123;&quot;single_line&quot;: false&#125; &#125;,&#123; &quot;keys&quot;: [&quot;alt+j&quot;], &quot;command&quot;: &quot;move&quot;, &quot;args&quot;: &#123;&quot;by&quot;: &quot;characters&quot;, &quot;forward&quot;: false&#125; &#125;,&#123; &quot;keys&quot;: [&quot;alt+l&quot;], &quot;command&quot;: &quot;move&quot;, &quot;args&quot;: &#123;&quot;by&quot;: &quot;characters&quot;, &quot;forward&quot;: true&#125; &#125;,&#123; &quot;keys&quot;: [&quot;alt+i&quot;], &quot;command&quot;: &quot;move&quot;, &quot;args&quot;: &#123;&quot;by&quot;: &quot;lines&quot;, &quot;forward&quot;: false&#125; &#125;,&#123; &quot;keys&quot;: [&quot;alt+k&quot;], &quot;command&quot;: &quot;move&quot;, &quot;args&quot;: &#123;&quot;by&quot;: &quot;lines&quot;, &quot;forward&quot;: true&#125; &#125;, 2.首选项 -&gt; 设置 123456789101112&#123; &quot;color_scheme&quot;: &quot;Packages/Material Theme/schemes/Material-Theme-Palenight.tmTheme&quot;, &quot;font_face&quot;: &quot;Liberation Mono&quot;, &quot;font_size&quot;: 14, &quot;ignored_packages&quot;: [ &quot;Markdown&quot;, &quot;Vintage&quot; ], &quot;theme&quot;: &quot;Material-Theme-Palenight.sublime-theme&quot;, &quot;word_wrap&quot;: &quot;true&quot;&#125; 3.安装汉化插件 Ctrl+Shift+P打开命令行模式，输入pci，然后回车选择：Package Control: Install Package。 稍等一会，在弹出的下拉菜单输入”ChineseLocalization”。 参考资料： Installation - Package Control]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>sublime</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git 常见问题]]></title>
    <url>%2F2016%2F12%2F24%2FGit%20%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[错误：failed to push some refs to 在使用git 对源代码进行push到gitHub时可能会出错，如下 123456789$ git push -u origin masterTo github.com:oceandlnu/oceandlnu.github.io.git ! [rejected] master -&gt; master (fetch first)error: failed to push some refs to 'git@github.com:oceandlnu/oceandlnu.github.io.git'hint: Updates were rejected because the remote contains work that you dohint: not have locally. This is usually caused by another repository pushinghint: to the same ref. You may want to first integrate the remote changeshint: (e.g., 'git pull ...') before pushing again.hint: See the 'Note about fast-forwards' in 'git push --help' for details. 出现错误的主要原因是github中的README.md文件不在本地代码目录中 可以通过如下命令进行代码合并[注：pull=fetch+merge] 1git pull --rebase origin master 执行上面代码后可以看到本地代码库中多了 README.md 文件 此时再执行语句 git push -u origin master 即可完成代码上传到 github 错误：Git Push Error: insufficient permission for adding an object to repository database 进入项目 根目录/.git/objects ，yourname 替换为你的用户名， yourgroup 替换为你的用户所属组 12cd .git/objectssudo chown -R yourname:yourgroup *]]></content>
      <categories>
        <category>基本操作</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LNMP环境的配置日常]]></title>
    <url>%2F2016%2F11%2F12%2FLNMP%E7%8E%AF%E5%A2%83%E7%9A%84%E9%85%8D%E7%BD%AE%E6%97%A5%E5%B8%B8%2F</url>
    <content type="text"><![CDATA[在搭建好的lnmp环境中使用配置，使环境易于管理。 找到mysql配置文件：find / -name my.cnf注释掉bind-address = 0.0.0.0，使数据库支持远程访问。防火墙禁止了3306端口，以iptable为例vi /etc/sysconfig/iptables增加下面一行：-A RH-Firewall-1-INPUT -m state –state NEW -m tcp -p tcp –dport 3306-j ACCEPT重启后生效 12345service iptables startnginx.conf去掉ci的index.php:location /&#123;try_files $uri $uri/ /index.php?$uri&amp;$args;&#125; 12345678910111213141516171819202122232425设置php.ini的cgi.fix_pathinfo=1登录mysql:mysql -u root -p查看所有数据库:show databases;创建数据库:create database name;选择数据库:use databasename;直接删除数据库:drop database name;显示表:show tables;表的详细描述:describe tablename;查看mysql用户信息:use mysql;select from mysql.user;添加mysql用户(本地/远程):grant all privileges on . to admin@localhost identified by ‘password’ with grant option;grant all privileges on . to admin@”%” identified by ‘password’ with grant option;刷新内容：flush privileges;查看mysql端口:show global variables like ‘port’; 计划任务：编辑/etc/crontab文件，每天凌晨3点半备份mysql数据库。30 3 run-parts /data/mysql/mysql_clear.shmysql_clear.sh文件内容： 1234567891011121314151617181920212223#设置mysql备份目录folder=/data/backup_sql/cd $folderday=`date +%Y%m%d`rm -rf $daymkdir $daycd $day#数据库服务器，一般为localhosthost=localhost#用户名user=root#密码password=root#要备份的数据库db=wechat#数据要保留的天数days=3mysqldump -h$host -u$user -p$password $db&gt;backup.sqlzip backup.sql.zip backup.sqlrm -rf backup.sqlcd ..day=`date -d “$days days ago” +%Y%m%d`rm -rf $day]]></content>
      <categories>
        <category>基本操作</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Nginx</tag>
        <tag>MySQL</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo的常用操作]]></title>
    <url>%2F2016%2F08%2F05%2FHexo%E7%9A%84%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[新建一个网站 //新建一个网站。如果没有设置 folder ，$ hexo 默认在目前的文件夹建立网站。 $ hexo init [foledr] 发表一篇文章 //新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。 $ hexo new [layout] &quot;文章标题&quot; 在本地博客文件夹 source_posts 文件夹下看到我们新建的 markdown 文件。 当然，我们也可以手动添加Markdown文件在source -&gt; _deploy文件夹下，其效果同样可以媲美$ hexo new 文章编辑好之后，运行生成、部署命令： 1234567891011//清除缓存文件 (db.json) 和已生成的静态文件 (public)。//在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。$ hexo clean// 生成新的静态文件（public）$ hexo generate或者$ hexo g// 开始部署$ hexo deploy或者$ hexo d 也可以用下面的命令，是一样的效果，让 $ hexo 在生成完毕后自动部署网站 $ hexo clean $ hexo g -d 文章如何添加多个标签 有两种多标签格式 123456tags: [a, b, c]或tags: - a - b - c 显示部分文章内容 12//如果在博客文章列表中，不想全文显示，可以增加 &lt;!-- more --&gt;, 后面的内容就不会显示在列表。&lt;!--more--&gt; 添加插件 添加 sitemap 和 feed 插件 切换到你本地的 $ hexo 目录 CIA ，在git窗口，输入以下命令 12npm install $ hexo-generator-feed --savenpm install $ hexo-generator-sitemap --save 修改 _config.yml，增加以下内容 123456789101112# ExtensionsPlugins:- $ hexo-generator-feed- $ hexo-generator-sitemap#Feed Atomfeed: type: atom path: atom.xml limit: 20#sitemapsitemap: path: sitemap.xml 再执行以下命令，部署服务端 $ hexo g -d 配完之后，就可以访问 https://oceandlnu.github.io/atom.xml 和 https://oceandlnu.github.io/sitemap.xml ，发现这两个文件已经成功生成了。 添加 404 页面 GitHub Pages 自定义404页面非常容易，直接在根目录下创建自己的404.html就可以。但是自定义404页面仅对绑定顶级域名的项目才起作用，GitHub默认分配的二级域名是不起作用的，使用$ hexo server在本机调试也是不起作用的。 其实，404页面可以做更多有意义的事，来做个404公益项目吧。 推荐使用腾讯公益404 http://www.qq.com/404/ ： 123456&lt;script type="text/javascript" src="//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js" charset="utf-8" homePageUrl="http://www.lovebxm.com/" homePageName="回到我的主页"&gt;&lt;/script&gt; 复制上面代码，贴粘到目录下新建的404.html即可！ 多PC同步管理博客 很多人可能家里一台笔记本，公司一个台式机，想两个同时管理博客，同时达到备份的博客主题、文章、配置的目的。下面就介绍一下用github来备份博客并同步博客。 A电脑备份博客内容到github 配置.gitignore文件。在博客根目录下，找到此文件，用sublime text 打开，在最后增加两行内容/.deploy_git和/public（如果没有就加上，有的话就不用了） 初始化仓库。 在博客根目录下，在git bash下依次执行git init和git remote add origin seivice，service为远程仓库地址。 同步到远程仓库。 gitbash下依次执行以下命令 123git add . #添加目录下所有文件git commit -m "更新说明" #提交并添加更新说明git push -u origin master #推送更新到远程仓库 B电脑拉下远程仓库文件 在B电脑上同样先安装好node、git、ssh、hexo，然后建好hexo文件夹，安装好插件，（然后选做：将备份到远程仓库的文件及文件夹删除），然后执行以下命令： 12345git initgit remote add origin &lt;server&gt;git fetch --allgit reset --hard origin/master发布博客后同步 在B电脑发布完博客之后，记得将博客备份同步到远程仓库执行以下命令： 1234git add .#可以用git master 查看更改内容git commit -m "更新信息"git push -u origin master #以后每次提交可以直接git push 平时同步管理 每次想写博客时，先执行：git pull进行同步更新。发布完文章后同样按照上面的 发布博客后同步 同步到远程仓库。 平时常用命令整理 12345678git pull #同步更新hexo new post "新建文章" #简写形式 hexo n "新建文章"hexo clean #清除旧的public文件夹hexo generate #生成静态文件 简写形式 hexo ghexo deploy #发布到github上 简写形式 hexo dgit add . #添加更改文件到缓存区git commit -m "更新说明" #提交到本地仓库git push -u origin master #推送到远程仓库进行备份 中文乱码 在 md 文件中写中文内容，发布出来后为乱码，原因是 md 的编码不对，将 md 文件另存为UTF-8编码的文件即可解决问题。 结束语 建站的系统有很多，如： Hexo + GitHub Pages Jekyll + GitHub Pages WordPress + 服务器 + 域名 DeDeCMS + 服务器 + 域名 … 使用 Hexo + GitHub Pages 建站，有优点也有缺点： GitHub Pages 不支持数据库管理，所以你只能做静态页面的博客，不能像其他博客（如 WordPress）那样通过数据库管理自己的博客内容。但是，GitHub Pages 无需购置服务器，免服务器费的同时还能做负载均衡，github pages有300M免费空间。个人博客真的有必要用数据库吗？答案是否定的。博客静态化，评论记录使用第三方的 网易云跟帖就可以了。静态的博客更有利于搜索引擎蜘蛛爬取，轻量化的感觉真的很好。通过 Hexo 你可以轻松地使用 Markdown 编写文章，非常符合我的口味。Markdown 真的是专门针对程序员开发的语言啊，现在感觉没有 Markdown什么都不想写。什么富文本编辑器，什么word，太麻烦了！而且样式都好丑！效率太低！推荐几个很好用的在线 Markdown 编辑器： 作业部落：https://www.zybuluo.com/mdeditor马克飞象：https://maxiang.io推荐图床： 极简图床 + chrome 插件 + 七牛空间，七牛云储存提供10G的免费空间,以及每月10G的流量，存放个人博客外链图片最好不过了，七牛云储存还有各种图形处理功能、缩略图、视频存放速度也给力。]]></content>
      <categories>
        <category>基本操作</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown简明语法]]></title>
    <url>%2F2016%2F07%2F05%2FMarkdown%E7%AE%80%E6%98%8E%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[Markdown是一种极简的『标记语言』，将文本转为HTML，通常为我大码农所用。其不追求大而全，简洁至上，正所谓不求最贵，只求最好！ 本文介绍Markdown基本语法，内容很少，一行语法一行示例，学会后可轻松写出高大上的文档，再也不需要各种编辑器去调文章格式。另外，网上有各平台下的Markdown工具可用，也有在线的，我直接使用sublime搞定，Markdown本来就是为了追求简洁，弄个工具岂不多此一举。 强调 星号与下划线都可以，单是斜体，双是粗体，符号可跨行，符号可加空格 1234**粗体**__粗体__*斜体*_斜体_ 粗体粗体斜体_斜体_ 分割线 三个或更多-_*，必须单独一行，可含空格 --- 引用 翻译成html就是&lt;blockquote&gt;&lt;/blockquote&gt;符号后的空格可不要 &gt; 引用 引用 123内层符号前的空格必须要&gt;引用 &gt;&gt;引用中的引用 引用 引用中的引用 标题：Setext方式 12345三个或更多大标题===小标题--- 大标题小标题标题：Atx方式 123456# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题 一级标题二级标题三级标题四级标题五级标题六级标题无序列表 1234符号之后的空格不能少，-+*效果一样，但不能混合使用，因混合是嵌套列表，内容可超长- 无序列表- 无序列表- 无序列表 无序列表 无序列表 无序列表 1234符号之后的空格不能少，-+*效果一样，但不能混合使用，因混合是嵌套列表+ 无序列表+ 无序列表+ 无序列表 无序列表 无序列表 无序列表 1234符号之后的空格不能少，-+*效果一样，但不能混合使用，因混合是嵌套列表* 无序列表* 无序列表* 无序列表 无序列表 无序列表 无序列表 12345数字不能省略但可无序，点号之后的空格不能少1. 有序列表2. 有序列表3. 有序列表8. 有序列表 有序列表 有序列表 有序列表 有序列表 1234567-+*可循环使用，但符号之后的空格不能少，符号之前的空格也不能少- 嵌套列表 + 嵌套列表 + 嵌套列表 - 嵌套列表 * 嵌套列表- 嵌套列表 嵌套列表 嵌套列表 嵌套列表 嵌套列表 嵌套列表 嵌套列表 文字超链：Inline方式 12Tooltips可省略[Ocean's](https://oceandlnu.github.io/ "Ocean's Blog") Ocean’s 图片超链 12多个感叹号，Tooltips可省略，要设置大小只能借助HTML标记![GitHub Mark](http://github.global.ssl.fastly.net/images/modules/logos_page/GitHub-Mark.png "GitHub Mark") 索引超链：Reference方式 12345索引，1 2可以是任意字符[Ocean&apos;s Blog][1]![GitHub Octocat][2][1]:https://oceandlnu.github.io/[2]:http://github.global.ssl.fastly.net/images/modules/logos_page/Octocat.png [Ocean’s Blog][1]![GitHub Octocat][2][1]:https://oceandlnu.github.io/[2]:http://github.global.ssl.fastly.net/images/modules/logos_page/Octocat.png 自动链接 123尖括号&lt;https://oceandlnu.github.io/&gt;https://oceandlnu.github.io/ 代码：行内代码 12每行文字前加4个空格或者1个Tab val s = &quot;hello Markdown&quot;; val s = &quot;hello Markdown&quot; 代码：段落代码 123内容包含在```bash和```之间，bash换成指定编程语言，也可以省略val s = &quot;hello Markdown&quot;println( s ) 代码：hexo 1234可指定编程语言，代表左右大括号『% codeblock [title] [lang:language] [url] [link text] %』 code snippet『% endcodeblock %』 注释1&lt;!-- 注释 --&gt; 用html的注释，好像只有这样？ 转义字符 1234567891011121314Markdown中的转义字符为\，转义的有：\\ 反斜杠\` 反引号\* 星号\_ 下划线\&#123;\&#125; 大括号\[\] 中括号\(\) 小括号\# 井号\+ 加号\- 减号\. 英文句号\! 感叹号其它 文本中可直接用html标签，但是要前后加上空行。 表格 目前编辑器不支持表格，以往是通过截图，呈现的效果并不好，Markdown支持html，所以我们可以用html来写表格。但是……用html写表格，实在太麻烦了，这里有个简单的转换方法，供大家参考： 举例，假设有这样一个表格，内容如下： 时间 地点 人物3月5日 北京 姚明3月7日 上海 韩寒 处理方法如下： 1.从word或excel中复制表格 2.打开此链接 3.贴上复制的文字，然后按convert，就会得到这个表格的代码 4.简要说明表格设定如下： 1234567891011121314将第一个 &lt;table&gt;变成&lt;table class=&quot;table table-bordered table-striped table-condensed&quot;&gt;。为什么要加它们呢？这三个是什么意思呢？解释如下：它们都会给表格带上某种样式，如果没有的话，比较不好看：1.table-bordered：带圆角边框和竖线2.table-striped：奇偶行颜色不同3.table-condensed：压缩行距以上三个可以进行不同的组合，如果是很长的表格，建议只用后两个。另外，如果需要表头跟内容不一样，可以将&lt;td&gt;表头内容&lt;/td&gt;换成&lt;th&gt;表头内容&lt;/th&gt;。如果表格内文需要换行，可以在要换行的内容后加入&lt;br&gt;，后面的内容就会跑到下一行。如果内文中有代码，需要特别显示，可使用：&lt;code&gt;代码&lt;/code&gt;。如果表格中有需要设为斜体的内容，可使用：&lt;I&gt;要设为斜体的内容&lt;/I&gt;。如果有跨行或者跨列的单元格，可用&lt;th colspan=&quot;跨列数&quot;&gt;内容&lt;/th&gt;。跨行则是用rowspan=&quot;跨行数&quot;。如果要调整某一列的宽度，可使用：&lt;th width=&quot;宽度值或百分比&quot;&gt;表头内容&lt;/th&gt;。 如果要调整整个表格的宽度，可以参考berlinix的这篇文章：http://www.ituring.com.cn/article/details/8367 5.把最后得到的代码复制到文中，下面就是结果啦： 时间 地点 人物 3月5日 北京 姚明 3月7日 上海 韩寒 如果大家对此感兴趣，这里有一个进阶资料：http://twitter.github.com/bootstrap/base-css.html#tables结束语 以上基本够用，更详尽的请参考文献10，另外Markdown+R可以干大事，请参考文献6。 参考文献 1.献给写作者的 Markdown 新手指南2.Cmd Markdown 编辑阅读器3.Markdown之表格的处理4.Markdown语法说明（详解版）5.怎样使用Markdown6.Markdown写作浅谈7.Markdown语法示例8.HTML转义字符对照表9.Markdown: Basics （快速入门）10.Markdown 语法说明 (简体中文版)]]></content>
      <categories>
        <category>基本操作</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git的简单使用]]></title>
    <url>%2F2016%2F06%2F22%2FGit%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[第一步 下载Git 在官网点击Download，下载对应的exe文件，注意你的操作系统是32位还是64位。 双击安装，中间不用做任何改动，一直下一步就行。如果你想修改安装位置，请放在纯英文路径下。 安装成功，你现在就可以使用git命令行工具了。在你想要下载代码的路径，点击鼠标右键，选择Git Bash here。注意，你的代码路径也应是纯英文的。 Git Bash使用的是MinGW，其界面如下图所示： 第二步 创建一个本地hello-world仓库 在命令行输入 mkdir hello-word，创建一个新文件夹。你可以使用ls命令来查看当前目录下有哪些文件和文件夹。 输入cd hello-world进入新文件夹，注意在输入命令时，你可以用Tab键来自动补全。 输入git init初始化Git仓库。此时用ls -a查看当前目录，可以看到多了一个.git/的文件夹，此文件夹保存了版本控制的所有相关信息。 注意，在此处使用的所有命令，如果你是在linux环境下开发，用法都是完全一样的。所以对于完全没有Linux使用经验的学员，这也是一个开始接触Linux工作方式的好方法。 接下来，让我们创建一份简单的说明文件，并提交到版本库中。 输入echo “This is a simple practise” &gt; readme.txt，创建一个readme.txt文件。 输入git status查看当前版本库状态，在Untracked files(未跟踪文件)下，会出现红色的readme.txt，代表此文件还未被Git所管理。 使用git add readme.txt，将该文件加入缓冲区，如果你确定所有的修改都需要提交，可以使用git add .来加入所有修改。现在用git status查看，将看到文件名变为绿色。 使用git commit -m “This is my first commit via Git!”来提交修改，-m后面所带的参数是本次提交信息，一般用来记录本次提交的主要意图。 提交成功后，可以用git log查看历史提交记录。每个记录都会有提交id，作者和提交日期。 你可以用git branch查看当前有哪些分支，当然，因为我们没有创建任何分支，目前只会有一个master分支。 使用git checkout -b feature创建一个名为feature的分支，再用git branch查看一下。1234$ git checkout -b iss53# 它是下面两条命令的简写：$ git branch iss53$ git checkout iss53 以上是最最基本的Git操作，大家可以在此hello-world项目中随意尝试各种其他git命令，最好的参考资料是Pro Git book。 注意：学会Git的唯一方式是在实际使用中学习，切记不要尝试先记住一大堆理论知识或者Git命令。 项目的下载，查看和修改第一步. 从GitHub上下载我们的项目代码。 以Hello-World项目为例，点击绿色按钮Clone or download，然后在弹出窗口中点击剪切板图标，复制仓库的URL。 在git bash中输入git clone git@github.com:oceandlnu/hello-world.git，下载项目源码。第二步. 查看版本历史 cd到项目文件夹下，使用git log能看到我们的历史提交记录。 要回到某一历史版本，可以使用git checkout commitId，看完后要回到最新代码，使用git checkout master。第三步. 本地修改代码你可以在我们的代码基线上任意修改，但为了下载新代码时不出现冲突，请遵循以下步骤： 下载新代码：git pull。 从master出捡出一个新的分支：git checkout -b feature。feature是分支名称，你可以随意取名，但请用英文。 在feature分支上随意修改，改完后你可以提交你的修改：git commit -m “some message”。 此时要同步代码，请先切回主分支：git checkout master，然后更新git pull。 如果想删除自己建立的分支，使用git branch -D feature，注意执行此命令后分支被强制删除，无法恢复。]]></content>
      <categories>
        <category>基本操作</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GitHub入门到上传本地项目]]></title>
    <url>%2F2016%2F06%2F05%2FGitHub%E5%85%A5%E9%97%A8%E5%88%B0%E4%B8%8A%E4%BC%A0%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%2F</url>
    <content type="text"><![CDATA[GitHub是基于Git实现的代码托管。git是目前最好用的版本控制系统了，非常受欢迎，比之svn更好。 GitHub可以免费使用，并且快速稳定。即使是付费帐户，每个月不超过10美刀的费用也非常便宜。 利用GitHub，你可以将项目存档，与其他人分享交流，并让其他开发者帮助你一起完成这个项目。优点在于，他支持多人共同完成一个项目，因此你们可以在同一页面对话交流。 创建自己的项目，并备份，代码不需要保存在本地或者服务器，GitHub做得非常理想。 学习Git也有很多好处。他被视为一个预先维护过程，你可以按自己的需要恢复、提交出现问题,或者您需要恢复任何形式的代码，可以避免很多麻烦。Git最好的特性之一是能够跟踪错误，这让使用Github变得更加简单。Bugs可以公开，你可以通过Github评论，提交错误。 在GitHub页面，你可以直接开始，而不需要设置主机或者DNS。 对于我来说，我可以在公司和家编辑同样的一套代码了，用U盘或者网盘都好麻烦的说 理论说太多容易忘，来实践实践吧。 大纲： 一、创建github repository(仓库) 二、安装git客户端 三、为Github账户设置SSH key 四、上传本地项目到github 一、创建github repository(仓库)1-1 登录githubgithub的官方网址：https://github.com ，如果没有账号，赶紧注册一个。 注意： 用户名只能包含字母和”-“字符密码至少包含一个字母，一个数字和七个字符 点击Sign in进入登录界面，输入账号和密码登入github。 1-2 创建repository(仓库)为啥要叫repository(仓库)？我起初也纳闷，叫代码库不更简单明了么？ 但仔细一琢磨，仓库一般都是放粮食的吧，这是把代码当作饱腹之物，多有爱，瞬间觉得这冰冷冷的代码充满了查克拉。 扯远了，来看怎么创建仓库，登录后可以看到有repository选项卡 如果没在这个页面也没关系，点击右上角的头像旁边的小三角，展开后可以看到Your profile，点击进入后也能看到repository 切换到repository选项卡，可以看到很醒目的new按钮。不用犹豫，点击它，开始创建自己的粮仓了。 下面是创建仓库信息，只有名字是必填项，现在我创建了一个仓库叫：test 创建成功后，可以看到自己的仓库地址，如此，我的远程免费的仓库就创建了。它还介绍了github仓库的常用指令。这个指令需要在本地安装git客户端。 git init //把这个目录变成Git可以管理的仓库 git add README.md //文件添加到仓库 git add . //不但可以跟单一文件，还可以跟通配符，更可以跟目录。一个点就把当前目录下所有未追踪的文件全部add了 git commit -m “first commit” //把文件提交到仓库 git remote add origin git@github.com:wangjiax9/practice.git //关联远程仓库 git push -u origin master //把本地库的所有内容推送到远程库上 二、安装git客户端Git是目前世界上最先进的分布式版本控制系统，git与svn的五个基本区别。它有以下特点： 分布式 : Git版本控制系统是一个分布式的系统, 是用来保存工程源代码历史状态的命令行工具; 保存点 : Git的保存点可以追踪源码中的文件, 并能得到某一个时间点上的整个工程项目额状态; 可以在该保存点将多人提交的源码合并, 也可以会退到某一个保存点上; Git离线操作性 :Git可以离线进行代码提交, 因此它称得上是完全的分布式处理, Git所有的操作不需要在线进行; 这意味着Git的速度要比SVN等工具快得多, 因为SVN等工具需要在线时才能操作, 如果网络环境不好, 提交代码会变得非常缓慢; Git基于快照 : SVN等老式版本控制工具是将提交点保存成补丁文件, Git提交是将提交点指向提交时的项目快照, 提交的东西包含一些元数据(作者, 日期, GPG等); Git的分支和合并 : 分支模型是Git最显著的特点, 因为这改变了开发者的开发模式, SVN等版本控制工具将每个分支都要放在不同的目录中, Git可以在同一个目录中切换不同的分支； 分支即时性 : 创建和切换分支几乎是同时进行的, 用户可以上传一部分分支, 另外一部分分支可以隐藏在本地, 不必将所有的分支都上传到GitHub中去; 分支灵活性 : 用户可以随时 创建 合并 删除分支, 多人实现不同的功能, 可以创建多个分支进行开发, 之后进行分支合并, 这种方式使开发变得快速, 简单, 安全。 2-1 下载git客户端 官方下载地址：http://git-scm.com/download/ 根据你自己的系统，下载对应版本 2-2 安装客户端 下载好之后咱们开始安装吧，欢迎界面，下一步。选择安装路径，千万别选带中文的路径，有时候会引起不必要的误会。 选择安装组件，按默认的来就好了。1）图标组件(Addition icons) : 选择是否创建快速启动栏图标 或者 是否创建桌面快捷方式;2）桌面浏览(Windows Explorer integration) : 浏览源码的方法, 单独的上下文浏览 只使用bash 或者 只用Git GUI工具; 高级的上下文浏览方法 使用git-cheetah plugin插件;3）关联配置文件(Associate .git*) : 是否关联git配置文件, 该配置文件主要显示文本编辑器的样式;4）关联shell脚本文件(Associate .sh) : 是否关联Bash命令行执行的脚本文件;5）使用TrueType编码 : 在命令行中是否使用TruthType编码, 该编码是微软和苹果公司制定的通用编码; 设置开始菜单中快捷方式的目录名称，默认就好，下一步吧 设置环境变量 : 选择使用什么样的命令行工具, 一般情况下我们默认使用Git Bash即可, 默认选择;1）Git自带 : 使用Git自带的Git Bash命令行工具;2）系统自带CMD : 使用Windows系统的命令行工具;3） 二者都有 : 上面二者同时配置, 但是注意, 这样会将windows中的find.exe 和 sort.exe工具覆盖, 如果不懂这些尽量不要选择; 选择换行格式 ，依然是默认就好。1）检查出windows格式转换为unix格式 : 将windows格式的换行转为unix格式的换行在进行提交;2）检查出原来格式转为unix格式 : 不管什么格式的, 一律转为unix格式的换行在进行提交;3）不进行格式转换 : 不进行转换, 检查出什么, 就提交什么; 选择终端模拟器，依然默认就好 1）使用MinTTY，就是在Windows开了一个简单模拟Linux命令环境的窗口Git Bash 2）使用windows的系统的命令行程序cmd.exe 选择默认就好，不用文件系统缓存 git安装成功。 2-3 绑定用户 打开git-bash.exe，在桌面快捷方式/开始菜单/安装目录中 因为Git是分布式版本控制系统，所以需要填写用户名和邮箱作为一个标识，用户和邮箱为你github注册的账号和邮箱12345YANG@DESKTOP-VLST063 MINGW64 /d/hexo/oceandlnu.github.io (master|REBASE 1/2)$ git config --global user.name "oceandlnu"YANG@DESKTOP-VLST063 MINGW64 /d/hexo/oceandlnu.github.io (master|REBASE 1/2)$ git config --global user.email "136494666@qq.com" ps：git config –global 参数，有了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然你也可以对某个仓库指定的不同的用户名和邮箱。 三、为Github账户设置SSH key众所周知ssh key是加密传输。 加密传输的算法有好多，git使用rsa，rsa要解决的一个核心问题是，如何使用一对特定的数字，使其中一个数字可以用来加密，而另外一个数字可以用来解密。这两个数字就是你在使用git和github的时候所遇到的public key也就是公钥以及private key私钥。 其中，公钥就是那个用来加密的数字，这也就是为什么你在本机生成了公钥之后，要上传到github的原因。从github发回来的，用那公钥加密过的数据，可以用你本地的私钥来还原。 如果你的key丢失了，不管是公钥还是私钥，丢失一个都不能用了，解决方法也很简单，重新再生成一次，然后在github.com里再设置一次就行 3-1 生成ssh key 检查是否已生成密钥 cd ~/.ssh，ls如果有3个文件，则密钥已经生成，id_rsa.pub就是公钥 123456YANG@DESKTOP-VLST063 MINGW64 /d/hexo/oceandlnu.github.io (master|REBASE 1/2)$ cd ~/.sshYANG@DESKTOP-VLST063 MINGW64 ~/.ssh$ lsid_rsa id_rsa.pub known_hosts 也可以打开我的电脑”C:\Users\你的用户名\.ssh 里面找到 如果没有生成，那么通过$ ssh-keygen -t rsa -C “136494666@qq.com”来生成，这里换成你的邮箱。 1）是路径确认，直接按回车存默认路径即可 2）直接回车键，这里我们不使用密码进行登录, 用密码太麻烦; 3）直接回车键 生成成功后，去对应目录C:\Users\Ocean\.ssh里（Ocean为电脑用户名，每个人不同）用记事本打开id_rsa.pub，得到ssh key公钥 3-2 为github账号配置ssh key 切换到github，展开个人头像的小三角，点击settings 然后打开SSH and GPG keys菜单， 点击new SSH key新增密钥，填上标题，跟仓库保持一致吧，好区分。 接着将id_rsa.pub文件中key粘贴到此，最后Add key生成密钥吧。 如此，github账号的SSH keys配置完成。 四、上传本地项目到github4-1 创建一个本地项目 我这创建了几个空文件夹和一个文件及一个项目配置文件，好多前端项目都这样搭架构，我也追随潮流哈。 4-2 建立本地仓库 再来复习一下创建新仓库的指令：123456 git init //把这个目录变成Git可以管理的仓库 git add README.md //文件添加到仓库 git add . //不但可以跟单一文件，还可以跟通配符，更可以跟目录。一个点就把当前目录下所有未追踪的文件全部add了 git commit -m "first commit" //把文件提交到仓库 git remote add origin git@github.com:oceandlnu/test.git //关联远程仓库 git push -u origin master //把本地库的所有内容推送到远程库的master分支上 首先，进入到test项目目录，还记得创建仓库成功后的那个页面吧，指令都在呢。 然后执行指令：git init123456789YANG@DESKTOP-VLST063 MINGW64 ~/.ssh$ cd d:YANG@DESKTOP-VLST063 MINGW64 /d$ cd testYANG@DESKTOP-VLST063 MINGW64 /d/test$ git initInitialized empty Git repository in D:/test/.git/ 初始化成功后你会发现项目里多了一个隐藏文件夹.git 这个目录是Git用来跟踪管理版本库的，没事千万不要手动修改这个目录里面的文件，不然改乱了，就把Git仓库给破坏了。 接着，将所有文件添加到仓库 执行指令：git add . 然后，把文件提交到仓库，双引号内是提交注释。 执行指令：git commit -m “提交文件” 如此本地仓库建立好了。 4-3 关联github仓库 到github test仓库复制仓库地址 然后执行指令：git remote add origin git@github.com:oceandlnu/test.git 4-4 上传本地代码 执行指令：git push -u origin master 1）敲一个：yes， 然后回车 到此，本地代码已经推送到github仓库了，我们现在去githubt仓库看看。 注意：git是不能管理空的文件夹的，文件夹里必须有文件才能add 总结： 如果大家想要知道更多的git操作和知识，推荐去看看缪雪峰的git教程或者是Git手册，下面附上链接。 缪雪峰 - git教程 Git - Book]]></content>
      <categories>
        <category>基本操作</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
</search>
